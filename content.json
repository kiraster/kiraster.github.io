{"pages":[{"title":"相册","text":"","link":"/gallery/index.html"},{"title":"About","text":"Me一名混迹&nbsp;IT&nbsp;行业的\"民工\"，对外宣称自己是\"网络工程师\"，\"&nbsp;IT&nbsp;男\"，\"拉网线的\"，\"设备搬运工\"，\"&nbsp;x&nbsp;工\"……每当想起那些年自己干过的傻&nbsp;x&nbsp;事情，我就&nbsp;~！@#￥%&amp;*……Something你如果走进社会，为了生存或是为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生耿直，刚正不阿，没做任何恶心的事情，没有做任何对别人造成伤害的事情，一辈子拼了老命勉强把老婆、孩子、老娘，把身边的这些人照顾好了，没有成名，没有发财，没有成就伟大的事业，一生正直，最后梗着脖子到了七八十岁死掉了，你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为你，这个世界又多了一个好人。——罗永浩 当你的判断成为下意识的时候，你在赛场上才可能出现在正确的位置，下意识怎么来，训练来的，不是一般的训练，而是千百万次上亿次不断重复的训练，只有坚持下来的人才能走到最后。—— 电影《夺冠》中的台词 Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma - which is living with the results of other people's thinking. Don't let the noise of other's opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.From Stanford Report, June 14, 2005, by Steve Jobs The Ancient One：How did you get to reattach severed nerves...and put a human spine back together bone by bone? Dr.Strange：Study and practice, years of it. In Doctor Strange (Scott Derrickson, 2016), The Ancient One discusses Tea with Dr.Strange: Contact:&nbsp;kir_aster@foxmail.com","link":"/about/index.html"},{"title":"archives","text":"","link":"/archives/index.html"},{"title":"SNMP轮询","text":"首页 设备列表 设备详情-1 设备详情-2 修改参数 单设备同步snmp 单设备删除 计划任务 更多操作 导入设备-1 上传错误提示 设备导出","link":"/gallery/SNMP%E8%BD%AE%E8%AF%A2/index.html"},{"title":"预留2","text":"","link":"/gallery/%E9%A2%84%E7%95%991/index.html"},{"title":"博客2.0","text":"首页 归档页 about页 搜索页 子目录页 文章页","link":"/gallery/%E5%8D%9A%E5%AE%A22.0/index.html"}],"posts":[{"title":"关于开始扯谈","text":"字面意思 肚里墨水浅，蹦不出几个字 晚上躺床，可能由于早已被破坏了的生物钟的影响 时常辗转反侧，脑里思绪万千 明明是身体驱使着我要睡了要睡了 但是脑子并不协调躯体 躺床的我使劲的翻看手机屏幕 完全忘记了床的两大原始作用，你懂我意思吗 最近一段时间，几乎每晚靠着罗哥调校自如的声音入睡 喜马拉雅，定一个倒计时 强行把自己深夜的思绪带入场景中 也会听那个男人的语录，轻微的嘴角上扬和感悟中入睡 眼睛一睁已是第二天的差不多日上三竿的时间 洗洗醒醒坐坐，一天开始了","link":"/posts/49183d2a.html"},{"title":"ENSP_防火墙初始密码问题","text":"在进行 ENSP 模拟器防火墙实验的发现，首次启动防火墙设备后都需要更改初始密码才能进入设备配置，着实操蛋。后面想了个办法，在启动设备前导入配置文件，设备启动后就可以使用导入配置中配置的密码进行登陆，当然还可以配置其他你想加的配置，实现与你要桥接的网卡互通。 思路和实验 通过设备加载初始配置跳过设备首次登陆需要更改密码 通过修改 admin 的密码，修改 vty 配置，修改管理接口配置测试验证导入配置的实用性 操作方法假设你已经会配置Cloud，并且连接好设备 在电脑本地新建 xxx.cfg (后缀名为 .cfg )文件，文件内容如下 123456789101112131415161718192021222324252627aaa manager-user admin password cipher Cisco@123 service-type web terminal ssh level 15 web-manager enable web-manager security enablessh user adminssh user admin authentication-type passwordssh user admin service-type stelnetfirewall zone trust add interface GigabitEthernet0/0/0 interface GigabitEthernet0/0/0 ip address 192.168.10.2 255.255.255.0 service-manage http permit service-manage https permit service-manage ping permit service-manage ssh permituser-interface con 0 authentication-mode aaauser-interface vty 0 4 authentication-mode aaa 导入上面新建的初始配置文件，启动设备 命令行登陆，提示输入用户密码，输入初始配置文件配置的密码后，可直接登陆设备 在浏览器输入 192.168.10.2:8443 ，可跳转到防火墙登陆界面 使用 SecureCRT 软件，可登陆到防火墙设备 ​","link":"/posts/ab67d7a4.html"},{"title":"我理解的费曼学习方法","text":"费曼学习法是美籍犹太人 Richard Feynman 提出的一种学习知识的方法，具体介绍可以访问 Wiki费曼学习法，或者你也可以自行搜索。 我的理解①在我们的学习、工作、或者生活中，或多或少的会接触了解使用一些知识。学习就不用多说，因为你学习的目标是为了使用这些知识或者应对测试。对于工作，往往自己要求或者被动的学习来提升自己的工作技能和业务水平。对于生活，学会生活。 选定知识点或者概念选定一个知识点或者概念后，试想着用正常人理解的词汇来理解它，比如你要向别人讲解一个东西的时候，不要用复杂的专业术语和你自己都不明白的词语来糊弄，用简单的词汇理解知识点，在你表达的时候听的人也更能明白。 回顾知识点或者概念在上面提到的方法后，自己回想这个知识点或者概念会有遗忘的内容或者不理解的点，这时候带着遗忘的内容和知识点重新学习，直到你能用简单的词汇和基本术语理解通透。 简洁的语言组织当自己理解后，把自己理解的知识点或者概念有逻辑有条理，尽可能用简洁的语言组织出来，这个很重要，如果不归纳总结，你自己是明白了，但你使用的时候或者对别人表达就会很混乱容易出错。 检验检验你的理解有没有问题，在实际工作生活中，尝试用“教”的方法向别人表达，或者面对别人能清晰的解释他的疑问。 我的理解② 对于费曼学习法，是不是都适用各种学习场景呢，我觉得不是，对于有一个量化标准的为前提的检验，比如说背诵，默写…… 我觉得此法，需要花费比授课学习更多的时间，因为你不知道你要学习的这个知识点或概念的知识深度、宽度、边界，不知道理解到什么程度就可以终结","link":"/posts/237b6272.html"},{"title":"九十年代","text":"在我的印象中，上个世纪九十年代对我来说是一个特别的年代，也包括我的出世 那时候人事物，我稍微回忆一下 老爸买的黑白电视机，带有车牌号的自行车…… 第一次骑自行车，下车的场景是等速度降到几乎为零，自行车向右方倒，岔开右腿撑着 对了，那是亲戚的一辆山地自行车，当然那时候我还不知道分类 那时候看电影，都是去镇上租碟，村里面稍微“富裕”的人家才买的起 VCD 机 在我老爸没买电视机前，晚上想要看电视节目是去村里有电视的人家围观看，隐约记得晚上回来晚了，村里几乎没有灯亮着，借着月光摸黑回来，大门锁了，找到放大门钥匙的地方，蹑手蹑脚开门关门睡觉 那时候通信是挺落后的，村里有固定电话的没多少人家，看到路边电信杠上挂着一块木制用红色油漆写着号码的才是有固定电话的，那时候普遍用的还是 BB 机，我老爸有一个 那时候村里起房子，砖是从田里挖泥造的 那时候贪玩，回到家会被殴打，那时候贪玩，眉弓往右眼部位被铁片扎了，万幸右眼没有失明，但是留下了疤痕，导致后来照镜子看显得有点“社会” 小时候生病，会被老爸背去打针，当时我应该是哭了，每次打完针后，会有一碗饭馆的面吃，来抚慰幼小的我，对当时的家庭经济状况来说应该算是“大餐” 那时的作业都是早上起来写的，晚上可能是去邻居家看电视，或者跑去看碟片电影了 那时候班主任有一次中午去我家家访吃了个闭门羹，这是她的说法，我不记得了 小学那时候，校园里有一个篮球场，两张乒乓球台，还有一个爬竿的地方，就这么多。小学一到三年级的教室是几间大瓦房，四到六年级是那栋走廊外面用红色油漆写着令人分裂的“团结、紧张、严肃、活泼”大字的楼，至少我后面是这么认为的，这几个词连在一起念简直了 现在回想起来，老感觉有些记忆丢失了，可能是那时候脑子不记事，但是奇怪的是，那时候去走亲戚或者走去哪里的路走过一次，下次就记得怎么去怎么回 ……","link":"/posts/8847b633.html"},{"title":"HCL_一个小实验的思路","text":"实验说明： 设备互联线路，IP 地址、路由协议、可靠性等配置自定义 实验效果： PC_1 网段流量经R1出互联网 PC_2 网段流量经R2出互联网 当任意互联网线路故障后，全部流量走另一线路出互联网 解决思路： 设备互联，IP地址规划如图 Core_SW1、Core_SW2 做堆叠，F1/0/53 to F1/0/54堆叠口，Ten 1/0/50为 BFD 检测线 1234567891011121314&lt;Core_SW1&gt;dis irfMemberID Role Priority CPU-Mac Description *+1 Master 15 72f0-e201-0504 --- 2 Standby 10 72f0-e6bc-0604 ----------------------------------------------------- * indicates the device is the master. + indicates the device through which the user logs in. &lt;Core_SW1&gt;dis irf topology Topology Info ------------------------------------------------------------------------- IRF-Port1 IRF-Port2 MemberID Link neighbor Link neighbor Belong To 1 DIS --- UP 2 72f0-e201-0504 2 UP 1 DIS --- 72f0-e201-0504 核心交换机 Core_SW 与 R1, R2 之间启用三层聚合链路 1234567891011121314151617181920212223242526&lt;Core_SW1&gt;dis link-aggregation summary Aggregation Interface Type: BAGG -- Bridge-Aggregation, BLAGG -- Blade-Aggregation, RAGG -- Route-Aggregation, SCH-B -- Schannel-Bundle Aggregation Mode: S -- Static, D -- Dynamic Loadsharing Type: Shar -- Loadsharing, NonS -- Non-LoadsharingActor System ID: 0x8000, 72f0-e201-0500AGG AGG Partner ID Selected Unselected Individual ShareInterface Mode Ports Ports Ports Type --------------------------------------------------------------------------------BAGG3 S None 2 0 0 Shar RAGG1 S None 2 0 0 Shar RAGG2 S None 2 0 0 Shar &lt;Core_SW1&gt;dis ip int b*down: administratively down(s): spoofing (l): loopbackInterface Physical Protocol IP Address Description GE1/0/1 up up -- --GE1/0/2 up up -- --GE2/0/1 up up -- --GE2/0/2 up up -- --MGE0/0/0 down down -- --RAGG1 up up 10.1.1.1 --RAGG2 up up 10.1.1.5 --Vlan10 up up 192.168.10.254 --Vlan20 up up 192.168.20.254 -- 12345678910111213141516171819202122232425262728293031&lt;R1&gt;dis link-aggregation verbose Loadsharing Type: Shar -- Loadsharing, NonS -- Non-Loadsharing Port: A -- AutoPort Status: S -- Selected, U -- Unselected, I -- Individual Flags: A -- LACP_Activity, B -- LACP_Timeout, C -- Aggregation, D -- Synchronization, E -- Collecting, F -- Distributing, G -- Defaulted, H -- ExpiredAggregate Interface: Route-Aggregation1Aggregation Mode: StaticLoadsharing Type: Shar Port Status Priority Oper-Key-------------------------------------------------------------------------------- GE0/1 S 32768 1 GE0/2 S 32768 1 &lt;R1&gt;dis ip int b*down: administratively down(s): spoofing (l): loopbackInterface Physical Protocol IP Address Description GE0/0 up up 101.1.1.1 --GE0/1 up up -- --GE0/2 up up -- --GE5/0 down down -- --GE5/1 down down -- --GE6/0 down down -- --GE6/1 down down -- --RAGG1 up up 10.1.1.2 --Ser1/0 down down -- --Ser2/0 down down -- --Ser3/0 down down -- --Ser4/0 down down -- -- 12345678910111213141516171819202122232425262728293031&lt;R2&gt;dis link-aggregation verbose Loadsharing Type: Shar -- Loadsharing, NonS -- Non-Loadsharing Port: A -- AutoPort Status: S -- Selected, U -- Unselected, I -- Individual Flags: A -- LACP_Activity, B -- LACP_Timeout, C -- Aggregation, D -- Synchronization, E -- Collecting, F -- Distributing, G -- Defaulted, H -- ExpiredAggregate Interface: Route-Aggregation1Aggregation Mode: StaticLoadsharing Type: Shar Port Status Priority Oper-Key-------------------------------------------------------------------------------- GE0/1 S 32768 1 GE0/2 S 32768 1 &lt;R2&gt;dis ip int b*down: administratively down(s): spoofing (l): loopbackInterface Physical Protocol IP Address Description GE0/0 up up 201.1.1.1 --GE0/1 up up -- --GE0/2 up up -- --GE5/0 down down -- --GE5/1 down down -- --GE6/0 down down -- --GE6/1 down down -- --RAGG1 up up 10.1.1.6 --Ser1/0 down down -- --Ser2/0 down down -- --Ser3/0 down down -- --Ser4/0 down down -- -- 核心交换机 Core_SW 与 SW3 之间启用二层聚合链路 123456789101112131415&lt;SW3&gt;dis link-aggregation verbose Loadsharing Type: Shar -- Loadsharing, NonS -- Non-Loadsharing Port: A -- AutoPort Status: S -- Selected, U -- Unselected, I -- Individual Flags: A -- LACP_Activity, B -- LACP_Timeout, C -- Aggregation, D -- Synchronization, E -- Collecting, F -- Distributing, G -- Defaulted, H -- ExpiredAggregate Interface: Bridge-Aggregation1Aggregation Mode: StaticLoadsharing Type: Shar Port Status Priority Oper-Key-------------------------------------------------------------------------------- GE1/0/1 S 32768 1 GE1/0/2 S 32768 1 核心交换机 Core_SW 配置静态路由；R1、R2 配置默认路由下一跳指向 ISP 设备地址、配置回程静态路由指向 Core_SW 三层聚合接口地址 123456789&lt;Core_SW1&gt;dis cur | inc routepolicy-based-route vlan20nexthop permit node 1 ip policy-based-route vlan20nexthop port link-mode route port link-mode route port link-mode route port link-mode route ip route-static 0.0.0.0 0 10.1.1.2 track 2 ip route-static 0.0.0.0 0 10.1.1.6 preference 80 1234567891011121314&lt;R1&gt;dis ip routing-table pro static Summary count : 3Static Routing table status : &lt;Active&gt;Summary count : 3Destination/Mask Proto Pre Cost NextHop Interface0.0.0.0/0 Static 60 0 101.1.1.2 GE0/0192.168.10.0/24 Static 60 0 10.1.1.1 RAGG1192.168.20.0/24 Static 60 0 10.1.1.1 RAGG1Static Routing table status : &lt;Inactive&gt;Summary count : 0 1234567891011121314&lt;R2&gt;dis ip routing-table pro static Summary count : 3Static Routing table status : &lt;Active&gt;Summary count : 3Destination/Mask Proto Pre Cost NextHop Interface0.0.0.0/0 Static 60 0 201.1.1.2 GE0/0192.168.10.0/24 Static 60 0 10.1.1.5 RAGG1192.168.20.0/24 Static 60 0 10.1.1.5 RAGG1Static Routing table status : &lt;Inactive&gt;Summary count : 0 核心交换机 Core_SW 配置 NQA，检测 ISP_1, ISP_2 可达性，关联 Track 与静态路由、策略路由联动 123456789101112131415161718192021222324252627#nqa entry admin isp_1_test type icmp-echo destination ip 101.1.1.2 frequency 2000 history-record enable history-record number 5 next-hop ip 10.1.1.2 probe count 5 probe timeout 1000 reaction 1 checked-element probe-fail threshold-type consecutive 3 action-type trigger-only source ip 10.1.1.1#nqa entry admin isp_2_test type icmp-echo destination ip 201.1.1.2 frequency 2000 history-record enable history-record number 5 next-hop ip 10.1.1.6 probe count 5 probe timeout 1000 reaction 1 checked-element probe-fail threshold-type consecutive 3 action-type trigger-only source ip 10.1.1.5# nqa schedule admin isp_1_test start-time now lifetime forever nqa schedule admin isp_2_test start-time now lifetime forever 123track 1 nqa entry admin isp_2_test reaction 1#track 2 nqa entry admin isp_1_test reaction 1 1234# ip route-static 0.0.0.0 0 10.1.1.2 track 2 ip route-static 0.0.0.0 0 10.1.1.6 preference 80# 12345#policy-based-route vlan20nexthop permit node 1 if-match acl 3001 apply next-hop 10.1.1.6 track 1# 12345#acl advanced 3001 rule 5 deny ip source 192.168.20.0 0.0.0.255 destination 192.168.10.0 0.0.0.255 rule 10 permit ip source 192.168.20.0 0.0.0.255# ISP 网络设备配置 OSPF 123456789101112131415161718&lt;ISP_NETWORK&gt;dis ip routing-table protocol ospfSummary count : 5OSPF Routing table status : &lt;Active&gt;Summary count : 2Destination/Mask Proto Pre Cost NextHop Interface101.1.1.0/30 O_INTRA 10 2 101.1.1.5 GE0/1201.1.1.0/30 O_INTRA 10 2 201.1.1.5 GE0/2OSPF Routing table status : &lt;Inactive&gt;Summary count : 3Destination/Mask Proto Pre Cost NextHop Interface1.2.3.4/32 O_INTRA 10 0 0.0.0.0 Loop0101.1.1.4/30 O_INTRA 10 1 0.0.0.0 GE0/1201.1.1.4/30 O_INTRA 10 1 0.0.0.0 GE0/2","link":"/posts/c7ac5477.html"},{"title":"简明现代汉语语法_学习","text":"作者：重庆市江津中学校 王征老师 字词、词性、成分之间的关系一般规律： 名词和代词一般更适合做主语和宾语 动词一般更适合做谓语 副词和形容词一般更适合做定语和状语 主谓宾是一般顺序 定语一般在主语和宾语前面 状语一般在谓语前面 顺序颠倒了就是倒装 词性实词 vs 虚词 实词：意义编辑具体的词，包括：名词、动词、形容词、数词、量词、代词 虚词：一般不能单独成句，意义比较抽象，有帮助造句作用的词，包括：副词、介词、连词、助词、叹词、拟声词 名词 表示人或事物名称表示人：姑娘、青年、工人表示具体事物：锤子、坚果、手机表示抽象事物：理想、精神、感情表示时间：春天、昨天、早上、下午 方位名词上下左右前后左右东西南北里头外边以上之下大多数情况下，方位名词用在其他名词性词语的后边，表示事物所在的位置和范围 动词 表示人或事物的动作行为、心里活动、发展变化表示动作行为：走、跑、滚、唱、跳、打表示心里活动：爱、恨、喜欢、讨厌、想念、忘记、佩服表示事物发展变化：增加、减少、扩大、提高、降低、发生、出现 表示可能、应该、意愿能、不能、能够、会、可能、可以、可、要、应该、应当、肯、敢、愿、愿意这类词常放在一般动词的前面 表示动作趋向下、去、来、进、出、到、过、过去、上来、回去、起来这类动词往往放在表示动作行为的动词后边，用来表示动作行为的方向 表示判断：是vs不是 形容词 用来描摹人或事物表示状态：快、慢、软、硬、忙碌、悠闲、激动表示性质：好、坏、美、丑、存粹、清脆表示颜色：赤橙黄绿青蓝紫、苍白、绿油由、红彤彤表示形状：大、小、宽、长、窄、笔直、弯曲 一词多性 结合语境判断 数词和量词 数词：表示确数、序数和概数:确数：一、八千、七万八千概述：十来（个）、三十几（个）、八九（辆）序数：第一、老二、初八 量词：表示单位表示事物的单位：个、台、辆、条表示度量单位：米、吨、克表示动作行为的单位：次、回、趟，轮 数量：数词和量词一般结合起来使用表示数量一个、八千次、十来吨、第一轮 代词 代替名词、动词、形容词、数词、量词、副词代替人或事物：你、你们、我、我们、他、它、她、咱们、自己具有指示作用：那、这、这里、那里、这里、这样、那么、每、各表示疑问：哪里、什么、谁、怎样、怎么样、哪、哪呢","link":"/posts/51f223b9.html"},{"title":"Blog Update","text":"2023-04-16 更换行内代码字体颜色为 #000(黑色) 更换部分文章图片尺寸 2022-11-07 更换博客主题为 :Minos 移除 Minos 主题中分享和评论组件 移除 About 页面 发布日期/阅读时间 元素 修改网站字体为 思源黑体 修改归档页和标签页 不分页 添加相册页面（有点简陋） 其它边边角角修改 谢原作者https://github.com/ppoffice/ 2021-11-20 首页导航栏不显示 Category 页面入口链接 分类页 Category 内容侧边栏显示 清除 Jade 无用代码 修正 Jade 部分代码 修正 CSS 样式文件 2021-11-15 修改首页内容展示方式 修改 pagination 样式 2021-11-07 修改网站字体为思源黑体 2021-10-30 修改 Archive 页样式 修改链接样式 2021-10-30 添加本地搜索 2021-10-29 修改 post 文章页和其他页面的 date_format 参数 2021-10-26 修改 archive 页面条目显示数量 添加文章页底部 Published、Tags 2021-10-24 修改样式中的 media query 参数 2021-10-22 修改文章页，移除左侧 sidebar，page_main 添加边框样式 修改 about 页面底部 contact 信息 移除 article-toc 文章目录 移除 sidebar CV 信息标签 2021-10-16 添加文章页版权信息 修改 md 文件信息 2021-10-12 使用 Academic 主题，感谢作者 Le Phower’s 博客从 Gitee 迁移到 GitHub 修改主题配置文件 修改 sidebar 的 social 内容 主页 content 修改为显示最近十篇文章 主页 content 添加置顶文章 除 category 页和 about 页外添加 pagination 添加 category 页，添加 tag-cloud 添加 archive 页 添加 about 页 post 页面侧边栏添加 article-toc 文章目录 添加百度统计，谷歌统计，谷歌收录，bing 收录 侧边栏添加 aplayer 播放器，显示效果不美观，已注释代码 page_main 的 div CSS 浮动问题未解决 2021-01-23 添加文章页评论邮件提醒功能 2021-01-14 修改博客网站访问地址不带二级目录 修正修改访问地址后文章阅读次数显示为 0 问题 修正 whoami 页面显示双 footer 栏问题 2021-01-08 修正文章阅读次数显示为 0 问题 添加文章模板 updated 参数 对网站添加百度统计 2021-01-06 制作修改博客 Logo，更改 cover 图片 修改导航栏标签为中文 启用 valine 评论代码 添加文章页 END 结束分割线 添加文章页上一篇下一篇链接 添加 post 文章模板，添加 categories,series,cover,tags 参数 修改网页底部 footer，添加网站运行时间记录 更换图标库链接 添加网站图床 更换文章页播放音乐 更换网站首页 Website slogans 动态文字 文章页和 about 页添加网易云音乐 文章页添加“友情链接” 更换部分页面左上角图标返回链接 添加 abbrlink 插件，修改文章页 url 链接 博客网站本地初始调试工作完成，推送至 Gitee","link":"/posts/e2a2e564.html"},{"title":"我的母亲","text":"我的母亲，一个普通的平凡的中年妇女 可能是由于家庭环境的缘故使得她文化水平不高 她很唠叨，做事没什么主见，总是把自己弄的很忙的样子，总喜欢这扫扫那洗洗 跟我说话总是用疑问句的方式，整个家庭存在这种现象，我除外 她有着固有的传统思想方式，就是别人都怎么样我也要怎么样 闲暇之余在家总是喜欢拿着手机看电视剧，说到手机，教她用智能手机对我来说简直是世纪难题，至今她能会那么一点使用的功能是电话、万能钥匙连wifi、视频软件看剧和手机充电，除此之外我已经放弃了，她也放弃了 一天，她对我说烟头烟灰要丢烟灰缸不要直接丢镂空不套塑料袋的垃圾筐，转身就把桌上烟灰缸往垃圾筐一倒，垃圾筐没套塑料袋 她还喜欢“狡辩”，这是针对我爸的 ……","link":"/posts/221a99d.html"},{"title":"HCL_路由器双出口策略配置实验","text":"路由器出口策略配置说明NQA123456789101112131415161718192021222324252627282930# 配置探测电信DNS的NQAnqa entry admin isp_telecom_test type icmp-echo destination ip 202.103.224.68 //探测远端DNS地址 frequency 2000 //每间隔2秒探测一次 history-record enable //开启NQA历史记录保存功能 history-record number 5 //保存的最大历史记录个数为5条 next-hop ip 101.1.1.2 //探测报文经过的下一跳 probe count 5 //每次探测检测5次 probe timeout 1000 //检测超时时间1秒 reaction 1 checked-element probe-fail threshold-type consecutive 5 action-type trigger-only //连续探测失败5次，触发其他模块联动 source ip 101.1.1.1 //探测报文源地址# 配置探测联通DNS的NQAnqa entry admin isp_unicom_test type icmp-echo destination ip 211.138.240.100 frequency 2000 history-record enable history-record number 5 next-hop ip 202.1.1.2 probe count 5 probe timeout 1000 reaction 1 checked-element probe-fail threshold-type consecutive 5 action-type trigger-only source ip 202.1.1.1# 当前时间起永久启用NQA监测 nqa schedule admin isp_telecom_test start-time now lifetime forever nqa schedule admin isp_unicom_test start-time now lifetime forever track 关联 NQA12345# track 100 nqa entry admin isp_telecom_test reaction 1#track 200 nqa entry admin isp_unicom_test reaction 1 策略路由配置，联动1234567891011121314151617#acl advanced 3002 rule 0 permit ip source 192.168.20.0 0.0.0.255# 指定下一跳时与track 200联动，当NQA监测失败结果时，策略路由失效，流量根据路由表转发流量policy-based-route to_isp_policy permit node 10 if-match acl 3002 apply next-hop 202.1.1.2 track 200## 默认路由与track 100联动，当NQA监测失败结果时，该条默认路由失效，优先级为80的默认路由加载路由表，流量根据路由表转发流量 ip route-static 0.0.0.0 0 101.1.1.2 track 100 ip route-static 0.0.0.0 0 202.1.1.2 preference 80# 内网流量入接口下调用策略路由interface GigabitEthernet0/0ip policy-based-route to_isp_policy 测试说明：外网网络正常情况，查看 nqa 监测结果，探测发出的数据包和收到的数据包数量一致 通过 debug 查看 NAT 转换信息，vlan10 去往互联网 DNS 地址的流量走101.1.1.2下一跳地址，vlan20 去往互联网 DNS 地址的流量走 202.1.1.2 下一跳地址 当电信网络不可用时当电信网络不可用时，路由器日志提示 prob-fail，此时 NQA 探测收到的 icmp-reply 数据包为 0 路由表中，默认路由的下一跳为 202.1.1.2 查看 NAT 会话表，有 vlan10，vlan20 的流量会话 通过 debug 查看 NAT 转换信息，所有流量走联通网络出口 当联通网络不可用时当联通网络不可用时，路由器日志提示 prob-fail，此时 NQA 探测收到的 icmp-reply 数据包为0 查看 NAT 会话表，有 vlan10，vlan20 的流量会话 通过 debug 查看 NAT 转换信息，所有流量走电信网络出口 路由器配置：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177# sysname Router#track 100 nqa entry admin isp_telecom_test reaction 1#track 200 nqa entry admin isp_unicom_test reaction 1# system-working-mode standard xbar load-single password-recovery enable lpu-type f-series#vlan 1#policy-based-route to_isp_policy permit node 10 if-match acl 3002 apply next-hop 202.1.1.2 track 200#nqa entry admin isp_telecom_test type icmp-echo destination ip 202.103.224.68 frequency 2000 history-record enable history-record number 5 next-hop ip 101.1.1.2 probe count 5 probe timeout 1000 reaction 1 checked-element probe-fail threshold-type consecutive 5 action-type trigger-only source ip 101.1.1.1#nqa entry admin isp_unicom_test type icmp-echo destination ip 211.138.240.100 frequency 2000 history-record enable history-record number 5 next-hop ip 202.1.1.2 probe count 5 probe timeout 1000 reaction 1 checked-element probe-fail threshold-type consecutive 5 action-type trigger-only source ip 202.1.1.1# nqa schedule admin isp_telecom_test start-time now lifetime forever nqa schedule admin isp_unicom_test start-time now lifetime forever#interface Serial1/0#interface Serial2/0#interface Serial3/0#interface Serial4/0#interface NULL0#interface GigabitEthernet0/0 port link-mode route combo enable copper ip address 1.1.1.1 255.255.255.252 ip policy-based-route to_isp_policy#interface GigabitEthernet0/1 port link-mode route combo enable copper ip address 101.1.1.1 255.255.255.252 nat outbound 3001#interface GigabitEthernet0/2 port link-mode route combo enable copper ip address 202.1.1.1 255.255.255.252 nat outbound 3001#interface GigabitEthernet5/0 port link-mode route combo enable copper#interface GigabitEthernet5/1 port link-mode route combo enable copper#interface GigabitEthernet6/0 port link-mode route combo enable copper#interface GigabitEthernet6/1 port link-mode route combo enable copper# scheduler logfile size 16#line class aux user-role network-operator#line class console user-role network-admin#line class tty user-role network-operator#line class vty user-role network-operator#line aux 0 user-role network-operator#line con 0 user-role network-admin#line vty 0 63 user-role network-operator# ip route-static 0.0.0.0 0 101.1.1.2 track 100 ip route-static 0.0.0.0 0 202.1.1.2 preference 80 ip route-static 192.168.10.0 24 1.1.1.2 ip route-static 192.168.20.0 24 1.1.1.2#acl advanced 3001 rule 0 permit ip#acl advanced 3002 rule 0 permit ip source 192.168.20.0 0.0.0.255#domain name system# domain default enable system#role name level-0 description Predefined level-0 role#role name level-1 description Predefined level-1 role#role name level-2 description Predefined level-2 role#role name level-3 description Predefined level-3 role#role name level-4 description Predefined level-4 role#role name level-5 description Predefined level-5 role#role name level-6 description Predefined level-6 role#role name level-7 description Predefined level-7 role#role name level-8 description Predefined level-8 role#role name level-9 description Predefined level-9 role#role name level-10 description Predefined level-10 role#role name level-11 description Predefined level-11 role#role name level-12 description Predefined level-12 role#role name level-13 description Predefined level-13 role#role name level-14 description Predefined level-14 role#user-group system#return&lt;Router&gt;","link":"/posts/4e82271c.html"},{"title":"H3C_SecureCRT巡检脚本","text":"脚本介绍和使用 这是一个巡检脚本，使用 CRT 软件登陆H3C设备，点击 “Script” –&gt; “Run” 选择脚本，运行脚本可得到需要收集的信息（当然你要打开 log 记录日志，相信你懂） 可以根据你的实际需要修改 “Send” 后面的内容 好久不更博客了，最近干了一些小项目，能写的我尽量写写…… 1234567891011121314151617181920212223242526#$language = \"VBScript\"#$interface = \"1.0\"crt.Screen.Synchronous = True' This automatically generated script may need to be' edited in order to work correctly.Sub Main crt.Screen.Send \"#start right now\"&amp; chr(13) crt.Screen.WaitForString \"&gt;\" crt.Screen.Send \"screen-length disable\" &amp; chr(13) crt.Screen.Send \"display cur \" &amp; chr(13) crt.Screen.Send \"display ip interface brief\" &amp; chr(13) crt.Screen.Send \"display interface brief des\" &amp; chr(13) crt.Screen.Send \"display vlan\" &amp; chr(13) crt.Screen.Send \"display vlan brief\" &amp; chr(13) crt.Screen.Send \"display ip routing-table\" &amp; chr(13) crt.Screen.Send \"display version\" &amp; chr(13) crt.Screen.Send \"display cpu-usage\" &amp; chr(13) crt.Screen.Send \"display memory\" &amp; chr(13) crt.Screen.Send \"display device manuinfo\" &amp; chr(13) crt.Screen.Send \"save force\" &amp; chr(13) crt.Screen.Send \"save force\" &amp; chr(13)End Sub","link":"/posts/21b002a6.html"},{"title":"H3C_V5_V7设备巡检信息提取","text":"上一篇博客写到如何运行脚本导出设备信息，这一篇介绍一下怎样在海量的设备信息中提取指定信息，本文中假设要提取的信息有设备名称、当前软件版本、设备运行时间、设备 CPU 使用率、设备内存使用率、设备序列号。后续可以根据这些信息使用 Python 脚本写入到巡检报告或者表格中。 如何操作 没有提取前已导出的设备信息（保护隐私，使用 HCL 模拟器产生的设备信息） Python 脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# Author：KIRASTER# Time：2021/3/21 23:26# Description：Device_infoimport osimport refilename = 'F:/111.txt'resultfilename = 'F:/result.txt'if os.path.exists(resultfilename): os.remove(resultfilename)result_txt = open('F:/result.txt', 'a')with open(filename, 'r', encoding='utf8') as file_to_read: while True: lines = file_to_read.readline() # 首行显示50个“=”号，提取设备版本信息，开头注释 if \"display version\" in lines: result_line01 = '=' * 50 + '\\n' result_line02 = 'Device Name:\\t' + ''.join(re.findall(r'[&lt;](.*?)[&gt;]', lines)) + '\\n' result_txt.write(result_line01) print(result_line01) print(result_line02) result_txt.write(result_line02) # 提取设备版本信息 if \"Comware Software\" in lines: result_line03 = 'Comware Software:\\t' +''.join(re.findall('(?&lt;=Software, ).*$', lines)) + '\\n' print(result_line03) result_txt.write(result_line03) # 提取设备运行时间 if \"uptime is\" in lines: result_line04 = 'Uptime:\\t' + ''.join(re.findall('(?&lt;=uptime is ).*$', lines)) + '\\n' print(result_line04) result_txt.write(result_line04) # 提取设备序列号 if \"DEVICE_SERIAL_NUMBER\" in lines: result_line05 = 'SN:\\t' + ''.join(re.findall('(?&lt;=:).*$', lines)) + '\\n' result_line05 = result_line05.replace(' ', '') print(result_line05) result_txt.write(result_line05) # 提取设备cpu使用率方式1 if \"Slot 1 CPU 0 CPU usage:\" in lines: result_line06 = next(file_to_read) result_line06 = result_line06[5:9] + '\\n' result_line06 = 'cpu-usage:\\t' + result_line06.replace(' ', '') print(result_line06) result_txt.write(result_line06) # 提取设备cpu使用率方式2 if \"Slot 1 CPU usage:\" in lines: result_line066 = next(file_to_read) result_line066 = result_line066[5:9] + '\\n' result_line066 = 'cpu-usage:\\t' + result_line066.replace(' ', '') print(result_line066) result_txt.write(result_line066) # 提取设备cpu使用率方式3 if \"Unit CPU usage:\" in lines: result_line0666 = next(file_to_read) result_line0666 = result_line0666[5:9] + '\\n' result_line0666 = 'cpu-usage:\\t' + result_line0666.replace(' ', '') print(result_line0666) result_txt.write(result_line0666) # 提取设备memory使用率方式1 if \"Used Rate\" in lines: result_line07 = lines[-4:] result_line07 = 'memory-usage:\\t' + result_line07.replace(' ', '') print(result_line07) result_txt.write(result_line07) # 提取设备memory使用率方式2 if \"Mem:\" in lines: result_line08 = lines[-6:] result_line08 = result_line08.replace(' ', '') result_line08 = result_line08.replace('%', '') result_line08 = 100 - float(result_line08) result_line08 = '%.1f%%' % result_line08 result_line08 = 'memory-usage:\\t' + result_line08 + '\\n' print(result_line08) result_txt.write(result_line08) result_txt.flush() if \"结束记录时间\" in lines: break 生成信息 其他 本文中的脚本在实际工作中使用过，设备包含华三 V5 和 V7 版本的交换机、防火墙和无线控制器等 根据实际需要可以修改脚本中的内容提取更多信息 生成的文件为 word 或 excel 等都是可以实现的","link":"/posts/80e04e00.html"},{"title":"大梦初醒 荒唐了一生","text":"“大梦初醒 荒唐了一生” –马頔 刚开始听到这首歌是一个混实习的关系户女孩，QQ 资料界面一直挂着这首歌 当时只是觉得很平的一首歌，跟《董小姐》《成都》一个路数 现在再听和看视频里原唱在舞台上一人一吉他的表演，才发现我自己大意了 带感情的演唱，好像作者在表达不为人知的情感 每个人听到一首歌，可能都会有自己的看法，或者没有看法只觉得：爽 这是主观上的看法，都要尊重与自己不同观点的人的看法，你可以不同意，没必要去勉强、要求 特意去翻了一下抖音上隐私设置里的黑名单：484 有时候看短视频，看到讨厌的就不辞麻烦的点点点拉黑了 有时候为了不误判还点进主页多看几个视频，确认无误后才动手 你要问我为什么拉黑，我回答不喜欢 你要问我什么原因，同上 不解释，我自己心里有一些抽象的名词 原则、底线、信仰、情感…… ……","link":"/posts/2703fb4a.html"},{"title":"HCL_VPN不同实例互通实验","text":"实验拓扑和需求 实验模拟的是一个总部和一个分支站点的网络，网络中总部和分支相同 VPN 实例网络互通，不同 VPN 实例网络相互隔离，总部 VPN2 中特殊主机 PC_8 需要访问位于分支网络中的 VPN1 网络 思路和解决方法 网络设备中配置 VPN instance 用来隔离不同网络数据 在不做特殊配置的情况下，不同 VPN 实例的网络是不能互相通信的 然而在设备上 VPN 实例引入其他 VPN 实例网络又会造成不同实例间网络能互通的情况，进而要做各种 ACL 限制 实验中并不涉及 MPLS VPN 的场景，有点类似 H3C 文档中 MCE 的情况，但是不涉及 CE、PE、RD、RT…… RD 是用来做路由区分的，RT 是 BGP 协议中团体属性的内容，本实验中都不涉及，本来也考虑使用 MPLS VPN 的方式做，但是就当前这个场景完全不需要，客户只需要把原有不同的几套网络隔离，还要考虑到设备特性，设备性能等等 实验中在路由经过的下一跳的设备上都要配置 VPN 实例，核心下联的二层设备不需要配置 由于不使用引入其他 VPN 实例的方式，需要在总部路由器和总部交换机上配置 VPN 静态路由 具体配置SITE_SW1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162# sysname SITE_SW#ip vpn-instance vpn1#ip vpn-instance vpn2# 配置rip 100 绑定VPN1，宣告与总部互联的网络和分支VPN1的网络rip 100 vpn-instance vpn1 undo summary version 2 network 10.1.1.1 0.0.0.0 network 172.16.10.254 0.0.0.0# 配置rip 200 绑定VPN2，宣告与总部互联的网络和分支VPN2的网络rip 200 vpn-instance vpn2 undo summary version 2 network 20.1.1.1 0.0.0.0 network 172.16.20.254 0.0.0.0# 不重要的dhcp dhcp enable#vlan 10#vlan 20# 不重要的dhcpdhcp server ip-pool vlan10 vpn-instance vpn1 gateway-list 172.16.10.254 network 172.16.10.0 mask 255.255.255.0# 不重要的dhcpdhcp server ip-pool vlan20 vpn-instance vpn2 gateway-list 172.16.20.254 network 172.16.20.0 mask 255.255.255.0# Vlan-interface10为VPN1网络网关interface Vlan-interface10 ip binding vpn-instance vpn1 ip address 172.16.10.254 255.255.255.0# Vlan-interface20为VPN1网络网关interface Vlan-interface20 ip binding vpn-instance vpn2 ip address 172.16.20.254 255.255.255.0# 与总部互联物理接口interface GigabitEthernet1/0/3 port link-mode route# 使用子接口与总部互联，绑定VPN1interface GigabitEthernet1/0/3.10 ip binding vpn-instance vpn1 ip address 10.1.1.1 255.255.255.252# 使用子接口与总部互联，绑定VPN2interface GigabitEthernet1/0/3.20 ip binding vpn-instance vpn2 ip address 20.1.1.1 255.255.255.252# 不重要interface GigabitEthernet1/0/1 port access vlan 10 stp edged-port# 不重要interface GigabitEthernet1/0/2 port access vlan 20 stp edged-port# HQ_ROUTER123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# sysname HQ_ROUTER#ip vpn-instance vpn1#ip vpn-instance vpn2# 配置rip 100 绑定VPN1，宣告与分支互联的网络，与HQ_SW互联的网络，引入手动配置的去往PC_8主机的路由rip 100 vpn-instance vpn1 undo summary version 2 network 10.1.1.2 0.0.0.0 network 100.1.1.1 0.0.0.0 import-route static# 配置rip 200 绑定VPN2，宣告与分支互联的网络，与HQ_SW互联的网络rip 200 vpn-instance vpn2 undo summary version 2 network 20.1.1.2 0.0.0.0 network 100.1.1.1 0.0.0.0#vlan 111#vlan 222# 与HQ_SW VPN1 互联vlanif接口interface Vlan-interface111 ip binding vpn-instance vpn1 ip address 100.1.1.1 255.255.255.252# 与HQ_SW VPN2 互联vlanif接口interface Vlan-interface222 ip binding vpn-instance vpn2 ip address 100.1.1.1 255.255.255.252# 与分支互联物理接口interface GigabitEthernet0/0 port link-mode route combo enable copper# 使用子接口与分支互联，绑定VPN1interface GigabitEthernet0/0.10 ip binding vpn-instance vpn1 ip address 10.1.1.2 255.255.255.252 vlan-type dot1q vid 10# 使用子接口与分支互联，绑定VPN2interface GigabitEthernet0/0.20 ip binding vpn-instance vpn2 ip address 20.1.1.2 255.255.255.252 vlan-type dot1q vid 20# 与HQ_SW互联的物理接口interface GigabitEthernet0/1 port link-mode bridge port link-type trunk port trunk permit vlan all combo enable copper# 在vpn1网络中配置的去往PC_8主机的路由 ip route-static vpn-instance vpn1 192.168.40.200 32 vpn-instance vpn2 100.1.1.2# HQ_SW1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374# sysname HQ_SW#ip vpn-instance vpn1#ip vpn-instance vpn2# 配置rip 100 绑定VPN1，宣告与HQ_ROUTER互联的网络和总部VPN1的网络，注意有一条路由过滤，因为在HQ_ROUTER中引入了手动配置的静态的路由，而在HQ_SW VPN1网络中不需要rip 100 vpn-instance vpn1 undo summary version 2 network 100.1.1.2 0.0.0.0 network 192.168.30.254 0.0.0.0 filter-policy prefix-list filter_192.168.40.200 import# 配置rip 200 绑定VPN2，宣告与HQ_ROUTER互联的网络和总部VPN2的网络rip 200 vpn-instance vpn2 undo summary version 2 network 100.1.1.2 0.0.0.0 network 192.168.40.254 0.0.0.0# 不重要的dhcp dhcp enable#vlan 30#vlan 40#vlan 111#vlan 222 # 不重要的dhcpdhcp server ip-pool vlan30 vpn-instance vpn1 gateway-list 192.168.30.254 network 192.168.30.0 mask 255.255.255.0# 不重要的dhcpdhcp server ip-pool vlan40 vpn-instance vpn2 gateway-list 192.168.40.254 network 192.168.40.0 mask 255.255.255.0 forbidden-ip 192.168.40.200# vlan30为VPN1网络网关interface Vlan-interface30 ip binding vpn-instance vpn1 ip address 192.168.30.254 255.255.255.0# vlan40为VPN1网络网关interface Vlan-interface40 ip binding vpn-instance vpn2 ip address 192.168.40.254 255.255.255.0 packet-filter 3001 inbound# 与HQ_ROUTER VPN1 互联vlanif接口interface Vlan-interface111 ip binding vpn-instance vpn1 ip address 100.1.1.2 255.255.255.252# 与HQ_ROUTER VPN2 互联vlanif接口interface Vlan-interface222 ip binding vpn-instance vpn2 ip address 100.1.1.2 255.255.255.252# 与HQ_ROUTER互联的物理接口interface GigabitEthernet1/0/1 port link-mode bridge port link-type trunk port trunk permit vlan all combo enable fiber# 配置前缀列表，过滤从HQ_ROUTER学习到的特殊主机路由 ip prefix-list filter_192.168.40.200 index 10 deny 192.168.40.2 32 ip prefix-list filter_192.168.40.200 index 20 permit 0.0.0.0 0 less-equal 32# 配置总部VPN2网络到分支VPN1网络的路由 ip route-static vpn-instance vpn2 172.16.10.0 24 vpn-instance vpn1 100.1.1.1# 限制除PC_8外去往分支VPN1网络的流量acl advanced 3001 rule 0 permit ip source 192.168.40.200 0 destination 172.16.10.0 0.0.0.255 rule 5 deny ip source 192.168.40.0 0.0.0.255 destination 172.16.10.0 0.0.0.255 rule 10 permit ip#","link":"/posts/eb7e5d69.html"},{"title":"H3C_S5500-52C-EI升级步骤","text":"准备工作 下载升级所需要的两个文件： S5500EI-BTM-721.btm（新版本 Bootrom 程序） 1234567名称: S5500EI-BTM-721.btm大小: 483732 字节 (472 KiB)CRC32: 4B9436E9CRC64: 928CB6227DE9AF69SHA256: C0EDB2FA02C5F8804E8D983F4DD197F1D321C21C317ED5BB10BF002CB4973CE8SHA1: F8B345BC2012C8183CE01F092E4181FC15495867BLAKE2sp: 6A5E362D8A4DA8FA74B6A9F4568627FA07C53126DB67F5FF287C9BE893C33502 S5500EI-CMW520-R2222P12.bin（新版本主机软件） 1234567名称: S5500EI-CMW520-R2222P12.bin大小: 14386411 字节 (13 MiB)CRC32: D2E2387ECRC64: 5806015C822E9D46SHA256: 33F9948CF29DEEE01C2449DEC499E35AC1721331F6E73644526F9D2BF9B6C2E0SHA1: 8D50B9BAD0E80F6DCE14E3C941D3E74CA8D72B96BLAKE2sp: 7510F4902CE03E9ABF44E480C4DF642782818AAF9F400E8E8716AFC7F18C6BE2 登陆查看版本信息和 Flash 空间查看当前主机软件版本和 Bootrom 版本1234567891011121314&lt;XX-XX-S5500-1&gt;display versionH3C Comware Platform SoftwareComware Software, Version 5.20, Release 2202Copyright (c) 2004-2010 Hangzhou H3C Tech. Co., Ltd. All rights reserved.H3C S5500-52C-EI uptime is 5 weeks, 3 days, 20 hours, 9 minutesH3C S5500-52C-EI with 1 Processor256M bytes SDRAM32768K bytes Flash MemoryHardware Version is REV.CCPLD Version is 002Bootrom Version is 609[SubSlot 0] 48GE+4SFP Hardware Version is REV.C 查看 Flash 剩余空间1234567&lt;XX-XX-S5500-1&gt;dirDirectory of flash:/ 0 -rw- 10436470 Aug 11 2010 15:04:09 s5500ei-cmw520-r2202.bin 1 -rw- 17880 Sep 07 2021 15:25:30 startup.cfg31496 KB total (21277 KB free) 确保Flash有14.1M以上剩余空间（新版本软件共14.1M） 通过 FTP 实现远程加载文件 如 图 所示，FTP Server 与配置计算机是同一台计算机。远程登录到交换机上，执行FTP命令，从 FTP Server 上（假定IP地址为 2.2.2.1）下载主机程序 S5500EI-CMW520-R2222P12.bin 和 BOOTROM 程序 S5500EI-BTM-721.btm。 备份 Flash 文件 加载文件前使用 FTP 命令备份文件 12345678910111213&lt;XX-XX-S5500-1&gt;ftp 2.2.2.1Trying 2.2.2.1 ...Press CTRL+K to abortConnected to 2.2.2.1.220 3Com 3CDaemon FTP 2.0 ready for new userUser(2.2.2.1:(none)):123331 Give me your password, pleasePassword:230 Logged in successfully[ftp][ftp] put s5500ei-cmw520-r2202.bin[ftp] put startup.cfg[ftp] put ...... 第一步：通过 FTP 的相关命令将软件下载到本地交换机上。1234567891011121314151617[ftp] get S5500EI-BTM-721.btm227 ÕýÔÚ½øÈë±»¶¯Ä£Ê½ (2,2,2,1,195,132) 125 ÕýÔÚÊ¹ÓÃÏÖ´æµÄÊý¾ÝÁ¬½Ó ......226 ÕýÔÚ¹Ø±ÕÊý¾ÝÁ¬½Ó; ÎÄ¼þ´«Êä³É¹¦Íê³É. FTP: 483732 byte(s) received in 7.111 second(s), 68.00K byte(s)/sec. [ftp][ftp] get S5500EI-CMW520-R2222P12.bin227 ÕýÔÚ½øÈë±»¶¯Ä£Ê½ (2,2,2,1,195,133) 125 ÕýÔÚÊ¹ÓÃÏÖ´æµÄÊý¾ÝÁ¬½Ó...............................................226 ÕýÔÚ¹Ø±ÕÊý¾ÝÁ¬½Ó; ÎÄ¼þ´«Êä³É¹¦Íê³É. FTP: 14386411 byte(s) received in 197.289 second(s), 72.00K byte(s)/sec. [[ftp] bye 第二步：在交换机上升级 BOOTROM。12345&lt;XX-XX-S5500-1&gt;bootrom update file flash:/s5500ei-btm-721.btm slot 1 This command will update bootrom file on the specified board(s), Continue? [Y/N]:y Now updating bootrom, please wait... Succeeded to update bootrom of Board 1. 第三步：在交换机上升级主机软件。12345678&lt;XX-XX-S5500-1&gt;boot-loader file flash:/s5500ei-cmw520-r2222p12.bin slot 1 main This command will set the boot file of the specified board. Continue? [Y/N]:y The specified file will be used as the main boot file at the next reboot on slot 1!&lt;XX-XX-S5500-1&gt;dis boot-loader Slot 1The current boot app is: flash:/s5500ei-cmw520-r2202.binThe main boot app is: flash:/s5500ei-cmw520-r2222p12.binThe backup boot app is: flash:/ 第四步：重新启动交换机。 重起前请确认其他配置是否保存，防止重启后造成配置信息丢失。 重启设备后即可完成 BOOTROM 和主机软件的加载。 123456789101112131415161718192021222324252627282930313233&lt;XX-XX-S5500-1&gt;reboot Start to check configuration with next startup configuration file, please wait.........DONE! This command will reboot the device. Continue? [Y/N]:y#Sep 14 15:51:46:49 2021 XX-XX-S5500-1 DEV/1/REBOOT: Reboot device by command. %Sep 14 15:51:46:163 2021 XX-XX-S5500-1 DEV/4/SYSTEM REBOOT: System is rebooting now.Starting...... *********************************************************** * * * H3C S5500-52C-EI BOOTROM, Version 721 * * * *********************************************************** Copyright (c) 2004-2013 Hangzhou H3C Tech. Co., Ltd. Creation date : Nov 12 2013, 01:59:13 CPU Clock Speed : 533MHz BUS Clock Speed : 133MHz Memory Size : 256MB Mac Address : 3822d60cd0f8Press Ctrl-B to enter Boot Menu... 0Auto-booting...Decompress Imageser interface aux0 is available.Press ENTER to get started. 查看升级后的版本信息查看主机软件版本和 Bootrom 程序版本 1234567891011121314&lt;XX-XX-S5500-1&gt;dis version H3C Comware Platform SoftwareComware Software, Version 5.20, Release 2222P12Copyright (c) 2004-2018 New H3C Technologies Co., Ltd. All rights reserved.H3C S5500-52C-EI uptime is 0 week, 0 day, 0 hour, 2 minutesH3C S5500-52C-EI with 1 Processor256M bytes SDRAM32768K bytes Flash MemoryHardware Version is REV.CCPLD Version is 002Bootrom Version is 721[SubSlot 0] 48GE+4SFP Hardware Version is REV.C 删除旧主机软件123456789101112131415161718192021222324252627&lt;XX-XX-S5500-1&gt;dir Directory of flash:/ 0 -rw- 10436470 Aug 11 2010 15:04:09 s5500ei-cmw520-r2202.bin 1 -rw- 17952 Sep 14 2021 15:36:21 startup.cfg 2 -rw- 483732 Sep 14 2021 15:31:57 s5500ei-btm-721.btm 3 -rw- 14386411 Sep 14 2021 15:35:42 s5500ei-cmw520-r2222p12.bin 4 drw- - Apr 26 2000 12:00:40 seclog31496 KB total (6751 KB free)&lt;XX-XX-S5500-1&gt;delete /unreserved s5500ei-cmw520-r2202.bin The contents cannot be restored!!! Delete flash:/s5500ei-cmw520-r2202.bin?[Y/N]:yDeleting a file permanently will take a long time. Please wait...........................................................................................%Delete file flash:/s5500ei-cmw520-r2202.bin...Done.&lt;XX-XX-S5500-1&gt;&lt;XX-XX-S5500-1&gt;&lt;XX-XX-S5500-1&gt;dirDirectory of flash:/ 0 -rw- 17952 Sep 14 2021 15:36:21 startup.cfg 1 -rw- 483732 Sep 14 2021 15:31:57 s5500ei-btm-721.btm 2 -rw- 14386411 Sep 14 2021 15:35:42 s5500ei-cmw520-r2222p12.bin 3 drw- - Apr 26 2000 12:00:40 seclog31496 KB total (16943 KB free) 注意事项 加载主机软件必须通过 reboot 命令重起交换机后才能使加载成功。 如果 Flash 空间不够，可以先删除 Flash 中的无用文件，再进行软件的下载。 在加载过程中不可断电。","link":"/posts/e765d177.html"},{"title":"关于新主题博客","text":"我为什么要启用一个新 hexo 主题呢，没有什么特别的原因，单纯的想玩玩。而为什么要迁移到 GitHub 呢，这就故事很多了，下文详说。换主题换站点搞了好几天，对于不是专业搞代码的我确实折腾，不过乐在其中。看着浏览器历史里拉不到底的搜索记录和自己提的 To-Do List，我真是自己玩自己。 感谢先感谢上一个主题的作者（三·钻 TriDiamond ）让我搭了博客，再感谢现在这个主题（Le Phower’s）的作者。 关于 GiteePages大概是四五月份，GiteePages上突然出了个公告说维护，一停就到八九月份。九月份我再去点开启服务，好家伙直接提示页面违规？我按提示去检查页面是 category 页面违规，what？ 一个文章分类页提示违规？自问没有什么敏感词在里头，页面加起来就几十个汉字，代码违规我就不懂了。我直接去生成的静态 html 页面把代码清空再发布就可以了，wtf？气不过的我直接关了服务晾了几个星期，后来有点空闲时间我开始折腾起来，就是弄现在的这个博客主题。直到我把内容制作好，再次启用 Pages 服务并截几张图做留念，就把博客仓库的文件清空了，当我把现在的代码上传到 Gitee 后点击启动服务，弹出实名认证，姓名，身份证正反面，手持身份证正反面，而没清空前可以发布成功，真是双标，你要是一视同仁我敬重你。我去查了邮箱没有收到任何通知，包括 Pages 服务停用的事情，这种办事方式我个人是不认同的，不尊重用户。随即我个人做出了抵制的举动，我清空了所有仓库（虽然也没什么太多内容），签名留下一句话，就去找注销账户的页面，再次震惊了我，流程（见图片），按照格式写封邮件–加 QQ 群联系管理员–再人工审核三五天，真 QQ 办公……想想算了，我嫌麻烦，还要耗费时间打交道。 Obsidian 主题页面留念","link":"/posts/f2af2fdc.html"},{"title":"我的一些blog常用小操作","text":"自己日常操作的一些小命令和插件。 bat启动 hexo 本地服务前提条件：已完成博客搭建。 12@echo offstart D:\\Program\" \"Files\\Git\\git-bash.exe --cd=D:/blog/blog -c \"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s\" 新建后缀为bat的脚本文件 复制以上命令粘贴（注意修改路径 ），保存 双击此脚本运行的结果相当于在你的 blog 路径下右键 “Git Bash Here” 并输入 “hexo clean &amp;&amp; hexo g &amp;&amp; hexo s” 运行. bat 推送至 github前提条件：已完成博客搭建和推送github的设置。 12@echo offstart D:\\Program\" \"Files\\Git\\git-bash.exe --cd=D:/blog3/blog -c \"hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; hexo s\" 新建后缀为bat的脚本文件 复制以上命令粘贴（注意修改路径 ），保存 双击此脚本运行的结果相当于在你的blog路径下右键 “Git Bash Here” 并输入 “hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; hexo s” 运行（如果只输入 “hexo clean &amp;&amp; hexo g &amp;&amp; hexo d “ ，当命令执行完后会自动关闭命令窗口，无法得知推送是否成功，所以后边加”hexo s“，运行完成后确认推送成功，Ctrl+C结束即可） 文章页图片放大（灯箱效果）相关链接：https://github.com/fancyapps/fancybox 添加 js/css 到网站代码中，每个博客的存放代码的文件和位置可能不一样，有的是在 styl 文件中，有的可能在 EJS/PUG/SWIG 文件中，我使用的模版是在主题目录下的 _config.yml 文件中 12345css: - https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.cssjs: - https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js - https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js 在 .md 文件里插入图片，添加代码 12345678&lt;a data-fancybox=\"gallery\" href=\"big_1.jpg\"&gt; &lt;img src=\"small_1.jpg\"&gt;&lt;/a&gt;# 其中 big_1.jpg 和 small_1.jpg 可以是一致的，可以设置 width 参数来设置网页图片显示为小图。例如: &lt;a data-fancybox=\"gallery\" href=\"https://i.loli.net/xxxxx.jpg\"&gt; &lt;img src=\"https://i.loli.net/xxxxx.jpg\" width=\"61.8%\" /&gt; &lt;/a&gt; 404 页面相关链接：https://www.qq.com/404/ 虽然 blog 网站简单，访问出现 404 页面机会极少（除非在网址栏乱输入），但是还是操作一下。 具体设置点上面网址。 添加文章链接 abbrlink 安装插件 12npm install hexo-abbrlink --savenpm install eslint@4.x babel-eslint@8 --save-dev 修改网站根目录配置文件 _config_yml 1234permalink: posts/:abbrlink.html abbrlink: alg: crc32 rep: hex alg 和 rep 不同组合生成的链接 12345678910crc16 &amp; hexhttps://xx.github.io/posts/1234.htmlcrc16 &amp; dechttps://xx.github.io/posts/12345.htmlcrc32 &amp; hexhttps://xx.github.io/posts/12345678.htmlcrc32 &amp; dechttps://xx.github.io/posts/123456789a.html hexo g 生成后，md 文件的 Front-matter 增加 abbrlink 属性，值为生成的 ID 链接，发布文章后文章链接不随改变文章内容而改变。","link":"/posts/c1906682.html"},{"title":"H3C_线路测试脚本","text":"之前做了一个割接网络的项目，在过程中要测试网点和中心的几百条专线线路，心想要逐个 ping 测试个对端IP地址，在时间上，操作上根本不可行，整个割接时间有限定，又是在凌晨时间……限制比较多，刚好那段时间在玩 Python，就想着能不能做个脚本自己跑，最后实现了，而且生成 Excel 表格统计测试成功和测试失败的信息。 操作记录会话日志（log session） 设置会话属性参数（可单独设置串口会话、telnet 会话和 ssh 会话，右键会话属性修改即可） 设置 log file 参数（设置保存路径，选项，日志的开头和结束位置插入信息（脚本用于判断结束的位置）） 制作端口和 IP 信息的 txt 文件说明：第一列为网络中心路由器接口，第二列为对端网点设备的 IP 地址（接口和IP我已经处理过了，假的，真的不会贴出来） 编写 ping 测试 Python 脚本 脚本内容 1234567891011121314151617181920212223# $language = \"python\"# $interface = \"1.0\"import osimport SecureCRTdef main(): crt.Screen.Synchronous = True with open('F:/SR66_Test/SR66.txt', 'r') as rfile: ping_list = rfile.readlines() # 遍历SR66文件里的每一行，把第1列赋值给 port_info，第二列赋值给 ping_ip for ping_info in ping_list: port_info = ping_info.split()[0] ping_ip = ping_info.split()[1] crt.Screen.Send('\\r') # 在路由器命令行界面输入#+port_info并回车，例如：#GE4/1/0.111 crt.Screen.Send('#' + port_info + '\\r') # 在路由器命令行界面输入ping -c + ping_ip并回车，例如：ping -c 3 100.10.142.30 crt.Screen.Send('ping -c 3 ' + ping_ip + '\\r')main() SceureCRT 登陆路由器，点击 “Script” –&gt; “Run” 选择脚本，运行脚本。运行时间取决于线路的正常连通和测试的数量 编写结果统计 Python 脚本 处理 ping 测试后的 log session 日志记录 提取 ping 测试的结果信息（会同时生成一个 result.txt 的文件） 对 result.txt 文件的信息进行处理生成 Excel 表格 脚本内容： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596# Author：KIRASTER# Time：2021/x/x x:x# Description：import osimport reimport xlsxwriter as xwfrom xlsxwriter import Workbookfilename = 'F:/SR66_Test/xxx.log'resultfilename = 'F:/SR66_Test/result.txt'if os.path.exists(resultfilename): os.remove(resultfilename)result_txt = open('F:/SR66_Test/result.txt', 'a')with open(filename, 'r', encoding='utf8') as file_to_read: while True: lines = file_to_read.readline() if \"GE\" in lines: # # 提取GE开头的行，也就是端口和IP信息的txt文件里的第一列，并且换行符替换制表符 result_line1 = re.sub(r'^.*?#_', '', lines) result_line1 = result_line1.replace(\"\\n\", \"\\t\") print(result_line1) result_txt.write(result_line1) if \"--- Ping statistics\" in lines: # 提取包含“--- Ping statistics”这一行，替换成“ping + IP”，并且换行符替换制表符 result_line2 = re.sub(r'^.*?for', 'ping', lines) result_line2 = result_line2.replace(\"-\", \"\") result_line2 = result_line2.replace(\"\\n\", \"\\t\") print(result_line2) result_txt.write(result_line2) lines = next(file_to_read) # 提取下一行，替换成“result: 0.0% packet loss” result_line3 = re.sub(r'^.*?received,', 'result:', lines) print(result_line3) result_txt.write(result_line3) result_txt.flush() if \"结束记录时间\" in lines: # 遍历到“结束记录时间”这行，中断循环 breakworkbook: Workbook = xw.Workbook('F:/SR66_Test/result.xlsx')sheet0 = workbook.add_worksheet('测试结果')centered = workbook.add_format({'align': 'center'})red_style = workbook.add_format({ \"fg_color\": \"red\",'align': 'center','bold': True})green_style = workbook.add_format({ \"fg_color\": \"green\",'align': 'center','bold': True})blue_style = workbook.add_format({ \"fg_color\": \"#8DB4E2\",'align': 'center'})sheet0.write(0, 0, '检测端口', blue_style)sheet0.write(0, 1, '对端IP地址', blue_style)sheet0.write(0, 2, '返回结果', blue_style)sheet0.write(0, 3, '检测结果', blue_style)sheet0.write(0, 4, '线路正常', green_style)# sheet0.write(0, 5, '', green_style)sheet0.write(0, 6, '检测失败', red_style)# sheet0.write(0, 7, '', red_style)sheet0.set_column(0, 0, width=20)sheet0.set_column(1, 1, width=24)sheet0.set_column(2, 2, width=28)sheet0.set_column(3, 3, width=12.38)sheet0.set_column(4, 4, width=12.38)sheet0.set_column(5, 5, width=5)sheet0.set_column(6, 6, width=12.38)sheet0.set_column(7, 7, width=5)sheet0.freeze_panes(1, 8, top_row=1)# sheet0.filter_column_list(\"D\", ['正常', '检测失败'])sheet0.filter_column_list(3, 'x = \"正常\"')sheet0.write_formula('D2', '{=IF(ISNUMBER(FIND(\"100.0%\",C2)),\"检测失败\",IF(ISNUMBER(FIND(\"0.0%\",C2)),\"正常\"))}')sheet0.write_formula('F1', '{=SUMPRODUCT((D2:D999=\"正常\")*1)}')sheet0.write_formula('H1', '{=SUMPRODUCT((D2:D999=\"检测失败\")*1)}')with open('D:/SR6608_Test/result.txt') as file_object: lines = file_object.readlines() file_object.close()i = 1x = 1for xls_line in lines: if \"GE\" in xls_line: xls_line = xls_line.strip('\\n') xls_line = xls_line.split('\\t') print(xls_line) port_info = xls_line[0] ip_addr = xls_line[1] return_info = xls_line[2] sheet0.write(i, 0, port_info, ) sheet0.write(i, 1, ip_addr, ) sheet0.write(i, 2, return_info, ) # sheet0.write_formula(x, 3, '=IF(ISNUMBER(FIND(\"100.0%\",C2)),\"正常\",IF(ISNUMBER(FIND(\"0.0%\",C2)),\"检测失败\"))') i += 1 x += 1workbook.close() ping 测试的 log session 文件 生成的 result.txt 文件 生成的 Exce 表格","link":"/posts/60e83b3d.html"},{"title":"TI10","text":"Ti10 结束了，LGD 再次倒在了总决赛 相信包括我在内的许多人都坚信今年的总冠军是 LGD，但是…… 回忆起之前，一到周末约上两条友肝这游戏到天亮的时光，就很快乐 我已经基本不玩这游戏，因为这游戏太耗费时间了，成了云玩家 赛事结束后看到微博上各种“哀嚎”，“愤怒”，“”谩骂“，“惋惜”，“揣测”…… 尽管各种情绪，但理智的思考后只有一句话：技不如人，甘拜下风 你也别说什么五年了，该 CN DOTA 举一次盾了 巧了，独联体区的玩家也是这么这么认为的 最终该区的战队在第一次夺冠后隔了十年才再次夺冠 …… 只希望有勇敢的追梦人继续追逐他们的梦想","link":"/posts/fae4c6b8.html"},{"title":"H3C_连接L2TP的客户端设置(图片)","text":"iNode 客户端设置 windows 端配置—网络中心添加","link":"/posts/ab889e59.html"},{"title":"archive_test","text":"Test Page This is a test page .","link":"/posts/515317e3.html"},{"title":"No.001 Simple Case","text":"上文提到要 po 一篇文，现在发表一下自己的思路和配置。原文:【有点儿意思系列 06】一个看起来简单的案例，再上图。 Request and Solution PC1、PC2 分属 VLAN10 和 VLAN20；DHCP 服务器属 VLAN30 ，PC1 和 PC2 从 DHCP 服务器自动获取地址。 S：根据上下文需求，确定 R3 和 R4 是热备组网。R3 和 R4 上配置子接口，配置 VRRP ；业务地址段和 DHCPServer 不在同一网段，所以需要在业务网段的网关上配置 DHCP 中继。实验中使用一台路由器模拟 DHCPServer，上面配置分配给 VLAN10,VLAN20 的地址池。 12345678910111213! --- DHCPServer 配置!ip dhcp excluded-address 10.1.10.252 10.1.10.254ip dhcp excluded-address 10.1.20.252 10.1.20.254!ip dhcp pool vlan10 network 10.1.10.0 255.255.255.0 default-router 10.1.10.254 !ip dhcp pool vlan20 network 10.1.20.0 255.255.255.0 default-router 10.1.20.254 ! 123456789101112131415161718192021222324252627282930! --- R3 配置!interface Ethernet0/1.10 encapsulation dot1Q 10 ip address 10.1.10.252 255.255.255.0 ip helper-address 10.1.30.1 vrrp 10 ip 10.1.10.254 vrrp 10 priority 120 vrrp 10 track 1 decrement 21! interface Ethernet0/1.20 encapsulation dot1Q 20 ip address 10.1.20.252 255.255.255.0 ip helper-address 10.1.30.1 vrrp 20 ip 10.1.20.254! interface Ethernet0/1.30 encapsulation dot1Q 30 ip address 10.1.30.252 255.255.255.0 vrrp 30 ip 10.1.30.254 vrrp 30 priority 120 vrrp 30 track 1 decrement 21! --- 网管地址网关interface Ethernet0/1.99 encapsulation dot1Q 99 ip address 20.1.1.252 255.255.255.0 vrrp 99 ip 20.1.1.254 vrrp 99 priority 120 vrrp 99 track 1 decrement 21! SW4 是内网用户接入交换机（仅具二层功能），要求内网两个网段的用户均能 telnet 到该设备。 S：配置 VLAN ，划分接口，配置 Trunk，配置默认网关和远程网管 123456789101112131415161718192021222324252627! --- SW4 配置!interface Ethernet0/0 switchport trunk allowed vlan 10,20,30,99 switchport trunk encapsulation dot1q switchport mode trunk!interface Ethernet0/1 switchport trunk allowed vlan 10,20,30,99 switchport trunk encapsulation dot1q switchport mode trunk!interface Ethernet1/1 switchport access vlan 10!interface Ethernet1/2 switchport access vlan 20!interface Ethernet1/3 switchport access vlan 30! --- 网管IP地址interface Vlan99 ip address 20.1.1.10 255.255.255.0! -- 本想使用 ip default-gateway，但是不起作用，下面这条效果是一样ip route 0.0.0.0 0.0.0.0 20.1.1.254! --- 网管配置 略…… 由于 VPCS 不支持 Telnet ，此处使用 DHCPServer 做测试。 R3 和 R4 作为内网用户的网关设备，互为热备份。 S：这一条前面提过了，整个拓扑完整配置后边发，我打个包。 R3、R4、SW2 及 SW3 上不允许出现任何手工配置的静态路由条目。 S：好的，满足你。 SW1 采用重发布的方式，将直连的服务器网段路由（如10.1.100.0/24）注入 EIGRP。 S：好的，满足你。 内网用户（PC1、PC2）访问核心服务器 Server（10.1.100.1）的数据流走向如下： PC1 访问 Server：R3 &gt; R1 &gt; SW2 &gt; SW1 &gt; Server； PC2 访问 Server：R4 &gt; R2 &gt; SW3 &gt; SW1 &gt; Server； 沿途任何设备上到达 Server 的路由不允许出现负载均衡，且 PC 访问 Server 的流量往返路径一致。 S：在配置完路由协议后，查看沿途设备路由表发现到达 Server 的路由出现负载均衡是正常现象，旁观大局，逐个处理就行。 但是有一个现象我不知是模拟器的 Bug 还是镜像的问题，查看 SW3 和 SW4 ，总有一台设备到达 Server 的路由是这样的： 1D EX 10.1.100.0/24 [170/307200] 另一台学习到去往 Server 网段的路由是从上面这台学习到的外部路由，重启两台交换机的 OSPF 进程，这条路由又可能显示在第二台了。我又用 GNS3 做了测试，也是这种情况，按理说加载到路由表的不应该是管理距离为 110 的 OSPF 外部路由么？ 我思考了一番，可能是 OSPF 进程启动先后顺序的问题，先启动的交换机 OSPF 进程加载了 EIGRP 外部路由，而后启动的交换机 OSPF 进程学习到 EIGRP 外部路由和 OSPF 外部路由，按照规则选择了管理距离值较小的 OSPF 路由条目。 PC1 访问 Server：R3 &gt; R1 &gt; SW2 &gt; SW1 &gt; Server； 12345! --- R1 配置，修改 OSPF 入向接口的 cost ，使从 e0/0 收到去往10.1.100.0网段的路由更优!interface Ethernet0/1 ip ospf cost 11! 12345678! --- SW2 配置, 在 OSPF 进程下过滤入方向收到的去往 10.1.100.0 网段的条目，为什么这么做呢，从后面需求看，断掉 SW2/SW3 与 SW1 的线路之一，去往 Server的流量就不需要经过断掉线路这台交换机，而且断掉线路还要流量经过这台设备，走了个直角线路，并不是最优路径!router ospf 200 distribute-list 10 in!access-list 10 deny 10.1.100.0 0.0.0.255access-list 10 permit any! PC2 访问 Server ：R4 &gt; R2 &gt; SW3 &gt; SW1 &gt; Server； 思路和 PC1 访问 Server 一样，逆推一下即可，不占用篇幅了（懒得码字） PC1 访问 Server 回程路径： Server&gt; SW1 &gt; SW2 &gt; R1 &gt;R3 ； 123456789! --- SW1 配置，观察到去往内网网段的路由条目是负载均衡，配置偏移列表和指定入向接口，增加希望不要出现在路由表里的条目 metric 偏移，影响路由表加载!router eigrp 100 offset-list 20 in 1024 Ethernet0/2 offset-list 10 in 1024 Ethernet0/1 !access-list 10 permit 10.1.20.0 0.0.0.255access-list 20 permit 10.1.10.0 0.0.0.255 ! 12345! --- SW2 配置，修改 e0/3 接口 cost，使得从该接口学习到去往 10.1.10.0 和 10.1.20.0 网段的路由不是最优路由!interface Ethernet0/3 ip ospf cost 11! PC2 访问 Server 回程路径： Server&gt; SW1 &gt; SW3 &gt; R2 &gt;R3 ； 思路和 PC1 访问 Server 回程路径一样，逆推一下即可，不占用篇幅了（懒得码字） 要求 SW2 和 SW3 访问 Server 都走最优路径，即 SW2 前往 Server 的数据流走 SW1，SW3 前往 Server 的数据流也直接到 SW1。 S：这一条也佐证了我在上面说到的流量走直角路径不是最优的想法。说的通俗一点就是：SW1 上的有流量要去往 Server 只能从 e0/1 出去，不走直角。即使 SW1 上的出口线路故障了也不走，走的路径是：拓扑上的对角线。退一步来说当 SW2/SW3 的出口线路故障了，下联的 R1/R2 不会从 SW2/SW3 学习到去往 Server 的路由条目。SW2 也是这个道理。 SW1 上关于 10.1.10.0/24 和 10.1.20.0/24 的路由不应该出现等价负载均衡，正常情况下访问 10.0/24 网段的数据流走 SW2，访问2 0.0/24 网段的数据流走 SW3。 S：在 PC1/PC2 访问 Server 的回程路径时候已经解决这一条，不占用篇幅了（懒得码字）。 当 SW1-SW2 之间的链路 DOWN 掉时，PC1 访问 Server 的数据流切换至路径： R3&gt;R1&gt;SW3&gt;SW1&gt;Server，且往返路径一致。而当 SW1-SW3 之间的链路 DOWN 掉时，PC2 应该仍然能够访问 Server，情况类似。 S：正如我前面所说的：当 SW2/SW3 的出口线路故障了，下联的 R1/R2 也不会从 SW2/SW3 学习到去往 Server 的路由条目。此时去往 Server 的流量已经在 R1/R2 通过走对角线的路径来到 SW3/SW2 上。 重点解决回程的路径。因为前面已经修改了 SW2 和 SW3 上的 e0/3 的 cost ，这就使得当 SW1-SW2 之间的链路 DOWN 掉或者 SW1-SW3 之间的链路 DOWN 掉时，SW3/SW2 去往 10.1.10.0 和 10.1.20.0 网段都是直线往下经过 R2 或者 R1 回程到业务网段，并不符合需求。需要添加策略路由 PBR 实现往返路径一致。 1234567891011121314151617181920! --- SW2 配置，配置匹配去往 10.1.20.0 网段的 ACL，配置 route-map 匹配 ACL ，设置去往10.1.20.0 网段的下一跳地址，配置 SLA 监测，最后在 e0/1 调用!access-list 101 permit ip any 10.1.20.0 0.0.0.255!route-map pbr_20.0 permit 10 match ip address 101 set ip next-hop verify-availability 10.1.254.105 1 track 1!ip sla 1 icmp-echo 10.1.254.105 source-interface Ethernet0/3 frequency 5! 设置 delay 是为了及时观察现象，实际生产环境不需这么做 track 1 ip sla 1 reachability delay down 5 up 3!ip sla schedule 1 life forever start-time now!interface Ethernet0/1 ip policy route-map pbr_20.0! 当SW1-SW3之间的链路DOWN掉时，PC2应该仍然能够访问Server，情况类似。解决思路和上面一样，懒-码-字。 当 SW2-R1 之间的链路 DOWN 掉时，PC1 访问 Server 的数据流切换至路径：R3&gt;R1&gt;SW3&gt;SW1&gt;Server，此时不要求流量往返路径完全一致。当 SW3-R2 之间的链路 DOWN 掉时，PC2 应该仍能够访问到 Server。 S：当 SW2-R1 之间的链路 DOWN 掉时，R1 是能够从 SW3 学习到去往 Server 的路由的，只是回程的时候路径是： Server&gt; SW1 &gt; SW2 &gt; R2 &gt;R4 ，不要求流量往返路径完全一致，本条需求已经自动实现了。当SW3-R2之间的链路DOWN掉时同理。 R3、R4 任意一台路由器与内网交换机直连链路 DOWN 掉，不影响内网 PC 访问外网。 S：配置的 VRRP 可以实现。 【可选】若 R3 的出口 DOWN 或 R1 的两条上联链路都 DOWN，以上两种情况，R3 都能检测到，要求此两种情况发生时内网用户访问 SERVER 都不受影响，R4 同理。 S：R3 的出口 DOWN 或 R1 的两条上联链路都 DOWN，明显要求配置 SLA 特性，我的做法是在 SW3 和 SW2 上配置一个环回地址，R3/R4 检测这个地址的可达性。举例：当 R3 配置了监测 SW3 的环回地址可达性，无论是 R3 的出口 DOWN 或 R1 的两条上联链路都 DOWN 其中一个条件达成，都会导致监测失败不可达，再在相应的内网子接口下配置 Track 联动降低 VRRP 组的优先级，使其成为 Backup 状态，另一台路由器成为 Master ，此时内网用户访问 Server 路径自动切换不受影响（其实还是会掉包的，取决于你配置的监测周期，抢占延时，生成树协议）。R4 同理。 （11月10日发现，可以使用 Track list 的方式实现） 123456789101112! --- R3 配置interface Ethernet0/1.10 vrrp 10 track 1 decrement 21!ip sla 1 icmp-echo 33.33.33.33 source-interface Ethernet0/0 frequency 5ip sla schedule 1 life forever start-time now!track 1 ip sla 1 reachability delay down 5 up 3! Ending 配置存阿里云盘了，这是链接：[分享的文件] 欢迎“来电”来函探讨。","link":"/posts/8ac5ac4a.html"},{"title":"No.002 Simple Case","text":"来自红茶三杯的原文:【有点儿意思系列 04】哎哟喂停不下来了 当时看完 Case 的需求我是不想理会的，不就是 VRF 隔离么，我压根没往配置 ACL 这个方向去，其实看需求已经暗示的非常明显了，“始终”，“完全隔离” 等等字眼。再加上 VRRP（远离思科设备多年，不玩 HSRP 了，模拟器做不了堆叠啊） 的冗余方案。但是 “问题后续” 这段话引起了我的兴趣，还是从这个拓扑开始吧（其实我已经做完两个拓扑在码这篇文章的时候），话不多说，开干。 Step 1：配置接入层交换机（SW5、SW6、SW7） 创建 VLAN ，上联 Core-SW 的端口配置 Trunk 放行 VLAN，把连接 PC 的端口划入对应 VLAN 123456789101112131415161718! -- SW5 配置， 根据需求业务 A 有多个 VLAN ，就敷衍一下配置VLAN10,VLAN20!vlan 10vlan 20!interface Ethernet0/0 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk!interface Ethernet0/1 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk!interface Ethernet0/2 switchport access vlan 10! SW6、SW7 如法炮制即可。 Step 2：配置 Core_SW1 和 Core_SW2 创建 VLAN10、VLAN20、VLAN50，创建 VRF 定义为 vpn_biz 和 vpn_internet 1234567891011121314151617! --- Core_SW1 和 Core_SW2 配置!vlan 10vlan 20vlan 50!! --- 其实用不到 RD 和 RT ，在 MPLS-VPN 引入的时候才用，为了看起来好看点ip vrf vpn_biz rd 10:10 route-target export 100:100 route-target import 100:100!ip vrf vpn_internet rd 20:20 route-target export 200:200 route-target import 200:200! 配置 Core-SW1 与 Core-SW2 之间的 Port-channel，配置 Core-SW 和下联 SW5、SW6、SW7 的 Trunk 12345678910111213141516171819202122232425262728293031323334! --- Core_SW1 和 Core_SW2 配置!interface Port-channel1 switchport trunk allowed vlan 10,20,50 switchport trunk encapsulation dot1q switchport mode trunk!interface Ethernet0/1 switchport trunk allowed vlan 10,20,50 switchport trunk encapsulation dot1q switchport mode trunk channel-group 1 mode active!interface Ethernet0/2 switchport trunk allowed vlan 10,20,50 switchport trunk encapsulation dot1q switchport mode trunk channel-group 1 mode active! interface Ethernet1/1 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk!interface Ethernet1/2 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk!interface Ethernet1/3 switchport trunk allowed vlan 50 switchport trunk encapsulation dot1q switchport mode trunk! 创建 VLAN 接口并绑定 VRF，配置 IP 地址，配置 VRRP 12345678910111213141516171819! --- Core_SW1 配置!interface Vlan10 ip vrf forwarding vpn_biz ip address 192.168.10.252 255.255.255.0 vrrp 10 ip 192.168.10.254 vrrp 10 priority 120!interface Vlan20 ip vrf forwarding vpn_biz ip address 192.168.20.252 255.255.255.0 vrrp 20 ip 192.168.20.254 vrrp 20 priority 120!interface Vlan50 ip vrf forwarding vpn_internet ip address 192.168.50.252 255.255.255.0 vrrp 50 ip 192.168.50.254! 123456789101112131415161718! --- Core_SW2 配置!interface Vlan10 ip vrf forwarding vpn_biz ip address 192.168.10.253 255.255.255.0 vrrp 10 ip 192.168.10.254!interface Vlan20 ip vrf forwarding vpn_biz ip address 192.168.20.253 255.255.255.0 vrrp 20 ip 192.168.20.254!interface Vlan50 ip vrf forwarding vpn_internet ip address 192.168.50.253 255.255.255.0 vrrp 50 ip 192.168.50.254 vrrp 50 priority 120! 配置 Core-SW1 与 OBR-SW1 ，Core-SW2 与 OBR-SW2 互联的接口 IP 地址，并配置 OSPF 网络类型为点对点 1234567891011121314! --- Core_SW1 配置!interface Ethernet0/0.100 encapsulation dot1Q 100 ip vrf forwarding vpn_biz ip address 10.10.10.2 255.255.255.252 ip ospf network point-to-point!interface Ethernet0/0.200 encapsulation dot1Q 200 ip vrf forwarding vpn_internet ip address 10.10.10.2 255.255.255.252 ip ospf network point-to-point! 1234567891011121314! --- Core_SW2 配置!interface Ethernet0/0.100 encapsulation dot1Q 100 ip vrf forwarding vpn_biz ip address 10.10.10.10 255.255.255.252 ip ospf network point-to-point!interface Ethernet0/0.200 encapsulation dot1Q 200 ip vrf forwarding vpn_internet ip address 10.10.10.10 255.255.255.252 ip ospf network point-to-point! Step 3：配置 OBR-SW1 和 OBR-SW2 配置创建 VRF 定义为 vpn_biz 和 vpn_internet，配置互联接口 IP 地址 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748! --- OBR-SW1 配置!ip vrf vpn_biz rd 10:10 route-target export 100:100 route-target import 100:100!ip vrf vpn_internet rd 20:20 route-target export 200:200 route-target import 200:200!!interface Ethernet0/0 no switchport ip vrf forwarding vpn_biz ip address 100.1.1.1 255.255.255.252 ip ospf network point-to-point!interface Ethernet0/1 no switchport ip vrf forwarding vpn_internet ip address 200.1.1.5 255.255.255.252!interface Ethernet0/2.100 encapsulation dot1Q 100 ip vrf forwarding vpn_biz ip address 10.10.10.5 255.255.255.252 ip ospf network point-to-point!interface Ethernet0/2.200 encapsulation dot1Q 200 ip vrf forwarding vpn_internet ip address 10.10.10.5 255.255.255.252 ip ospf network point-to-point!interface Ethernet0/3.100 encapsulation dot1Q 100 ip vrf forwarding vpn_biz ip address 10.10.10.1 255.255.255.252 ip ospf network point-to-point!interface Ethernet0/3.200 encapsulation dot1Q 200 ip vrf forwarding vpn_internet ip address 10.10.10.1 255.255.255.252 ip ospf network point-to-point! 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748! --- OBR-SW2 配置!ip vrf vpn_biz rd 10:10 route-target export 100:100 route-target import 100:100!ip vrf vpn_internet rd 20:20 route-target export 200:200 route-target import 200:200!!interface Ethernet0/0 no switchport ip vrf forwarding vpn_internet ip address 200.1.1.1 255.255.255.252!interface Ethernet0/1 no switchport ip vrf forwarding vpn_biz ip address 100.1.1.5 255.255.255.252 ip ospf network point-to-point!interface Ethernet0/2.100 encapsulation dot1Q 100 ip vrf forwarding vpn_biz ip address 10.10.10.6 255.255.255.252 ip ospf network point-to-point!interface Ethernet0/2.200 encapsulation dot1Q 200 ip vrf forwarding vpn_internet ip address 10.10.10.6 255.255.255.252 ip ospf network point-to-point!interface Ethernet0/3.100 encapsulation dot1Q 100 ip vrf forwarding vpn_biz ip address 10.10.10.9 255.255.255.252 ip ospf network point-to-point!interface Ethernet0/3.200 encapsulation dot1Q 200 ip vrf forwarding vpn_internet ip address 10.10.10.9 255.255.255.252 ip ospf network point-to-point! Step 4：配置 Biz_A_Remote 配置创建 VRF 定义为 vpn_biz，配置互联接口 IP 地址，配置环回接口作为测试地址 12345678910111213141516171819202122232425! --- Biz_A_Remote 配置!ip vrf vpn_biz rd 10:10 route-target export 100:100 route-target import 100:100!!interface Loopback0 ip vrf forwarding vpn_biz ip address 192.168.30.111 255.255.255.255 ip ospf network point-to-point!interface Ethernet0/0 no switchport ip vrf forwarding vpn_biz ip address 100.1.1.2 255.255.255.252 ip ospf network point-to-point!interface Ethernet0/1 no switchport ip vrf forwarding vpn_biz ip address 100.1.1.6 255.255.255.252 ip ospf network point-to-point! Step 5：配置 Internet 配置接口 IP 地址和环回接口即可，现实环境中，运营商的设备控制不了 12345678910111213! --- Internet 配置!interface Loopback0 ip address 1.2.3.4 255.255.255.255!interface Ethernet0/0 ip address 200.1.1.2 255.255.255.252 duplex auto!interface Ethernet0/1 ip address 200.1.1.6 255.255.255.252 duplex auto! Step 6：配置 OSPF 为了简化配置过程，我全网使用 Area 0 ，生产环境中该划分区域的不要偷懒。 12345678910111213! --- Core_SW1 配置!router ospf 100 vrf vpn_biz router-id 1.1.1.1 network 10.10.10.2 0.0.0.0 area 0 network 192.168.10.252 0.0.0.0 area 0 network 192.168.20.252 0.0.0.0 area 0!router ospf 200 vrf vpn_internet router-id 1.1.1.2 network 10.10.10.2 0.0.0.0 area 0 network 192.168.50.252 0.0.0.0 area 0! 12345678910111213! --- Core_SW2 配置!router ospf 100 vrf vpn_biz router-id 2.2.2.1 network 10.10.10.10 0.0.0.0 area 0 network 192.168.10.253 0.0.0.0 area 0 network 192.168.20.253 0.0.0.0 area 0!router ospf 200 vrf vpn_internet router-id 2.2.2.2 network 10.10.10.10 0.0.0.0 area 0 network 192.168.50.253 0.0.0.0 area 0! 12345678910111213141516! --- OBR-SW1 配置!router ospf 100 vrf vpn_biz router-id 11.11.11.1 network 10.10.10.1 0.0.0.0 area 0 network 10.10.10.5 0.0.0.0 area 0 network 100.1.1.1 0.0.0.0 area 0!router ospf 200 vrf vpn_internet router-id 11.11.11.2 network 10.10.10.1 0.0.0.0 area 0 network 10.10.10.5 0.0.0.0 area 0 default-information originate always! ip route vrf vpn_internet 0.0.0.0 0.0.0.0 200.1.1.6! 12345678910111213141516! --- OBR-SW2 配置!router ospf 100 vrf vpn_biz router-id 22.22.22.1 network 10.10.10.6 0.0.0.0 area 0 network 10.10.10.9 0.0.0.0 area 0 network 100.1.1.5 0.0.0.0 area 0!router ospf 200 vrf vpn_internet router-id 22.22.22.2 network 10.10.10.6 0.0.0.0 area 0 network 10.10.10.9 0.0.0.0 area 0 default-information originate always! ip route vrf vpn_internet 0.0.0.0 0.0.0.0 200.1.1.2! 12345678! --- Biz_A_Remote 配置!router ospf 100 vrf vpn_biz router-id 3.3.3.1 network 100.1.1.2 0.0.0.0 area 0 network 100.1.1.6 0.0.0.0 area 0 network 192.168.30.111 0.0.0.0 area 0! Step 7：配置 NAT 其实在生产环境中用核心交换机作为互联网出口的情况不常见（我没见过），核心交换机的上行可能会有行为管理器、安全设备、路由器等设备，具体情况就要看客户单位对网络有什么样的需求和预算了。 到这还有个问题，思科 CEF 和 NAT 貌似有冲突，去思科论坛看巴拉巴拉一大通大概是软件版本和硬件和处理器的类型等等问题，我这个是虚拟环境，不好判断是什么原因，放出看过的链接。各位如果知道是什么原因的请知会我，万分感谢。 NAT not working with CEF Network Address Translation (NAT) FAQ NAT: CEF Punted packets 对于上述问题，经过试验可行的方法是在需要配置 NAT 参数的接口关闭路由高速缓存 123456789101112131415161718! --- OBR-SW1 配置!interface Ethernet0/1 ip nat outside no ip route-cache!interface Ethernet0/2.200 ip nat inside no ip route-cache!interface Ethernet0/3.200 ip nat inside no ip route-cache!access-list 10 permit 192.168.50.0 0.0.0.255!ip nat inside source list 10 interface Ethernet0/1 overload! 123456789101112131415161718! --- OBR-SW2 配置!interface Ethernet0/0 ip nat outside no ip route-cache!interface Ethernet0/2.200 ip nat inside no ip route-cache!interface Ethernet0/3.200 ip nat inside no ip route-cache!access-list 10 permit 192.168.50.0 0.0.0.255!ip nat inside source list 10 interface Ethernet0/0 overload! Step 8：Test Biz_A_PC 和 Biz_B_PC 测试，发现两个网络之间不能互通。Biz_A_PC 能 ping 通 Biz_A_Remote 的环回地址 192.168.30.111；Biz_B_PC 能 ping 通 Internet 的环回地址 1.2.3.4 冗余测试 由于这个拓扑实验和我写的下一篇文章有大量重叠部分，故放在下一篇文章中表述，本文中也没有添加配置。 大概思路思路是通过 Track 关联降低 VRRP 的优先级使其成为 VRRP 的 Backup 组，流量路径自动切换至另一台设备。举个例子：当 Core-SW1 以出接口 e0/0 监测到与 OBR-SW1 直连线路不通或监测到 Biz_A_Remote 的 e0/0 不通(这是个 and 的关系，用编程语言的描述就是：条件 A 和条件 B 同时为 True，结果才为 True)，此时 SLA 监测状态为 Time-out ，在 VRRP 与 Track 联动下降低 VRRP 优先级使其成为 Backup 状态，Biz_A_PC 去往 Biz_A_Remote 的流量路径切换至 Core-SW2 ，途径：Core-SW2 –&gt; OBR-SW2 最终到达 Biz_A_Remote ，如图所示： Ending 总算码完了，其实还挺耗时间的写文章，但是对做拓扑实验做了梳理，其中还包含怎么清晰的表达我的思路和想表达的意思。 配置存阿里云盘了，这是链接：[分享的文件] 欢迎“来电”来函探讨。 下一篇文更有意思^_^，To be continued.","link":"/posts/2da7a7a9.html"},{"title":"PNETLab试用","text":"PNETLab (Packet Network Emulator Tool Lab)is a platform that allows you to download and share labs with the community. 这句话摘抄自官网介绍，这是链接：What is PNETLab? 上网冲浪发现这个大宝贝，看完介绍心理痒痒就搞一搞，有个帖子介绍挺好，原文：【原创】超级推荐：网工必备模拟器PNETLab，附下载链接，全球第一篇最优质的帖子。 Experience不能说和 EVE-NG “一模一样”，我对比过（可能是使用方法不规范，也可能是其他原因），之前用EVE-NG可以跑起整张 CCIE V5 H1 的拓扑（电脑的 CPU 和 RAM 未变动，系统换 WIN10 ，加了固态硬盘做系统盘），现在装了 PNETLab 只能跑 31台 还是 32 台设备（原谅老年人健忘）。 Hardware requirements看了官网文档，我这古董 AMD CPU 不在硬件支持范围内（是不是这个原因跑不了那么多设备呢？），当看到这些说明的时候，我差点就把正在下载中的文件给取消了。最后安上了，我若安不好，当天便可以多睡几小时。 1234567891011PC/Laptop HW requirementsCPU：Intel i5/i7 (4 Logical processors), Enabled Intel virtualization in BIOSRAM：8GbHDD Space：40GbNetwork：LAN/WLAN----------------------------------------------------------------------------------------------------------PNETLab Virtual machine requirementsCPU：4/1 (Number of processors/Number of cores per processor) Enabled Intel VT-x/EPT virtualization engineRAM：6Gb or moreHDD：40Gb or moreNetwork：VMware NAT or Bridged network adapter 1234567Unsupported hardware and systemsThe following are currently not supported:• AMD CPU based PC or Server• VirtualBox virtualization• Citrix XenServer• Microsoft HyperV• Ubuntu 17.X or 18.x as platform PNETLab Supported Images查看支持的镜像，还是挺多的，不知为何 H3C 不在列表里，看B站 UP 主视频把 H3C 的防火墙设备弄进去了，不过我挺少用 QEMU 的镜像（太吃内存了），Huawei/H3C 的实验还是用官方的模拟器。 还有个事，就是现在 PNETLab Store 商店下载Lab不附带一起下载镜像了，要自己找镜像上传到目录，还好可以找之前 EVE-NG 的资源上传。 Language &amp; 汉化看到 B 站视频有 UP 主用了汉化，我就还好，看这些英文不头疼。其实也简单，就是把里边的英文包复制一份到电脑，再打开里面的 JSON 文件，里面有两列，左边属性，右边 Web 界面显示的字符，把右边填上中文保存上传到 Chinese 的文件夹，再切换一下即可。 How to console to devices有两种方式，跟 EVE-NG 不知道是哪个版本的方式一样。 使用 HTML Console，在拓扑界面弹出一个小窗的方式，我个人就不太喜欢这么搞，不舒畅。 使用 Default Console，调用系统自带的默认程序打开，例如把 CRT 软件设置成系统默认，跟 EVE-NG 的 EVE-NG-Win-Client-Pack 这玩意儿“一模一样”。 Ending欢乐的时光特别短，又到时候说88，还有很多需要探索的地方，不谈了，开饭。 接下来我将用 PNETLab 搞一个实验，来自大佬红茶三杯博客的原文:【有点儿意思系列 06】一个看起来简单的案例，弄完了写一篇文 po 出来，先看图。","link":"/posts/13f1a9a7.html"},{"title":"把组装机主板塞到品牌机机箱","text":"前段时间我的台式机电源嗝屁了，不得不掏出吃灰近四年的旧电源来顶一顶，祸不单行，这旧电源也出毛病，目测是供电不足，挂载了三块硬盘，开个 VMware 虚拟机做实验，老是自动频繁的弹出一块机械硬盘，望了望旁边还有一个联想品牌机的机箱（带电源，最大功率只有 280W ），想想要不给它个机会，抱着试一试的想法拆下来插上电，居然能带的动（其实我查过整机功率了，是带的动，显卡用亮机卡了不解释），所以进行了一场“岁土转生”。 首先感谢的是，品牌机没有对电源插口做特殊化，主板和 CPU 供电接口通用，看了看电源标签上的参数也通用。唯一的问题是主板连接前面板跳线的插口，联想搞了自己个标准。 图：电源、重启、指示灯跳线的插头 图：前面板音频插头 图：前面板 USB 插头 这……完全不对劲啊，首先针座和针头就对不上。这时候就要动脑和搜索引擎里遨游了。首先查找到联想机箱原主板的针脚，看下图，列出了各针脚的说明。 用根牙签把联想机箱跳线插座上的线头挑出来，然后对应组装机主板的说明进行排列组合使之在组装机主板能使用（见下图），第一次我把电源指示灯正负接反了（这也不能怪我，联想的板子上没标正负），调换过后就正常了。 其实在这个正负问题上我还折腾了好一会儿，一开始以为都是按左边针脚是正，右边针脚是负来对应的，打开机箱头部查看电路板发现指示灯也没有正负标识，查了 LED 哪个针脚是正负，查到了，LED 灯珠里小的那一边是正（涨知识了） 接下来处理前面板的音频插口跳线，查看网上的介绍说明（搜索引擎搜：联想前置音频13针转9针），满满的都是复制粘贴的内容，我就不贴出来了，一番操作后得到如下图样式插头。总是有妖，明明照着教程撸的，测试的时候左右声道反了，又返工对换一对线。^*^ 接下来处理前置 USB 线，查看网上的介绍说明（联想USB接口11针的怎么接主板9针接口？） 12345678910111213联想前置USB接口接法：市面上普通主板九针接法VCC，DATA-，DATA+，GND 空VCC，DATA-，DATA+，GND线的颜色是:红 白 绿 黑红 白 绿 黑联想主板上的F-usb 11针前置接法又不同了, 经常会遇到联想机箱+组装主板 ，一不小心，将前置线接上组装主板上,结果烧坏了前置usb控制板.1 2 9 10 都是黑线，3 5 7依次是红白绿，4 6 8依次是棕蓝黄,11是空着的.顺次是这个的1 3 5 7 9 112 4 6 8 10⑴⑵⑼⑽是地线，⑶⑷是VCC，也就是电源正极，⑸⑹是DATA－，⑺⑻是DATA+，⑾是空针 按照这个说明，只需把插头的 3-5-7-8 这四列对应接到主板针脚上即可，不需要改插座头。为了安全起见，我还是掏出了万用表测量了一下自己的组装机主板是否对应这个正负输出（接错线的话确实有点小危险，5 V 直接短路可是要冒烟的）。 终于折腾完了，把组装机的主板塞进了品牌机的机箱，目前前面板各项功能正常。由于使用了这个 280 W 的电源，这就彻底使我和大型网游“绝缘”了，不过也有好些年不抡游戏了。值得说一句，联想10年前的机箱用料十足，机箱的设计也挺好，给个好评她。这么一折腾才发现处处是学问，不能轻视电脑组装拧螺丝。","link":"/posts/1f544ac3.html"},{"title":"No.003 Simple Case","text":"红茶三杯的原文 ：【有点儿意思系列 04】哎哟喂停不下来了 ，根据问题延续中的表述， 实验拓扑增加了两台出口路由器，两台防火墙，一台服务器。本次拓扑实验依托上一个拓扑演变而来，大部分基础配置与上一个相同，如果您是初次看到本文，请参阅上文 【No.002 Simple Case】，本文不在赘述。 可能你看到拓扑中防火墙名称就懵了，我解释一下，由于我这是台古董级 AMD CPU 的电脑，跑不起 Cisco ASAv 的镜像（报错：Unsupport CPU type，无限重启），再加上内存有限，就不折腾了，考虑到文中只提到 NAT 的需求，我就用两台路由器换个图标和名称代替了。最终实现了原文中源地址转换及静态映射的需求，虽然牺牲了安全策略配置和 HA 配置。 极致极简，拓扑中的 Open_Server 同样是用路由器模拟的，实验中将实现 Open_Server 的 SSH 服务映射到公网地址提供访问。 Part 1Step 1：修改 Core-SW1 和 Core-SW2 配置12345678910! --- Core-SW1 配置，增加与 Faker_FW1 互联地址，OSPF 宣告互联地址!interface Ethernet0/3 no switchport ip vrf forwarding vpn_internet ip address 192.168.100.5 255.255.255.252!router ospf 200 vrf vpn_internet network 192.168.100.5 0.0.0.0 area 0! 12345678910! --- Core-SW2 配置，增加与 Faker_FW2 互联地址，OSPF 宣告互联地址!interface Ethernet0/3 no switchport ip vrf forwarding vpn_internet ip address 192.168.100.1 255.255.255.252!router ospf 200 vrf vpn_internet network 192.168.100.1 0.0.0.0 area 0! Step 2：修改 OBR-SW1 和 OBR-SW2 配置1234567891011! --- OBR-SW1 配置，配置与 R1 互联地址，OSPF 宣告互联地址,去除原先的 NAT 相关配置和去除 OSPF 注入默认路由!interface Ethernet0/1 no switchport ip vrf forwarding vpn_internet ip address 20.20.20.1 255.255.255.252 ip ospf network point-to-point!router ospf 200 vrf vpn_internet network 20.20.20.1 0.0.0.0 area 0! 1234567891011! --- OBR-SW2 配置，配置与 R2 互联地址，OSPF 宣告互联地址,去除原先的 NAT 相关配置和去除 OSPF 注入默认路由!interface Ethernet0/0 no switchport ip vrf forwarding vpn_internet ip address 20.20.20.10 255.255.255.252 ip ospf network point-to-point!router ospf 200 vrf vpn_internet network 20.20.20.10 0.0.0.0 area 0! Step 3：配置 R1 和 R21234567891011121314151617181920212223242526272829303132333435363738394041424344! --- R1 配置，配置互联地址，OSPF 宣告互联地址! --- 配置中包含了 NAT 配置，当两台防火墙宕机后仍可保持内网与互联网通信!ip vrf vpn_internet rd 20:20 route-target export 200:200 route-target import 200:200!interface Ethernet0/0 ip vrf forwarding vpn_internet ip address 200.1.1.1 255.255.255.248 ip nat outside ip virtual-reassembly in duplex auto!interface Ethernet0/1 ip vrf forwarding vpn_internet ip address 20.20.20.2 255.255.255.252 ip nat inside ip virtual-reassembly in ip ospf network point-to-point duplex auto!interface Ethernet0/2 ip vrf forwarding vpn_internet ip address 20.20.20.5 255.255.255.252 ip nat inside ip virtual-reassembly in ip ospf network point-to-point duplex auto!router ospf 200 vrf vpn_internet router-id 111.111.111.111 network 20.20.20.2 0.0.0.0 area 0 network 20.20.20.5 0.0.0.0 area 0 network 200.1.1.1 0.0.0.0 area 0 default-information originate metric 11 metric-type 1!ip nat inside source list 10 interface Ethernet0/0 vrf vpn_internet overload!ip route vrf vpn_internet 0.0.0.0 0.0.0.0 200.1.1.6!access-list 10 permit 192.168.50.0 0.0.0.255! 123456789101112131415161718192021222324252627282930313233343536373839! --- R2 配置，配置互联地址，OSPF 宣告互联地址! --- 配置中包含了 NAT 配置，当两台防火墙宕机后仍可保持内网与互联网通信!interface Ethernet0/0 ip vrf forwarding vpn_internet ip address 20.20.20.9 255.255.255.252 ip nat inside ip virtual-reassembly in ip ospf network point-to-point duplex auto!interface Ethernet0/1 ip vrf forwarding vpn_internet ip address 200.1.1.2 255.255.255.248 ip nat outside ip virtual-reassembly in duplex auto!interface Ethernet0/2 ip vrf forwarding vpn_internet ip address 20.20.20.6 255.255.255.252 ip nat inside ip virtual-reassembly in ip ospf network point-to-point duplex auto!router ospf 200 vrf vpn_internet router-id 222.222.222.222 network 20.20.20.6 0.0.0.0 area 0 network 20.20.20.9 0.0.0.0 area 0 network 200.1.1.2 0.0.0.0 area 0 default-information originate metric 10 metric-type 1!ip nat inside source list 10 interface Ethernet0/1 vrf vpn_internet overload!ip route vrf vpn_internet 0.0.0.0 0.0.0.0 200.1.1.6!access-list 10 permit 192.168.50.0 0.0.0.255! Step 4：Internet 配置，Faker_FW1、Faker_FW2 基础配置1234567891011! --- Internet 配置!interface Loopback0 ip address 1.2.3.4 255.255.255.255!interface Ethernet0/0 switchport access vlan 123!interface Vlan123 ip address 200.1.1.6 255.255.255.248! 123456789! --- Faker_FW1 配置! --- 200.1.1.3 是 NAT 和 映射使用的公网地址!interface Loopback0 ip address 200.1.1.3 255.255.255.255!interface Ethernet0/0 ip address 192.168.100.6 255.255.255.252! 123456789! --- Faker_FW2 配置! --- 200.1.1.4 是 NAT 和 映射使用的公网地址!interface Loopback0 ip address 200.1.1.4 255.255.255.255!interface Ethernet0/0 ip address 192.168.100.2 255.255.255.252! Part 2 配置完第一部分， Biz_B_PC 可以 ping 通 Internet 的 1.2.3.4，路径是： Core-SW2 -&gt; OBR-SW2 -&gt; R2，而从 Internet 开启 debug ip icmp 观察到：Internet 返回 reply 报文远端地址是 R2 的外网接口 IP 地址（200.1.1.2）。 根据原文中的描述，“ 防火墙与核心交换机为仅有一条物理线路。另外，由于增加了防火墙，因此将原先部署在出口路由器（拓扑中没有画出来）上的NAT下沉到防火墙上，由防火墙来部署源地址转换及静态映射。防火墙出公网的下一跳是OBR-SW交换机，两者使用私有IP地址三层对接。” 也就是 NAT 和映射的功能交给了防火墙设备，然后防火墙出公网的下一跳是出口设备，联想到防火墙与出口路由器之间创建一条隧道，内网去往公网的 inside source IP 地址在防火墙上进行 NAT 后直接走隧道至出口路由器，再路由出去。我在两台防火墙上配置的环回接口地址就是转换用的。 Step 1：配置 Faker_FW 与出口路由器建立 GRE 隧道12345678910111213141516171819202122232425! --- Faker_FW2 配置! --- NAT 和 映射使用的公网地址interface Loopback0 ip address 200.1.1.4 255.255.255.255! --- 使用 e0/0 接口地址与 R2 的 e0/0 接口地址建立隧道，并配置 nat outsideinterface Tunnel0 ip address 1.1.1.2 255.255.255.252 ip nat outside ip virtual-reassembly in tunnel source 192.168.100.2 tunnel destination 20.20.20.9! --- 配置 nat insideinterface Ethernet0/0 ip nat inside! --- 配置 NAT overload 和 静态映射（将内网 Open_Server 的 SSH 端口映射到公网的 2222 端口）ip nat pool nat-pat 200.1.1.4 200.1.1.4 prefix-length 29ip nat inside source list 10 pool nat-pat overloadip nat inside source static tcp 192.168.50.200 22 200.1.1.4 2222 extendable! --- 配置默认路由和必要的静态路由ip route 0.0.0.0 0.0.0.0 Tunnel0ip route 20.20.20.8 255.255.255.252 192.168.100.1ip route 192.168.50.0 255.255.255.0 192.168.100.1! --- 配置 inside source listaccess-list 10 permit 192.168.50.0 0.0.0.255! 12345678910111213141516171819! --- R2 配置! --- 使用 e0/0 接口地址与 Faker_FW2 的 e0/0 接口地址建立隧道interface Tunnel0 ip vrf forwarding vpn_internet ip address 1.1.1.1 255.255.255.252 tunnel source 20.20.20.9 tunnel destination 192.168.100.2 tunnel vrf vpn_internet! --- 配置需要走隧道的 VRF 静态路由，内网地址回程路由 track 跟踪ip route vrf vpn_internet 192.168.50.0 255.255.255.0 Tunnel0 track 1ip route vrf vpn_internet 200.1.1.4 255.255.255.255 Tunnel0! --- 配置 SLA 监测隧道对端的连通性ip sla 1 icmp-echo 192.168.100.2 source-interface Ethernet0/0 vrf vpn_internetip sla schedule 1 life forever start-time now!track 1 ip sla 1 reachability! 1234567891011121314151617181920212223242526! --- Faker_FW1 配置! --- NAT 和 映射使用的公网地址interface Loopback0 ip address 200.1.1.3 255.255.255.255! --- 使用 e0/0 接口地址与 R1 的 e0/1 接口地址建立隧道，并配置 nat outsideinterface Tunnel0 ip address 2.2.2.1 255.255.255.252 ip nat outside ip virtual-reassembly in tunnel source 192.168.100.6 tunnel destination 20.20.20.2! --- 配置 nat insideinterface Ethernet0/0 ip nat inside! --- 配置 NAT overload 和 静态映射ip nat pool nat-pat 200.1.1.3 200.1.1.3 prefix-length 29ip nat inside source list 10 pool nat-pat overloadip nat inside source static tcp 192.168.50.200 22 200.1.1.3 2222 extendable! --- 配置默认路由和必要的静态路由ip route 0.0.0.0 0.0.0.0 Tunnel0ip route 20.20.20.0 255.255.255.252 192.168.100.5ip route 192.168.50.0 255.255.255.0 192.168.100.5!! --- 配置 inside source listaccess-list 10 permit 192.168.50.0 0.0.0.255! 12345678910111213141516171819! --- R1 配置! --- 使用 e0/1 接口地址与 Faker_FW2 的 e0/0 接口地址建立隧道interface Tunnel0 ip vrf forwarding vpn_internet ip address 2.2.2.2 255.255.255.252 tunnel source 20.20.20.2 tunnel destination 192.168.100.6 tunnel vrf vpn_internet! --- 配置需要走隧道的 VRF 静态路由，内网地址回程路由 track 跟踪ip route vrf vpn_internet 192.168.50.0 255.255.255.0 Tunnel0 track 1ip route vrf vpn_internet 200.1.1.3 255.255.255.255 Tunnel0! --- 配置 SLA 监测隧道对端的连通性ip sla 1 icmp-echo 192.168.100.6 source-interface Ethernet0/1 vrf vpn_internetip sla schedule 1 life forever start-time now!track 1 ip sla 1 reachability! Step 2：配置 Core-SW 静态路由使上网流量下一跳设备为防火墙1234567891011! --- Core-SW1 配置! ip route vrf vpn_internet 0.0.0.0 0.0.0.0 192.168.100.6 track 1!ip sla 1 icmp-echo 192.168.100.6 source-interface Ethernet0/3 vrf vpn_internet frequency 5! track 1 ip sla 1 reachability! 1234567891011! --- Core-SW2 配置!ip route vrf vpn_internet 0.0.0.0 0.0.0.0 192.168.100.2 track 1!ip sla 1 icmp-echo 192.168.100.2 source-interface Ethernet0/3 vrf vpn_internet frequency 5! track 1 ip sla 1 reachability! 完成配置到这个步骤，再观察内网到 Internet 的流量路径,： Core-SW2 -&gt; Faker_FW2 -&gt; R2，而从 Internet 开启 debug ip icmp 观察到：Internet 返回的 reply 报文远端地址是 Faker_FW2 配置的 NAT 转换地址（200.1.1.4）。 配置 Open_Server 和测试公网 SSH 访问 123456789101112131415161718192021222324! --- Open_Server 配置!interface Ethernet0/0 ip address 192.168.50.200 255.255.255.0!ip route 0.0.0.0 0.0.0.0 192.168.50.254!! --- 配置 SSH SERVICES!ip domain name test.com!crypto key generate rsa 1024!ip ssh version 2!line vty 0 4 login local transport input ssh!username cisco password 0 cisco!enable password cisco! NAT 静态映射已在 【Part 2 – Step 1】 中配置，将 Open_Server 的 22 端口映射到被访问公网 IP 地址的 2222 端口。测试结果如图： Part 3网络冗余的设计 本实验中探讨的是在网络中某段线路通断的情况下 Biz_B_PC 访问 Internet 环回接口地址 1.2.3.4 的路径切换。网络正常情况下，访问路径如下图： 情况 1：（假设 Faker_FW1、Core-SW1、OBR-SW1、R1 设备都正常，线路也正常 ） 当 Core-SW2 的 e0/3 状态为 DOWN； 当 Core-SW2 的 e0/0 状态为 DOWN； 当 OBR-SW2 的 e0/0 状态为 DOWN； 当 Core-SW2 的 e1/3 链路协议 DOWN； 以上四个条件有一个为真，即其中出现一个接口为 DOWN 状态， Core-SW2 降低 内网 VRRP 组的优先级， 同时将内网 VRRP 组切换至 Backup 状态，内网上网流量路径切换至 Core-SW1 进行转发。 情况 2：（假设 Faker_FW2、 Core-SW2、OBR-SW2、R2 设备都正常，线路也正常 ） 当 Core-SW1 的 e0/3 状态为 DOWN； 当 Core-SW1 的 e0/0 状态为 DOWN； 当 OBR-SW1 的 e0/1 状态为 DOWN； 当 Core-SW1 的 e1/3 链路协议 DOWN； 以上四个条件有一个为真，即其中出现一个接口为 DOWN 状态， Core-SW1 降低 内网 VRRP 组的优先级，不进行 VRRP 状态切换。 情况 3： 当 A 组条件任一条件为真和 B 组任一条件为真时，此时 Core-SW1 和 Core-SW2 都降低 VRRP 组优先级，由于设置了 Core-SW2 的 VRRP 优先级为 120 （ Core-SW1 默认优先级 100），两台设备同时降低相同的优先级 21 。此时的 VRRP Master 设备是 Core-SW2 ，上网流量路径：Core-SW2 -&gt; OBR-SW2 -&gt; R2 ，在 R2 上进行 NAT 最终出公网；当 B 组中的条件是：OBR-SW2 的 e0/0 状态为 DOWN，上网流量路径：Core-SW2 -&gt; OBR-SW2 -&gt; OBR-SW1-&gt; R1，在 R1 上进行 NAT 最终出公网。 分别手动 shutdown 以上任一条件中的接口（以 Core-SW2 的 e0/3 和 e1/3 为例），观察 Track 和 VRRP 状态的变化如下图： 12345678910111213141516171819202122232425262728293031323334! --- Core-SW2 配置!ip sla 1 icmp-echo 192.168.100.2 source-interface Ethernet0/3 vrf vpn_internet frequency 5ip sla 2 icmp-echo 10.10.10.9 source-interface Ethernet0/0.200 vrf vpn_internet frequency 5ip sla 3 icmp-echo 20.20.20.10 source-interface Ethernet0/0.200 vrf vpn_internet frequency 5ip sla group schedule 11 1-3 schedule-together start-time now life forever! track 1 ip sla 1!track 2 ip sla 2!track 3 ip sla 3!track 4 interface Ethernet1/3 line-protocol!track 11 list boolean and object 1 object 2 object 3 object 4! interface Vlan50 vrrp 50 priority 120 vrrp 50 track 11 decrement 21! 12345678910111213141516171819202122232425262728293031323334! --- Core-SW1 配置!ip sla 1 icmp-echo 192.168.100.6 source-interface Ethernet0/3 vrf vpn_internet frequency 5ip sla 2 icmp-echo 10.10.10.1 source-interface Ethernet0/0.200 vrf vpn_internet frequency 5ip sla 3 icmp-echo 20.20.20.1 source-interface Ethernet0/0.200 vrf vpn_internet frequency 5ip sla group schedule 11 1-3 schedule-together start-time now life forever! track 1 ip sla 1 reachability!track 2 ip sla 2 reachability!track 3 ip sla 3 reachability!track 4 interface Ethernet1/3 line-protocol!track 11 list boolean and object 1 object 2 object 3 object 4!interface Vlan50 vrrp 50 ip 192.168.50.254 vrrp 50 track 11 decrement 21! Ending 码完字了，还是那句话（挺耗时间的）。尽管还有不满意的地方，比如还可以再完善配置，添加更多的配置参数，考虑更多扩展需求想解决思路，但是这是个“无底洞”。 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 配置存阿里云盘了，这是链接：[分享的文件] 欢迎“来电”来函探讨。","link":"/posts/62d0e673.html"},{"title":"No.004 Simple Case","text":"红茶三杯的原文 ：【有点儿意思系列 02】哎哟喂停不下来了 ，看完原文描述，我想到的是用 NAT 转换目的地址的方式解决，经过实验验证后，也说明了这个方法是可行的。做完实验后又想还有没有其他方法实现呢，想到用霸道的 PBR ，也能实现，不过这个方法我个人觉得比较傻。 背景描述： R1、R2为两台出口路由器，分别连接电信及网通的广域网出口线路； R1、R2、SW1、SW2运行OSPF，R1配置指向网通的静态路由并部署静态路由到OSPF的路由重发布，R2则向OSPF域发布缺省路由。换而言之，内网访问网通的流量缺省走R1，而访问其他Internet资源的流量走R2出去； 内网有两种服务器：一是向网通公网用户提供服务的服务器，以及向电信公网用户提供服务的服务器。为了使得这两台服务器能够被外网访问，在R1上将网通服务器映射到网通公网地址220.12.15.x/27，而在R2上把电信服务器映射到电信公网地址202.112.12.x/24。 完成上述部署后，网通的公网用户使用目的地址220.12.15.x可以访问网通服务器，电信外网用户通过202.112.12.x可以访问电信服务器。但是电信外网用户使用220.12.15.x地址却无法正常访问网通服务器。请分析原因，并提出解决方案。 SolutionPart 1详细的配置我就不贴文中了，可到文章末尾链接自取。 先说明一下拓扑在中的设备：CNC_User 和 Telecom_User 是用 PNETLab 的 Docker Chrome Node 设备（打开界面是是一个 Chrome 浏览器，用命令行登陆发现是个 Linux 系统），内网服务器用的是 Docker Apache （命令行登后发现是 Linux 系统，开启了 Apache 服务）。本次实验模拟外网客户端访问内网映射到公网的 HTTP 服务。 首先，日常配置 VLAN、VRRP、OSPF、NAT…… 一顿操作后，实现上面提到的 1 - 3 的需求及 4 中的前半部分需求。电信外网用户使用220.12.15.x地址却无法正常访问网通服务器。原因在于电信用户访问220.12.15.x地址来回路径不一致导致 TCP 会话超时（拓扑中模拟访问 HTTP）,解决方案就是使来回路径一致（皮）。 Part 2没有添加配置前，查看 Telecom_User 访问网通服务器 的情况。 从图中可以看出 Telecom_User （202.112.13.2）电信用户向网通服务器映射地址（220.12.15.1）发出目的端口为 80 的 TCP 的数据包，而 R2 上电信的公网 IP （202.112.12.1）回应了 TCP ，证实了前面提到的 来回路径不一致（其实从内网路由表也可看出），后面数据包逐渐黑化了。 在 R1 上添加公网访问网通服务器的目的地址 NAT 转换配置 12345678910! -- R1 配置 ! -- 配置公网访问网通服务器转换的 NAT 地址池 ip nat pool to_cnc_server 172.16.1.100 172.16.1.110 netmask 255.255.255.0! -- 配置（outside list）任一公网地址访问 R1 上公网 IP 的 80 端口access-list 101 permit tcp any host 220.12.15.1 eq www! -- 配置目的地址 NAT 转换ip nat outside source list 101 pool to_cnc_server! -- 配置 NAT 地址池网段静态路由，用于回程触发 NAT 转换 ip route 172.16.1.0 255.255.255.0 220.12.15.2! 配置完成测试结果如下： 电信外网用户使用220.12.15.x地址正常访问网通服务器。 查看 R1 NAT 映射表，有目的地址 NAT 转换，注意观察 Outside local 和 Outside global 原理就是让 网通服务器 回程的数据包从 R1 出去。在 R1 上配置目的地址 NAT 转换。这时从网通服务上看就是源地址为 172.16.1.100 - 172.16.1.110 的地址访问的自身，回包也就回这个地址段。待回包至 R1 ，查找路由表发现 172.16.1.0 网段下一跳地址是 220.12.15.2 （手动配置的静态路由），触发 NAT 转换（此处查找 NAT 映射表项），源地址转成 R1 网通公网 IP地址回包最终至电信用户。此处配置的 172.16.1.0 网段静态路由是触发 NAT 转换，如果不配置，R1 就把网通服务器发过来的数据包丢弃了。 普及一下 NAT 执行的顺序，查看思科官网(NAT Order of Operation) Part 3Part 2 中使用 目的地址 NAT 转换的手段使得来回路径一致，那有什么办法能使网通服务器回包强制从 R1 的公网 IP 地址端口出去呢？— PBR。从 SW1 上就开始把网通服务器回包路径扭到 R1 上，R1 再把数据强行从公网接口丢出去。 清除 Part 2 增加的配置，SW1、R1 添加如下配置： 1234567891011! -- SW1 配置 !access-list 101 permit ip host 192.168.10.1 any !route-map acc_telecom_remote permit 10 match ip address 101 set ip next-hop 10.10.10.2!interface Vlan10 ip policy route-map acc_telecom_remote! 1234567891011! -- R1 配置 !access-list 102 permit ip host 192.168.10.1 any!route-map acc_telecom_remote permit 10 match ip address 102 set ip next-hop 220.12.15.2!interface Ethernet0/2 ip policy route-map acc_telecom_remote! 配置完成测试结果如下： 电信外网用户使用220.12.15.x地址正常访问网通服务器。 查看 R1 NAT 映射表，没有目的地址 NAT 转换，但是触发了正常流量上网的 PAT，注意观察 Outside local 和 Outside global Ending 原文后边加两台防火墙的测试我就不做了（古董 AMD 台式机跑不起 ASAv），大概的考察点还是 数据包来回路径一致的问题 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 配置存阿里云盘了，这是链接：[分享的文件] 欢迎“来电”来函探讨。","link":"/posts/1fa3e02b.html"},{"title":"几种重分发方式可能带来的问题和处理","text":"最近翻看 《CCNP ROUTE(642-902)学习指南 》，没错就是 2015 年之前 CCNP 改版前的那本，现在最新的认证考试已不是这个编号和课程了。诶，不聊这些，这不重要。 现在把时间线拉回当年那个技术发展的时候，你要是说技术过时了，不好意思今年我还在某现网中看到设备运行 RIPv2 和 OSPF 两种协议的重分发。这也不重要。 本文权当自己学习和回忆。 Part 1单点单向重分发 下图所示 ，在 R1 上进行单向重分发（RIP 重分发进入 OSPF），R2 不进行重分发操作。 观察 R2 上的路由表发现去往 RIP 外部网络 10.0.0.0 的路由下一跳地址是 R1 的 12.1.1.1 ，产生了次优路由。正确路径的下一跳应是 R3 的 23.1.1.3 。 产生这条次优路由的原因是 R1 进行的重分发，产生 5 类 LSA 传递到 R2 上，最终 Cisco 路由器根据对比管理距离大小选择加载了 OSPF (110) 的路由。 既然知道了加载这条路由的原因，解决方法有：1、阻断重分发而来的 LSA ，使 R2 自始至终只有 RIP 的路由，这么做虽然能临时使 R2 选择最优路径，但是当 R2 和 R3 之间的链路出现问题，通过 R2 去往 10.0.0.0 外部网络将不可达，不是一个好方法；2、修改 OSPF 外部路由的管理距离，使之大于 RIP （120），这样处理就可以使 R2 选择加载 RIP 学习到的路由，这是可行的。 123456789101112! -- 方式 1 ，定义 ACL 匹配外部网络，在 OSPF 进程下针对该 ACL 修改管理距离!access-list 10 permit 10.0.0.0 0.255.255.255!router ospf 100 distance 121 0.0.0.0 255.255.255.255 10!! -- 方式 2 ，直接在 OSPF 进程下针对外部网络修改管理距离!router ospf 100 distance ospf external 121! 无论使用哪种方式，都会得到下图所示路由表。 Part 2多点单向重分发 下图所示 ，在 R1 和 R2 上进行单向重分发（RIP 重分发进入 OSPF）。 观察 R2 上的路由表发现去往 RIP 外部网络 10.0.0.0 的路由下一跳地址是 R1 的 12.1.1.1 ，产生了次优路由。正确路径的下一跳应是 R3 的 23.1.1.3 。R1 上执行 clear ip ospf redistribution 命令，再观察 R1 路由表发现去往 RIP 外部网络 10.0.0.0 的路由下一跳地址是 R1 的 12.1.1.2 ，产生了次优路由。正确路径的下一跳应是 R3 的 13.1.1.3 。 产生次优路由的原因和 Part 1 中是类似的，解决方法类似。 Part 3多点多向重分发 下图所示 ，在 R1 和 R2 上进行双向重分发。 观察 R1 和 R2 去往 EIGRP 外部网络 192.168.1.0 和 192.168.2.0 的路由表项，发现 R1 上去往外部网络路径下一跳是 R2 ，R2 上去往外部网络路径下一跳是 R1 ，出现了次优路由和路由环路。 产生上述问题的原因是，在 R1 上把 EIGRP 重分发进 OSPF ，R2 上又把重分发进 OSPF 的路由重分发回 EIGRP ，R1 上收到 R2 和 R3 发过来关于 192.168.1.0/192.168.2.0 的外部路由更新，对比度量值后，选取度量值小的加载到路由表。R1 上查看输出： 解决方法：阻断重分发进对方路由域的路由更新再次重分发回原路由域 。定义名称为 in2ospf 的 route-map ，序号 10 的语句对匹配 TAG 为 100 的路由条目拒绝重分发；序号 20 的语句对 TAG 不是 100 的路由条目设置 TAG 为 200 。定义名称为 in2eigrp 的 route-map ，序号 10 的语句对匹配 TAG 为 200 的路由条目拒绝重分发；序号 20 的语句对 TAG 不是 200 的路由条目设置 TAG 为 100 。 12345678910111213141516171819202122! -- R2 上定义 route-map ，R1 上也做这样的操作!route-map in2ospf deny 10 match tag 100!route-map in2ospf permit 20 set tag 200!route-map in2eigrp deny 10 match tag 200!route-map in2eigrp permit 20 set tag 100!! -- 重分发时调用 route-map ，R1 上也做这样的操作!router eigrp 100 redistribute ospf 100 metric 10000 100 255 1 1500 route-map in2eigrp!router ospf 100 redistribute eigrp 100 metric 100 subnets route-map in2ospf! 还可以使用更精简的方式 12345678910111213141516! -- R2 上定义 route-map ，R1 上也做这样!route-map R-TAGS deny 10 match tag 100!route-map R-TAGS permit 20 set tag 100!! -- 重分发时调用 route-map ，R1 上也做这样的操作!router eigrp 100 redistribute ospf 100 metric 10000 100 255 1 1500 route-map R-TAGS!router ospf 100 redistribute eigrp 100 metric 100 subnets route-map R-TAGS! 做完以上步骤后，查看 R1 和 R2 的路由表，发现环路路由问题解决了，但是还存在次优路由。 修改 OSPF 外部路由的管理距离，使之大于 EIGRP 外部路由 （170），这样处理就可以使路由器选择加载 EIGRP 学习到的外部路由。 12345678910111213! -- 方式 1 ，定义 ACL 匹配外部网络，在 OSPF 进程下针对该 ACL 修改管理距离!access-list 10 permit 192.168.1.0 0.0.0.255access-list 10 permit 192.168.2.0 0.0.0.255!router ospf 100 distance 171 0.0.0.0 255.255.255.255 10!! -- 方式 2 ，直接在 OSPF 进程下针对外部网络修改管理距离!router ospf 100 distance ospf external 171! 最终解决问题 Ending 做路由重分发的时候要考虑到操作后是否产生环路路由、次优路由和网络不可达的情况。 对于产生环路路由、次优路由和网络不可达的情况，要是合理使用 route-map、修改管理距离等手段修正。 当然合理的规划网络也很重要。必要的进行路由汇总，设置 passive-interface ……，使设备路由表尽可能的精简而又能高效的完成转发工作，这是很好的思路。 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 欢迎“来电”来函探讨。","link":"/posts/1b6d0fec.html"},{"title":"IPv6 各隧道Tunnel使用Lab","text":"最近看了很多关于 IPv6 的内容。老早前，大概2000年前后运营商就开始研究推进发展 IPv6 网络技术了，可能是是由于某些我等不知道的原因，这个推进的进程所演化出的表象让我等普通网民没什么感觉。部分科研机构、高校、金融、IT 大厂已经在使用了，一个比较大的使用群体也就是家用部分普及的不大开（我猜的，没有依据）。 IPv6 相对于 IPv4 有种种的优势，我最有印象的几个是没有广播这个概念、“真 万物互联”、良好的包扩展结构，相对于 IPv4 不存在把什么什么封装进 IPv4 头部后面的字节……巴拉巴拉 既然是实验，先上图： Start介绍一下这个拓扑包含的内容： A head 部分 从运营商处申请到 240E:0:0:1500::/60 前缀，互联地址为静态 IPv6 ：240E:0:0:15:: PC 网关在 SW19 / SW20，配置负载分担 （HSRP）；使用 MST ；PC 地址为无状态获取，同时获取除地址外的其他 DHCP 参数 核心交换机与 R5 运行 OSPFv3, A head 和 A branch1 / A branch2 组建基于 IPv6 的 DMVPN (mGRE) A branch1 部分 从运营商处申请到 2409:0:0:2600::/60 前缀，互联地址为静态 IPv6 2409:0:0:26:: A branch2 / B head 部分 使用 PPPOE 拨号接入 ISP ，WAN 动态 IPv6 地址，并且获取到 PD 用于内部网络 其他站点如图所示 R3 为 ISP IPv4 接入路由器，连接 R3 的三个站点除配置了 Tunnel 外，还支持 NAT 访问互联网 为什么是就配置了这三个站点的 NAT，因为本人电脑内存不够（运行 NAT 的路由器要分配更多内存） 6RD 的站点内部为 IPv6 网络 IPv6 Over IPv4 的 站点互通配置了静态或者动态路由协议 为了测试，ISP 网络中均配置了环回接口的 IPv4/IPv6 地址，例如： R2 interface Loopback0 ip address 10.2.2.2 255.255.255.255 ipv6 address 2008::2/128 除 Manual 和 GRE Tunnel 外，站点所有 IPv6 地址均可互通 Design &amp; ConfigurationNote：ISP Network 内部运行 OSPF/OSPFv3，不展开说明。 A head 配置12345678910111213141516171819202122232425262728293031323334353637383940414243! -- R5!interface Loopback0 ip address 10.5.5.5 255.255.255.255 ipv6 address FD00::5/128 // 惟一本地地址，不可在互联上路由 ipv6 enable ipv6 ospf 100 area 0! interface Ethernet0/0 ipv6 address 240E:0:0:15::5/64 // 与 ISP 互联地址 ipv6 enable!interface Ethernet0/1 ipv6 enable ipv6 ospf 100 area 0 ipv6 ospf network point-to-point!interface Ethernet0/2 ipv6 enable ipv6 ospf 100 area 0 ipv6 ospf network point-to-point! ipv6 router ospf 100 router-id 10.5.5.5 default-information originate // OSPFv3 下发默认路由!ipv6 route ::/0 240E:0:0:15::1 // 指向 ISP 的默认路由! -- DMVPN interface Tunnel1 description DMVPN_HUB no ip address ipv6 address FD00:A::1/64 ipv6 eigrp 90 ipv6 nhrp network-id 100 tunnel source Ethernet0/0 tunnel mode gre multipoint ipv6!ipv6 router eigrp 90 // HUB 与 SPOKE 之间运行 EIGRP,IPv6 multicast over mGRE tunnel is not supported. neighbor FE80::A8BB:CCFF:FE00:600 Tunnel1 // 手动指邻居 neighbor FE80::A8BB:CCFF:FE00:700 Tunnel1 // 手动指邻居 eigrp router-id 10.5.5.5 redistribute ospf 100 metric 10000 100 255 1 1500 // 重分布 OSPF 进 EIGRP 便于分支站点访问总部网络! 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081! -- SW19!ipv6 dhcp pool O-POOL // DHCP 参数 dns-server 2008::1 dns-server 2008::2 domain-name a.com!spanning-tree mode mst // mst 配置spanning-tree mst configuration name a.com.hub revision 2 instance 10 vlan 10 instance 20 vlan 20!spanning-tree mst 10 priority 24576 // 实例 10 的主根桥spanning-tree mst 20 priority 28672 // 实例 20 的备根桥!interface Loopback0 ip address 10.19.19.19 255.255.255.255 ipv6 address FD00::19/128 ipv6 ospf 100 area 0! interface Port-channel1 // SW19 SW20 之间的端口聚合 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk!interface Ethernet0/0 switchport access vlan 519 // 与 R5 互联端口!interface Ethernet0/1 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk!interface Ethernet0/2 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk channel-group 1 mode active!interface Ethernet0/3 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk channel-group 1 mode active!interface Vlan10 no ip address standby version 2 // HSRP 配置 standby 10 ipv6 autoconfig standby 10 priority 120 // 优先级120，设置为 Active 端 standby 10 preempt delay minimum 30 // 抢占延迟 30s ipv6 address 240E:0:0:1501::1/64 ipv6 enable ipv6 nd other-config-flag // O 位 ipv6 dhcp server O-POOL // 分配给终端 DHCP 其他参数 ipv6 ospf 100 area 0 ipv6 ospf network point-to-point!interface Vlan20 no ip address standby version 2 standby 20 ipv6 autoconfig standby 20 preempt delay minimum 30 ipv6 address 240E:0:0:1502::1/64 ipv6 enable ipv6 nd other-config-flag ipv6 dhcp server O-POOL ipv6 ospf 100 area 0 ipv6 ospf network point-to-point!interface Vlan519 // 与 R5 互联建立 OSPFV4 邻居 no ip address ipv6 enable ipv6 ospf 100 area 0 ipv6 ospf network point-to-point!ipv6 router ospf 100 router-id 10.19.19.19 ! 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778! -- SW20!ipv6 dhcp pool O-POOL dns-server 2008::1 dns-server 2008::2 domain-name a.com!spanning-tree mode mstspanning-tree extend system-id!spanning-tree mst configuration name a.com.hub revision 2 instance 10 vlan 10 instance 20 vlan 20!spanning-tree mst 10 priority 28672spanning-tree mst 20 priority 24576!interface Loopback0 ip address 10.20.20.20 255.255.255.255 ipv6 address FD00::20/128 ipv6 ospf 100 area 0!interface Port-channel1 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk!interface Ethernet0/0 switchport access vlan 520!interface Ethernet0/2 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk channel-group 1 mode passive!interface Ethernet0/3 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk channel-group 1 mode passive!interface Vlan10 no ip address standby version 2 standby 10 ipv6 autoconfig standby 10 preempt delay minimum 30 ipv6 address 240E:0:0:1501::2/64 ipv6 enable ipv6 nd other-config-flag ipv6 dhcp server O-POOL ipv6 ospf 100 area 0 ipv6 ospf network point-to-point!interface Vlan20 no ip address standby version 2 // HSRP 配置 standby 20 ipv6 autoconfig standby 20 priority 120 // 优先级120，设置为 Active 端 standby 20 preempt delay minimum 30 // 抢占延迟 30s ipv6 address 240E:0:0:1502::2/64 ipv6 enable ipv6 nd other-config-flag ipv6 dhcp server O-POOL ipv6 ospf 100 area 0 ipv6 ospf network point-to-point!interface Vlan520 no ip address ipv6 enable ipv6 ospf 100 area 0 ipv6 ospf network point-to-point!ipv6 router ospf 100 router-id 10.20.20.20! 12345678910111213141516171819202122232425! -- SW21!spanning-tree mode mstspanning-tree mst configuration name a.com.hub revision 2 instance 10 vlan 10 instance 20 vlan 20!interface Ethernet0/0 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk!interface Ethernet0/1 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk!interface Ethernet0/2 switchport access vlan 10!interface Ethernet0/3 switchport access vlan 20! A branch1 配置12345678910111213141516171819202122232425262728293031323334353637383940! -- R6!ipv6 dhcp pool O-POOL dns-server 2008::1 dns-server 2008::2 domain-name a.com!interface Tunnel1 // DMVPN description DMVPN_BRANCH_1 no ip address ipv6 address FD00:A::2/64 ipv6 eigrp 90 // EIGRP 启用 ipv6 nhrp map FD00:A::1/64 240E:0:0:15::5 // 映射 FD00:A::1 R5 的公网 IPv6 地址 ipv6 nhrp map multicast 240E:0:0:15::5 ipv6 nhrp network-id 100 ipv6 nhrp nhs FD00:A::1 tunnel source Ethernet0/0 tunnel mode gre multipoint ipv6!interface Ethernet0/0 no ip address duplex auto ipv6 address 2409:0:0:26::6/64 ipv6 address autoconfig default //生成指向 ISP 默认路由 ipv6 enable!interface Ethernet0/1 no ip address duplex auto ipv6 address 2409:0:0:2600::6/64 ipv6 enable ipv6 nd other-config-flag ipv6 eigrp 90 // EIGRP 启用 ipv6 dhcp server O-POOL!ipv6 router eigrp 90 //运行 EIGRP,IPv6 multicast over mGRE tunnel is not supported. neighbor FE80::A8BB:CCFF:FE00:500 Tunnel1 // 手动指邻居 neighbor FE80::A8BB:CCFF:FE00:700 Tunnel1 // 手动指邻居 eigrp router-id 10.6.6.6! A branch2 / B head 配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788! -- R7!ipv6 dhcp pool O-POOL dns-server 2008::1 dns-server 2008::2 domain-name a.com!interface Tunnel1 // DMVPN description DMVPN_BRANCH_2 no ip address ipv6 address FD00:A::3/64 ipv6 eigrp 90 // EIGRP 启用 ipv6 nhrp map FD00:A::1/64 240E:0:0:15::5 ipv6 nhrp map multicast 240E:0:0:15::5 ipv6 nhrp network-id 100 ipv6 nhrp nhs FD00:A::1 tunnel source Dialer1 // 出接口为 Dialer tunnel mode gre multipoint ipv6!interface Ethernet0/0 no ip address duplex auto pppoe enable group global pppoe-client dial-pool-number 1!interface Ethernet0/1 no ip address duplex auto ipv6 address INTRA_PD ::7/64 // 使用获取到的前缀配置接口IPv6地址 ipv6 enable ipv6 nd other-config-flag ipv6 eigrp 90 // EIGRP 启用 ipv6 dhcp server O-POOL // DHCP 参数下发!interface Dialer1 // PPPOE 拨号 mtu 1492 no ip address encapsulation ppp dialer pool 1 dialer-group 1 ipv6 address dhcp ipv6 address autoconfig default ipv6 enable ipv6 mtu 1492 ipv6 dhcp client pd INTRA_PD //获取前缀，命名 INTRA_PD ppp authentication pap callin ppp pap sent-username user1 password 0 user1!ipv6 router eigrp 90 // 运行 EIGRP,IPv6 multicast over mGRE tunnel is not supported. neighbor FE80::A8BB:CCFF:FE00:500 Tunnel1 // 手动指邻居 neighbor FE80::A8BB:CCFF:FE00:600 Tunnel1 // 手动指邻居 eigrp router-id 10.7.7.7!-----------------------------------------------------------------------------------------! -- R8ipv6 dhcp pool O-POOL dns-server 2008::1 dns-server 2008::2 domain-name b.com!interface Ethernet0/0 no ip address duplex auto pppoe enable group global pppoe-client dial-pool-number 1!interface Ethernet0/1 no ip address duplex auto ipv6 address INTRA_PD ::8/64 ipv6 enable ipv6 nd other-config-flag ipv6 dhcp server O-POOL // DHCP 参数下发!interface Dialer1 mtu 1492 no ip address encapsulation ppp dialer pool 1 dialer-group 1 ipv6 address dhcp ipv6 address autoconfig default ipv6 enable ipv6 mtu 1492 ipv6 dhcp client pd INTRA_PD ppp authentication pap callin ppp pap sent-username user2 password 0 user2! 1234567891011121314151617181920212223242526272829303132333435363738! -- R2 PPPOE SERVER!ipv6 dhcp pool DHCPV6POOL //配置 PD 池 prefix-delegation pool POOL-2!username user1 password 0 user1 // 用于 PPPOE 拨号认证username user2 password 0 user2 // 用于 PPPOE 拨号认证!bba-group pppoe GROUP-1 virtual-template 1 // 绑定模版1!interface Loopback11 // 这个地址用于复用，不知道Cisco为什么这般设计，直接在模版下配不就行了 no ip address ipv6 address 2409:0:0:2::2/60 ipv6 enable!interface Ethernet0/1 no ip address duplex auto ipv6 enable pppoe enable group GROUP-1 // 调用!interface Virtual-Template1 description PPPOE-GROUP-1 mtu 1492 no ip address peer default ipv6 pool PPPOE-PEER-POOL // 为拨号客户端对端配置 IPv6 的地址 ipv6 unnumbered Loopback11 // 复用 ipv6 enable ipv6 mtu 1492 ipv6 nd managed-config-flag no ipv6 nd ra suppress ipv6 dhcp server DHCPV6POOL // PD 下发 ppp authentication pap!ipv6 local pool POOL-2 2409:0:0:2780::/60 64ipv6 local pool PPPOE-PEER-POOL 2409:0:0:2220::/60 64! ISATAP Tunnel1234567891011121314151617181920212223! -- R9!interface Tunnel1 // ISATAP Tunnel no ip address no ip redirects ipv6 address 2409:0:0:2900::/64 eui-64 ipv6 enable no ipv6 nd ra suppress tunnel source Ethernet0/1 tunnel mode ipv6ip isatap!interface Ethernet0/0 no ip address duplex auto ipv6 address 2409:0:0:29::9/64 ipv6 enable! interface Ethernet0/1 ip address 192.168.9.254 255.255.255.0 duplex auto!ipv6 route ::/0 2409:0:0:29::2! GRE Tunnel12345678910111213141516171819202122232425! -- R15!interface Tunnel1 // GRE Tunnel no ip address ipv6 enable ipv6 ospf 100 area 0 tunnel source Ethernet0/0 tunnel destination 200.1.103.10 // R10 WAN 地址!interface Ethernet0/0 ip address 200.1.154.15 255.255.255.0 duplex auto!interface Ethernet0/1 ip address 192.168.15.254 255.255.255.0 duplex auto ipv6 address FD00:F::F/64 // 惟一本地地址 ipv6 enable ipv6 ospf 100 area 0!ip route 0.0.0.0 0.0.0.0 200.1.154.4!ipv6 router ospf 100 router-id 10.15.15.15! 1234567891011121314151617181920212223242526272829303132! -- R10! interface Tunnel1 // GRE Tunnel no ip address ipv6 enable ipv6 ospf 100 area 0 tunnel source Ethernet0/0 tunnel destination 200.1.154.15 // R15 WAN 地址!interface Ethernet0/0 ip address 200.1.103.10 255.255.255.0 ip nat outside ip virtual-reassembly in duplex auto!interface Ethernet0/1 ip address 192.168.10.254 255.255.255.0 ip nat inside ip virtual-reassembly in duplex auto ipv6 address FD00:A::A/64 // 惟一本地IPv6地址 ipv6 enable ipv6 ospf 100 area 0!ip nat inside source list 10 interface Ethernet0/0 overload // IPv4 NATip route 0.0.0.0 0.0.0.0 200.1.103.3!ipv6 router ospf 100 router-id 10.10.10.10!access-list 10 permit 192.168.10.0 0.0.0.255! 6to4 Tunnel and Realy1234567891011121314151617181920212223242526! -- R14 !interface Tunnel1 // 6to4 Tunnel no ip address no ip redirects ipv6 unnumbered Ethernet0/0 ipv6 enable tunnel source Ethernet0/0 tunnel mode ipv6ip 6to4!interface Ethernet0/0 ip address 200.1.144.14 255.255.255.0 duplex auto ipv6 address 2408:0:0:E4::E/64 // 与 R4 互联的 IPv6 地址!interface Ethernet0/1 no ip address duplex auto ipv6 address 2002:C801:900E::E/64 // 6to4 地址 ipv6 enable!ip route 0.0.0.0 0.0.0.0 200.1.144.4!ipv6 route 2002::/16 Tunnel1 // 站点互通ipv6 route ::/0 2408:0:0:E4::4 // 访问 ISP IPv6 网络! 12345678910111213141516171819202122232425262728293031! -- R11!interface Tunnel1 // 6to4 Tunnel no ip address no ip redirects ipv6 enable tunnel source Ethernet0/0 tunnel mode ipv6ip 6to4!interface Ethernet0/0 ip address 200.1.113.11 255.255.255.0 ip nat outside ip virtual-reassembly in duplex auto!interface Ethernet0/1 ip address 192.168.11.254 255.255.255.0 ip nat inside ip virtual-reassembly in duplex auto ipv6 address 2002:C801:710B::B/64 // 6to4 地址 ipv6 enable!ip nat inside source list 10 interface Ethernet0/0 overload // IPv4 NATip route 0.0.0.0 0.0.0.0 200.1.113.3!ipv6 route 2002::/16 Tunnel1 // 站点互通ipv6 route ::/0 2002:C801:900E::E // 访问IPv6 互联 下一跳 到 R14 中继 转发!access-list 10 permit 192.168.11.0 0.0.0.255! Manual Tunnel12345678910111213141516171819202122232425! -- R13!interface Tunnel1 // Manual Tunnel no ip address ipv6 enable ipv6 rip RIPNG enable // 启用 RIPNG tunnel source Ethernet0/0 tunnel mode ipv6ip tunnel destination 200.1.123.12!interface Ethernet0/0 ip address 200.1.134.13 255.255.255.0 duplex auto!interface Ethernet0/1 no ip address duplex auto ipv6 address FC00:D::D/64 // 惟一本地IPv6地址 ipv6 enable ipv6 rip RIPNG enable // 启用 RIPNG!ip route 0.0.0.0 0.0.0.0 200.1.134.4!ipv6 router rip RIPNG // 站点互通 RIPNG! 1234567891011121314151617181920212223242526272829303132! -- R12!interface Tunnel1 // Manual Tunnel no ip address ipv6 enable ipv6 rip RIPNG enable // 启用 RIPNG tunnel source Ethernet0/0 tunnel mode ipv6ip tunnel destination 200.1.134.13!interface Ethernet0/0 ip address 200.1.123.12 255.255.255.0 ip nat outside ip virtual-reassembly in duplex auto!interface Ethernet0/1 ip address 192.168.12.254 255.255.255.0 ip nat inside ip virtual-reassembly in duplex auto ipv6 address FC00:C::C/64 // 惟一本地IPv6地址 ipv6 enable ipv6 rip RIPNG enable!ip nat inside source list 10 interface Ethernet0/0 overload // IPv4 NATip route 0.0.0.0 0.0.0.0 200.1.123.3!ipv6 router rip RIPNG // 站点互通 RIPNG!access-list 10 permit 192.168.12.0 0.0.0.255! 6RD Tunnel123456789101112131415161718192021222324252627282930! -- R16!ipv6 general-prefix 6RD 6rd Tunnel1 // 从Tunnel 1 获取 ISP 通用前缀 命名为6RD!interface Tunnel1 // 6RD Tunnel no ip address no ip redirects ipv6 address 6RD ::/128 // 通过命名为6RD 的通用前缀构建 IPv6 地址 ipv6 enable tunnel source Ethernet0/0 tunnel mode ipv6ip 6rd // 模式 tunnel 6rd ipv4 prefix-len 16 // IPv4 通用前缀 ，不设置通用后缀 tunnel 6rd prefix 2408:1617::/32 //ISP 设定的 IPv6 前缀 tunnel 6rd br 200.1.4.4 // BR 地址，位于 ISP!interface Ethernet0/0 ip address 200.1.164.16 255.255.255.0 duplex auto!interface Ethernet0/1 no ip address duplex auto ipv6 address 2408:1617:A410:F::F/64 // 通过 ISP 设定的前缀 + IPv4 通用前缀构造，IPv4通用前缀占去16位，而通用后缀没有设置，所以就是164.16，转16进制 ipv6 enable!ip route 0.0.0.0 0.0.0.0 200.1.164.4!ipv6 route 2408:1617::/32 Tunnel1 // 站点互访ipv6 route ::/0 Tunnel1 2408:1617:404:: // 访问 IPv6 互联网! 123456789101112131415161718192021222324252627282930! -- R17!ipv6 general-prefix 6RD 6rd Tunnel1!interface Tunnel1 no ip address no ip redirects ipv6 address 6RD ::/128 ipv6 enable tunnel source Ethernet0/0 tunnel mode ipv6ip 6rd tunnel 6rd ipv4 prefix-len 16 tunnel 6rd prefix 2408:1617::/32 tunnel 6rd br 200.1.4.4!interface Ethernet0/0 ip address 200.1.174.17 255.255.255.0 duplex auto!interface Ethernet0/1 no ip address duplex auto ipv6 address 2408:1617:AE11:11::11/64 // // 通过 ISP 设定的前缀 + IPv4 通用前缀构造，IPv4通用前缀占去16位，而通用后缀没有设置，所以就是174.17，转16进制 ipv6 enable!ip route 0.0.0.0 0.0.0.0 200.1.174.4!ipv6 route 2408:1617::/32 Tunnel1ipv6 route ::/0 Tunnel1 2408:1617:404::! 12345678910111213141516171819! -- R4!ipv6 general-prefix 6RD 6rd Tunnel1!interface Loopback1 ip address 200.1.4.4 255.255.255.255!interface Tunnel1 no ip address no ip redirects ipv6 address 6RD ::/128 ipv6 enable tunnel source Loopback1 // 指定源，6RD 网络 IPv4 可达，还有一种说法是，可以配置anycast，6RD 网络就近访问 tunnel mode ipv6ip 6rd tunnel 6rd ipv4 prefix-len 16 tunnel 6rd prefix 2408:1617::/32!ipv6 route 2408:1617::/32 Tunnel1 // 站点访问IPv6 网络 返回流量! Test &amp; ObservationPC 23 ping PC 24 ping R5 Loopback0 ping 位于 ISP Network 的 R3 Loopback0 ping 位于 A branch1 的 PC 25 ping 位于 B head 的 PC 26 ping 位于 6to4 Tunnel site2 的 PC 28 ping 位于 6RD Tunnel site1 的 PC 30 PC 25 ping 位于 A head 的 PC 24 ping 位于 A branch2 的 E0/1 接口 PC 26 ping 位于 ISP Network 的 R4 Loopback0 ping 位于 A head 的 PC 24 ping 位于 6RD Tunnel site1 的 PC 30 PC 27 ping GRE Tunnel site1 的 E0/1 接口 ping 位于 ISP Network 的 R1 Loopback0 （IPv4） PC 28 ping 位于 6to4 Tunnel site1 E0/1 接口 ping 位于 ISP Network 的 R1 Loopback0 （IPv6） ping 位于 ISP Network 的 R1 Loopback0 （IPv4） PC 29 ping 位于 Manual Tunnel site1 E0/1 接口 ping 位于 ISP Network 的 R1 Loopback0 （IPv4） PC 30 ping 位于 6RD Tunnel site2 E0/1 接口 ping 位于 ISP Network 的 R1 Loopback0 （IPv6） Ending 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 配置存阿里云盘了，这是链接：[分享的文件] 欢迎“来电”来函探讨。","link":"/posts/2e964a67.html"},{"title":"来自非网管交换机的教训","text":"来自 以太网帧格式 以太帧类型 以太帧有很多种类型。不同类型的帧具有不同的格式和MTU值。但在同种物理媒体上都可同时存在。 以太网第二版[note 3] 或者称之为Ethernet II 帧，DIX帧，是最常见的帧类型。并通常直接被IP协议使用。 Novell的非标准IEEE 802.3帧变种。 IEEE 802.2 逻辑链路控制 (LLC) 帧 子网接入协议(SNAP)帧 所有四种以太帧类型都可包含一个IEEE 802.1Q选项来确定它属于哪个 VLAN 以及他的IEEE 802.1p优先级(QoS)。这个封装由IEEE 802.3ac定义并将帧大小从64字节扩充到1522字节(注：不包含7个前导字节和1个字节的帧开始符以及12个帧间距字节)。 IEEE 802.1Q标签，如果出现，需要放在源地址字段和以太类型或长度字段的中间。这个标签的前两个字节是标签协议标识符(TPID)值0x8100。这与没有标签帧的以太类型/长度字段的位置相同，所以以太类型0x8100就表示包含标签的帧，而实际的以太类型/长度字段则放在Q-标签的后面。TPID后面是两个字节的标签控制信息(TCI)。(IEEE 802.1p 优先级(QoS)和 VLAN ID)。Q标签后面就是通常的帧内容。 Ethernet II 以太 II 帧 (也称作DIX以太网，是以这个设计的主要成员，DEC,Intel和Xerox的名字命名的。[1]),把紧接在目标和源MAC地址后面的这个两字节定义为以太网帧数据类型字段。 例如，一个0x0800的以太类型说明这个帧包含的是IPv4数据报。同样的，一个0x0806的以太类型说明这个帧是一个ARP帧，0x8100说明这是一个IEEE 802.1Q帧，而0x86DD说明这是一个IPv6帧。 当这个工业界的标准通过正式的IEEE标准化过程后，在802.3标准中以太类型字段变成了一个(数据)长度字段。(最初的以太包通过包括他们的帧来确定它们的长度，而不是以一个明确的数值。)但是包的接收层仍需知道如何解析包，因此标准要求将IEEE802.2头跟在长度字段后面，定义包的类型。多年之后，802.3x-1997标准，一个802.3标准的后继版本，正式允许两种类型的数据包同时存在。实际上，两种数据包都被广泛使用，而最初的以太数据包在以太局域网中被广泛应用，因为他的简便和低开销。 为了允许一些使用以太II版本的数据报和一些使用802.3封装的最初版本的数据包能够在同一个以太网段使用，以太类型值必须大于等于1536(0x0600)。这个值比802.3数据包的最大长度1500byte (0x05DC)要更大。因此如果这个字段的值大于等于1536，则这个帧是以太II帧，而那个字段是类型字段。否则(小于1500而大于46字节)，他是一个IEEE 802.3帧，而那个字段是长度字段。1500～1536(不包含)的数值未定义。[2] Part 2前阵子去处理一个无线局域网的接入故障问题，组网结构是二层旁挂隧道转发组网，反映的问题是无线终端接入慢，甚至连接不上 WIFI，在查看了设备后，发现有大量的无线终端获取不到IP地址，我想问题的根本在此。组网结构如上图，AP地址段 VLAN 和 STA 地址段 VLAN 不同，AP 的 STA 的 DHCP server 在汇聚交换机上（DHCP 的网关均设置在汇聚交换机上？），汇聚连接各楼层的非网管 PoE 交换机，查看了汇聚交换机配置，虽说是隧道转发，但连接楼层交换机的接口全放行了业务 STA 的 VLAN（我觉得这是个错误配置）， 决定改直接转发，扩大 STA 地址池范围，修改租期为更短时间，手动调优一次（该单位因装修调整过线路和AP，再加上AP布放相当不合理（壁挂安装，楼层里 AP 相隔两三米斜对角线安装）） 修改完配置后，问题更大了，仅有少数无线终端能获取IP正常接入，绝大多无线终端无法接入无线网络，长时间处在获取 IP 地址，然而修改成隧道转发后，可正常接入。最终排查出最大的可能性是这非网管交换机的问题，无法转发透传包含两个及以上的 802.1Q 的数据帧到汇聚交换机，这就触及本人知识盲区了，折腾了许久。 接下来有两种方案，一是修改 AP 和 STA 的地址网段和 VLAN 为同一个，二是还是使用隧道转发，第一个方案改动太大了，最终使用第二方案。 回来后一顿搜索非网管交换机的工作原理，有说非网管交换机所有口都是属于 VLAN 1 的说法，这简直是胡说八道的。有说能否转发带 VLAN tag 数据和该交换机支持转发的最大传输单元（MTU）有关系，我查了各大非网管交换机的特性参数，均没有提及这一个参数。理论上这个参数确实会影响转发，就是说非网管交换机设定了一个转发的最大帧长度，当交换机接收到大于这个设定的帧长度就丢弃不转发，毕竟支持更大帧转发意味着消耗更多的硬件资源，基于成本控制我是可以理解硬件厂商这么做的原因。而且像 Jambo frame 这种格式在我接触到的项目中毕竟小众，使用场景比标准的802.3要少的多。 也翻看了一些做了测试的网站文章，也没有一个定论说肯定支持转发或不支持转发802.1q的数据帧，看多了都使我抑郁了，更多的是论坛下的一些讨论。 长教训了，这哪怕换成工作在物理层的 HUB 都能正常工作，反而……，看来将来再遇到这种非网管PoE交换机接入的情况要相当注意了，别再踩坑了。 还有个别 AP 未上线问题，查看原因 Negotiation CAPWAP tunnel failed ，就去检查物理线路吧，特别是使用光收发这种设备的，【能不能通，能通有丢包，AP就是不上线】 Ending 文中可能有些内容术语表述的不规范，请见谅。 欢迎“来电”来函探讨。","link":"/posts/e906be86.html"},{"title":"BGP综合实验拓扑","text":"在B站看了一个UP主（155和150）上传的视频，感觉挺有意思的，就搭拓扑玩一玩。现在这个视频已经不见了，视频里使用的eNSP模拟器搭建的，我用PNET搭建，模拟器类型不关键。已经删减了一些内容，并加了一些实验需求。 实验主要涉及到的BGP技术的运用，包括有BGP邻居建立、路由加载、路由传递、BGP联盟、路由聚合、路由拆分、团体属性、路由选路、正则表达式、路由过滤、BGP特性、路由阻尼等。 拓扑如图： 实验需求BGP邻居建立 eBGP之间使用接口建立(联盟内部子AS eBGP除外)，iBGP使用环回接口Lo0建立 R2、R7、R9使用对等体组方式配置 R4、R7、R9为路由反射器 BGP路由加载 R5将ISIS重分布进BGP，R6、R7、R8将ISIS重分布进BGP 1234567R5router bgp 64100 redistribute isis level-1R6、R7、R8router bgp 64200 redistribute isis level-2 R5能够正常接收到100.1.1.X的路由，R4不能使用next-hop-self 12345R4route-map SET_NH permit 10 set ip next-hop 120.1.4.4router bgp 64100 neighbor iBGP route-map SET_NH out BGP路由传递 100.1.1.x之间可以通信 123456R3neighbor 200.1.103.10 as-overrideR6neighbor 200.1.116.11 as-overrideR7neighbor 200.1.127.12 as-override R3、R6、R7针对AS 64520移除私有AS号 123456789R3router bgp 64100 neighbor 200.1.103.10 remove-private-as all replace-asR6router bgp 64200 neighbor 200.1.116.11 remove-private-as all replace-asR7router bgp 64200 neighbor 200.1.127.12 remove-private-as all replace-as AS 64540 内部联邦配置 1234567891011121314151617181920212223242526272829303132333435R11router bgp 64530 bgp log-neighbor-changes bgp confederation identifier 64540 bgp confederation peers 64531 neighbor 100.1.1.12 remote-as 64531 neighbor 100.1.1.12 disable-connected-check neighbor 100.1.1.12 update-source Loopback0 neighbor 100.1.1.12 next-hop-self neighbor 200.1.116.6 remote-as 64200 R12router bgp 64531 bgp log-neighbor-changes bgp confederation identifier 64540 bgp confederation peers 64530 redistribute eigrp 90 neighbor 100.1.1.11 remote-as 64530 neighbor 100.1.1.11 disable-connected-check neighbor 100.1.1.11 update-source Loopback0 neighbor 100.1.1.11 next-hop-self neighbor 100.1.1.13 remote-as 64531 neighbor 100.1.1.13 update-source Loopback0 neighbor 100.1.1.13 next-hop-self neighbor 200.1.127.7 remote-as 64200 R13router bgp 64531 bgp log-neighbor-changes bgp confederation identifier 64540 network 111.1.2.0 mask 255.255.255.0 network 111.1.3.0 mask 255.255.255.0 aggregate-address 111.1.0.0 255.255.0.0 as-set summary-only neighbor 100.1.1.12 remote-as 64531 neighbor 100.1.1.12 update-source Loopback0 BGP路由聚合、路由拆分 R5、R6、R7、R8对AS内的互联地址与主机路由汇总为子网掩码为16位的聚合路由（例如：120.1.0.0/16），并防止路由回愦 12345678R5router bgp 64100 aggregate-address 123.1.0.0 255.255.0.0 as-set summary-only aggregate-address 120.1.0.0 255.255.0.0 as-set summary-onlyR6、R7、R8router bgp 64200 aggregate-address 145.1.0.0 255.255.0.0 as-set summary-only aggregate-address 140.1.0.0 255.255.0.0 as-set summary-only R5的汇总主机路由，不抑制120.1.4.4/32和 120.1.5.5/32 123456789R5ip prefix-list UNSUPPRESS seq 5 permit 120.1.4.4/32ip prefix-list UNSUPPRESS seq 10 permit 120.1.5.5/32route-map UNSUPPRESS permit 10 match ip address prefix-list UNSUPPRESSrouter bgp 64100 neighbor 120.1.4.4 unsuppress-map UNSUPPRESS R6、R7、R8的汇总主机路由，仅抑制145.1.9.9/32 ，并调整聚合路由起源属性为 igp 12345678910R6、R7、R8ip prefix-list SUPPRESS seq 5 permit 140.1.9.9/32route-map SUPPRESS permit 10 match ip address prefix-list SUPPRESSroute-map SET_IGP permit 10 set origin igprouter bgp 64200 aggregate-address 140.1.0.0 255.255.0.0 as-set summary-only attribute-map SET_IGP suppress-map SUPPRESS R1去往111.1.0.0/24和111.1.1.0/24下一跳走R5；R2去往111.1.2.0/24和111.1.3.0/24下一跳走R8 1234567891011121314151617181920212223242526272829303132R1ip prefix-list SOURCE_AS64100 seq 5 permit 200.1.15.5/32ip prefix-list huizong seq 5 permit 111.1.0.0/16ip prefix-list mingxi seq 5 permit 111.1.0.0/24ip prefix-list mingxi seq 10 permit 111.1.1.0/24route-map mingxi permit 10 set ip address prefix-list mingxi set community no-exportroute-map huizong permit 10 match ip address prefix-list huizong match ip route-source prefix-list SOURCE_AS64100 router bgp 64520 bgp inject-map mingxi exist-map huizong copy-attributesR2ip prefix-list SOURCE_AS64200 seq 5 permit 200.1.28.8/32ip prefix-list huizong seq 5 permit 111.1.0.0/16ip prefix-list mingxi seq 5 permit 111.1.2.0/24ip prefix-list mingxi seq 10 permit 111.1.3.0/24route-map mingxi permit 10 set ip address prefix-list mingxi set community no-exportroute-map huizong permit 10 match ip address prefix-list huizong match ip route-source prefix-list SOURCE_AS64200 router bgp 64520 bgp inject-map mingxi exist-map huizong copy-attributes BGP选路(MED、AS-Path、Local-Pref) R8上配置，实现AS 64200访问 120.1.X.X，X为偶数，走R4和R8互联链路；X为奇数，走R3和R6互联链路 1234567891011121314R8access-list 10 permit 120.1.0.0 0.0.254.254access-list 20 permit 120.1.1.1 0.0.254.254route-map SET_LP permit 10 match ip address 10 set local-preference 120route-map SET_LP permit 20 match ip address 20 set local-preference 99route-map SET_LP permit 30router bgp 64200 neighbor 200.1.48.4 route-map SET_LP in R6、R8上配置，实现AS 64100 访问 140.1.X.X/32，X为偶数，走R4和R8互联链路；X为奇数，走R3和R6互联链路 1234567891011121314151617181920212223242526272829R6access-list 30 permit 140.1.0.0 0.0.254.254access-list 40 permit 140.1.1.1 0.0.254.254route-map SET_MED permit 10 match ip address 30 set metric 200route-map SET_MED permit 20 match ip address 40 set metric 100route-map SET_MED permit 30router bgp 64200 neighbor 200.1.36.3 route-map SET_MED outR8access-list 30 permit 140.1.0.0 0.0.254.254access-list 40 permit 140.1.1.1 0.0.254.254route-map SET_MED permit 10 match ip address 30 set metric 100route-map SET_MED permit 20 match ip address 40 set metric 200route-map SET_MED permit 30router bgp 64200 neighbor 200.1.48.4 route-map SET_MED out R1上对起始于AS 64540的任意前缀，AS 64520总是通过R2转发（路由拆分的明细条目除外） 12345678910配置 ip as-path列表，匹配AS 64540 开头的路径路由条目，route-map 设置追加AS号使路径变长R1ip as-path access-list 100 permit _64540$route-map AS_PREPEND permit 10 match as-path 100 set as-path prepend last-as 3 router bgp 64520 neighbor 200.1.15.5 route-map AS_PREPEND in BGP路由过滤 R6、R7仅通告 200.1.XY.0/24 与 100.1.1.X/32的路由到 R11、R12 1234567891011121314151617181920route-map 设置匹配，向R11，R12通告路由进行过滤R6ip prefix-list ADV_TO_64540 seq 5 permit 200.1.0.0/16 le 24ip prefix-list ADV_TO_64540 seq 10 permit 100.1.1.0/24 le 32route-map ADV_TO_64540 permit 10 match ip address prefix-list ADV_TO_64540 router bgp 64200 neighbor 200.1.116.11 route-map ADV_TO_64540 out R7ip prefix-list ADV_TO_64540 seq 5 permit 200.1.0.0/16 le 24ip prefix-list ADV_TO_64540 seq 10 permit 100.1.1.0/24 le 32route-map ADV_TO_64540 permit 10 match ip address prefix-list ADV_TO_64540 router bgp 64200 neighbor 200.1.127.12 route-map ADV_TO_64540 out R3、R10上配置ORF，使AS 64100仅通告 200.1.XY.0/24 与 100.1.1.X/32的前缀到R10 123456789101112通过向对等体通告ORF能力可以激活这一feature。表示接受从对等体来的，前缀列表，并把这个前缀列表应用到针对对等体的出站方向。R10ip prefix-list FROM_64100 seq 5 permit 200.1.0.0/16 le 24ip prefix-list FROM_64100 seq 10 permit 100.1.1.0/24 le 32router bgp 64540 neighbor 200.1.103.3 capability orf prefix-list send neighbor 200.1.103.3 prefix-list FROM_64100 in R3router bgp 64100 neighbor 200.1.103.10 capability orf prefix-list receive BGP 特性 AS 64520 不作为传输型AS 不能使用BGP路由过滤 12345678910111213141516no-export团体属性R1route-map SET_COMM permit 10 set community no-export router bgp 64520 neighbor 10.1.2.2 send-community neighbor 10.1.2.2 route-map SET_COMM out R2route-map SET_COMM permit 10 set community no-export router bgp 64520 neighbor 10.1.1.1 send-community neighbor 10.1.1.1 route-map SET_COMM out R1与R2之间的iBGP邻居启用MD5认证，密码为cisco 12345R1neighbor 10.1.1.1 password ciscoR2neighbor 10.1.2.2 password cisco R3上配置，若100.1.1.10/32不稳定，震荡2次抑制传递，并在5min后自动恢复 12345678910配置BGP路由惩罚R3ip prefix-list DAMPENING seq 5 permit 100.1.1.10/32route-map DAMPENING permit 10 match ip address prefix-list DAMPENING set dampening 4 750 2000 16 router bgp 64100 bgp dampening route-map DAMPENING R1上配置，若100.1.1.10路由条目存在，通告默认路由到R2 123456789R1ip prefix-list EXIST_10 seq 5 permit 100.1.1.10/32route-map DEFAULT_CONDITION permit 10 match ip address prefix-list EXIST_10 set community no-export router bgp 64520 neighbor 10.1.2.2 default-originate route-map DEFAULT_CONDITION Ending 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 配置存阿里云盘了，这是链接：[分享的文件] 欢迎“来电”来函探讨。","link":"/posts/48f55792.html"},{"title":"CDN_error","text":"最近发现我这个小破博客网站访问贼慢 ，FancyBox下的图片打开不是显示相册的模式而是跳转到图床网站显示，起初以为是网络不稳定，平时也不怎么关注，今天才注意到是cdn资源访问异常。 Thank you all for your tests, feedback and support. I am personally sorry for the issues we had today. We can consider the issue as resolved, now its a question of DNS propagation getting to everyone. Our official announcement regarding the problems today: Unfortunately today jsDelivr unexpectedly lost its ICP license in China. As effect the regional CDN disabled our account. This resulted in the extended outage we had in mainland China and Taiwan. Other regions were unaffected. We understand how difficult it was for our users to experience this unique situation. From now on all Chinese traffic will be served by “near China” locations provided by global CDN providers. This will have the additional benefit of better failover logic in the future. 以上大概意思是 jsDelivr ICP 证书在中国大陆失效，无法访问jsDelivr资源。 再看看github上的说法，GFW 巴拉巴拉…… 通过搜索引擎发现，当然还是有解决方法能处理这种情况。 心情好了再弄吧，心累。 ……","link":"/posts/ded21811.html"},{"title":"HCL_FW_IRF_LAB","text":"实验目的 验证 H3C 防火墙 IRF 堆叠和主备模式 基于项目中部分核心网络的模拟器测试 线路交叉互联的问题 实验描述IP 地址规划和端口互联 互联设备 核心防火墙&lt;–&gt;核心交换机 10.1.1.0/30 核心防火墙&lt;–&gt;服务器汇聚 10.1.1.4/30 核心防火墙&lt;–&gt;外联交换机 VLAN10:192.168.10.254 A端设备 端口 B端设备 端口 FW1 GE0/23 FW2 GE0/23 FW1 GE0/1 SW5 GE0/1 FW1 GE0/2 SW6 GE0/2 FW1 GE0/3 SW3 GE0/3 FW1 GE0/4 SW4 GE0/4 FW1 GE0/11 SW7 GE0/1 FW2 GE0/1 SW6 GE0/1 FW2 GE0/2 SW5 GE0/2 FW2 GE0/3 SW4 GE0/3 FW2 GE0/4 SW3 GE0/4 FW2 GE0/11 SW7 GE0/2 防火墙安全域划分核心交换机：Trust 服务器汇聚：Server 外联交换机：Untrust 配置思路 FW1 与 FW2 之间 IRF 堆叠；SW3 与 SW4 之间 IRF 堆叠；SW5 与 SW6 之间 IRF 堆叠； 设备互联的端口聚合配置，配置系统优先级和端口优先级，使流量优先流经“主”用设备 配置互联地址，确保逻辑直连的互通 配置防火墙安全域和安全策略 配置 PC IP地址确保与网关的连通性 配置静态路由确保网络互通 进行倒换倒回观察网络连通性 模拟线路故障观察网络连通性 配置文件 见文末 聊点什么 就线路交叉互联问题，与老友交谈，据他说这种互联方式可能导致丢包现象，例如，流量分别从SW3的G0/3接口和SW4的G0/4接口进入FW1，G0/4的流量会被认为非法流量而丢弃，盲猜是因为会话状态机模式设为严格模式，而运行中出现了来回路径不一致的问题导致丢包。 就这个交叉互联问题与华三400聊了近半小时，对方给出的方案是按完美的主备处理方式进行组网，（在网络正常的情况下）即流量永远只走一边，只要防火墙上有一个端口出现故障，冗余组全部切换到备。 主备模式下，设置冗余组，主成员下的端口有任一出现问题，就会整体切换到备，而备设备如在整体切换就有部分端口故障，此时主成员设备的UP状态的端口会在 DOWN 和 DOWN(redundancy down) 之间反复恒跳，而Status出现两个 Secondary，Slot1 的Track优先级也会随着端口的两个 DOWN 状态不同而变化。注意，此时网络并没有中断。 1234Redundancy group 11 (ID 1): Node ID Slot Priority Status Track weight 1 Slot1 1 Secondary -1020 2 Slot2 1 Secondary -255 要严格控制流量走一边的情况，就需要接入层网上的设备互联都使用双线互联。而万一“主”设备上联到上一层“主”设备的线路故障了，那么恭喜你可能网络瘫痪了，举个例子，拓扑中SW3与SW11的G0/1接口down，因为SW11上联的两根线路做了聚合，SW11上联的流量会通过G0/2向上走，相当于在核心交换机的SW4上接了一台 PC ，你觉得流量再往上层该怎么走？走到FW2备成员？而FW2是备用状态不处理流量。写到这我才想起来原来华三400建议做两个聚合组是有道理的，SW4 G0/4和G0/3做一个聚合组，就可以人为限制流量又走到FW1，秒啊。 继续上一条，不使用两组聚合的方式，关闭IRF的本地优先转发，核心交换机上就出现跨框流量，即进入SW4的流量要往上走，要绕道SW3上去，这明显不合理了。 继续上一条，假如使用核心交换机上联防火墙4根线做一个三层聚合组，FW1往下回流量的时候，由于负载分担的方式，又有可能把流量回给SW4。综合一下，在聚合组配置selected-port maximum 1 同时配置lacp的端口优先级呢，是不是觉得这个方法又蠢又无奈又有用。 对于要把外联区（SW7）的网关设置在防火墙上的问题，还有一种方式是用 RETH 接口，但是我模拟器配置了，且SW7 查看arp都能看到网关的条目了，就是不通，希望是模拟器bug了，有机会去真机上测试一下再回来聊聊。 不知道是不是我的错觉，用HCL模拟器做这种冗余类实验，老是出现一些不能理解的问题，这边十万八千里shutdown个端口，那边会受影响那种。 Ending 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 配置存阿里云盘了，这是链接：[分享的文件] 欢迎“来电”来函探讨。","link":"/posts/a89a05d3.html"},{"title":"H3C_Python_SSH_Config_Auto","text":"Python 脚本 SSH 登陆华三设备，使用定义好的 display 脚本批量导出配置和一些设备状态 Python 脚本 SSH 登陆华三设备，使用定义好的配置命令批量增加配置 主要使用的是 netmiko 这个模块里的 ConnectHandler 命令 单线程 脚本运行完成后输出 成功和失败的记录log ip_list.txt，cmd_list.txt，cmd_config_list.txt 格式简单，修改方便 未做多账号密码的 if 语句判断 肯定有冗余繁重的代码 脚本文件py01.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384import timefrom netmiko import ConnectHandler, NetMikoAuthenticationException, NetMikoTimeoutExceptionimport osimport retime_str1 = time.strftime('%Y_%m_%d', time.localtime())time_str2 = time.strftime('%H%M%S', time.localtime())time_str3 = time.strftime('%H:%M:%S', time.localtime())path = \"F:\\\\XXXXX\\\\py_net\"title = \"%s\" % time_str1# mkdir path &amp; touch filenew_path = os.path.join(path, title)config_path = \"%s\\\\configuration_backup\" % new_pathif not os.path.isdir(new_path): os.makedirs(new_path)if not os.path.isdir(config_path): os.makedirs(config_path)# 创建日志文件，记录运行结果log_fo = open('%s\\\\%s.log' % (config_path, time_str1), 'a+', encoding='utf-8')log_fo.write('\\n' + \"==========START TIME \" + time_str3 + \"=========\" + '\\n')# 读取 ip_list.txt 里的 ip 地址ip_list = open('ip_list.txt', 'r', encoding='ascii')ip_addr = ip_list.readlines()ip_list.close()# display 命令cmd_list = open('cmd_list.txt', 'r', encoding='ascii')cmd_line = cmd_list.readlines()cmd_list.close()# 遍历 ip_addr 列表里面的 ip 进行连接for ip in iter(ip_addr): try: S5130 = { 'device_type': 'hp_comware', 'ip': ip, 'username': 'admin', 'password': 'xxxxxxxxxx', } net_connect = ConnectHandler(**S5130) # 禁用输出屏幕分屏 screen_d = net_connect.send_command('screen-length disable') # current_time as part of filename time_str2 = time.strftime('%H%M%S', time.localtime()) # sysname as part of fielname sysn = net_connect.send_command('dis cur | inc sysname') # split 空格分割回显内容 sysn = re.split(r'[ ]+', sysn) sysn = sysn[2] # 创建文件, 格式为 sysname + time_str2 config_fo = open('%s\\\\%s_%s_config.txt' % (config_path, sysn, time_str2), 'a', encoding='utf-8') time_str3 = time.strftime('%H:%M:%S', time.localtime()) print(time_str1 + \"_\" + time_str3 + ' Successfully connected to ' + ip) log_fo.write(time_str1 + \"_\" + time_str3 + ' Successfully connected to ' + ip) for cmd in iter(cmd_line): cmd_result = net_connect.send_command(cmd) print(cmd) print(cmd_result) print('===================================================================') config_fo.write('\\n' + '===================================================================' + '\\n' + cmd + '\\n' + cmd_result) net_connect.disconnect() config_fo.close() except (EOFError, NetMikoTimeoutException): print('Can not connect to Device ' + ip) time_str3 = time.strftime('%H:%M:%S', time.localtime()) log_fo.write(time_str1 + \"_\" + time_str3 + ' Can not connect to Device ' + ip) except (EOFError, NetMikoAuthenticationException): print('username/password wrong! ' + ip) time_str3 = time.strftime('%H:%M:%S', time.localtime()) log_fo.write(time_str1 + \"_\" + time_str3 + ' username/password wrong! ' + ip)time_str4 = time.strftime('%H:%M:%S', time.localtime())log_fo.write('\\n' + \"==========END TIME \" + time_str4 + \"==========\" + '\\n')log_fo.close()print(log_fo) py02.py1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import timefrom netmiko import ConnectHandler, NetMikoAuthenticationException, NetMikoTimeoutExceptionimport osimport retime_str1 = time.strftime('%Y_%m_%d', time.localtime())time_str2 = time.strftime('%H%M%S', time.localtime())time_str3 = time.strftime('%H:%M:%S', time.localtime())path = \"F:\\\\XXXXX\\\\py_net\"title = \"%s\" % time_str1# mkdir file &amp; touch filenew_path = os.path.join(path, title)config_path = \"%s\\\\configure_device\" % new_pathif not os.path.isdir(new_path): os.makedirs(new_path)if not os.path.isdir(config_path): os.makedirs(config_path)# 创建日志文件，记录运行结果log_fo = open('%s\\\\%s.log' % (config_path, time_str1), 'a+', encoding='utf-8')log_fo.write('\\n' + \"==========START TIME \" + time_str3 + \"=========\" + '\\n')# 读取 ip_list.txt 里的 ip 地址ip_list = open('ip_list.txt', 'r', encoding='ascii')ip_addr = ip_list.readlines()ip_list.close()# 读取 cmd_config_list.txt 文件的配置命令cmd_config_list = open('cmd_config_list.txt', 'r', encoding='ascii')cmd_line = cmd_config_list.readlines()print(cmd_line)cmd_config_list.close()# 遍历 ip_addr 列表里面的 ip 进行连接for ip in iter(ip_addr): try: S5130 = { 'device_type': 'hp_comware', 'ip': ip, 'username': 'admin', 'password': 'xxxxxxxxxx', } net_connect = ConnectHandler(**S5130) # 禁用输出屏幕分屏 screen_d = net_connect.send_command('screen-length disable') # current_time as part of filename time_str2 = time.strftime('%H%M%S', time.localtime()) # sysname as part of fielname sysn = net_connect.send_command('dis cur | inc sysname') # split 空格分割回显内容 sysn = re.split(r\"[ ]+\", sysn) sysn = sysn[2] # 创建文件, 格式为 sysname + time_str2 config_fo = open('%s\\\\%s_%s_add_config.txt' % (config_path, sysn, time_str2), 'a', encoding='utf-8') time_str3 = time.strftime('%H:%M:%S', time.localtime()) print(time_str1 + \"_\" + time_str3 + ' Successfully connected to ' + ip + ' Configuring...') log_fo.write(time_str1 + \"_\" + time_str3 + ' Configuration complete: ' + ' Successfully connected to ' + ip) cmd_result = net_connect.send_config_set(cmd_line) print(cmd_result) print('===================================================================') config_fo.write('\\n' + '===================================================================' + '\\n' + cmd_result) net_connect.disconnect() config_fo.close() except (EOFError, NetMikoTimeoutException): print('Can not connect to Device ' + ip) time_str3 = time.strftime('%H:%M:%S', time.localtime()) log_fo.write(time_str1 + \"_\" + time_str3 + ' Configuration Fail: ' + ' Can not connect to Device! ' + ip) except (EOFError, NetMikoAuthenticationException): print('username/password wrong! ' + ip) time_str3 = time.strftime('%H:%M:%S', time.localtime()) log_fo.write(time_str1 + \"_\" + time_str3 + ' Configuration Fail: ' + ' username/password wrong! ' + ip)time_str4 = time.strftime('%H:%M:%S', time.localtime())log_fo.write('\\n' + \"==========END TIME \" + time_str4 + \"==========\" + '\\n')log_fo.close()print(log_fo) 运行环境 Python3，理论上 Python3 版本都可运行，没看到新版本更新日志说哪里有变动 在 win7 系统 3.8.10 版本运行测试无问题 在 win10 系统 3.9.7 版本运行测试无问题 在 win10 系统 3.10.4 版本运行测试无问题 安装 netmiko 测试连接 HCL_Setup_V3.0.1 模拟器设备无问题 测试连接真实 H3C 设备，无问题 运行速度取决与设备的连接反应和脚本行数 三个文件ip_list.txt （faker） 1234510.1.1.110.1.1.210.1.1.310.1.1.410.1.1.5 cmd_list.txt （faker） 1234567891011121314151617181920212223242526display cur display ip interface briefdisplay interface brief desdisplay vlandisplay vlan briefdisplay ip routing-tabledisplay versiondisplay cpu-usagedisplay memorydisplay powerdisplay fandisplay device manuinfodisplay device verbose display environmentdirdisplay irfdisplay irf configurationdisplay irf link display irf topologydisplay link-aggregation summarydisplay link-aggregation member-port display link-aggregation verbose display current-configuration configuration systemdisplay boot-loadersave force# cmd_config_list.txt （faker） 1234567vlan 22des MMT22dis thint vlan 22des MMT22ip add 192.168.22.22 24dis th 运行过程 py01.py 运行结束后会在 本 py01.py 文件所在的目录创建一个名为 20xx_xx_xx （运行此脚本当日年月日）的文件夹 py02.py 运行结束后会在 本 py02.py 文件所在的目录创建一个名为 20xx_xx_xx（运行此脚本当日年月日） 的文件夹 以上创建的文件夹，脚本会判断是否存在，如存在则跳过；不存在则创建 假设已经各运行完成一次以上两个脚本，则名为 20xx_xx_xx 的文件夹下会创建 “configuration_backup” 和 “configure_device”两个文件夹 configuration_backup 保存导出的配置和一些设备状态信息 configure_device 保存批量增加配置的记录过程 “configuration_backup” 和 “configure_device”两个文件夹下，会生成文件名称为 “ 20xx_xx_xx.log”（当天日期）的文件，用来记录执行成功和执行失败的log “configuration_backup” 和 “configure_device”两个文件夹下，有文件名称为 “sysname + time_str2_config.txt” （设备名+创建时间）的 TXT 文件，或 “sysname + time_str2_add_config.txt” （设备名+创建时间）的 TXT 文件 参考资料:12345- Python-交换机自动化巡检脚本笔记 by 02EVA on 2021-04-22 : https://blog.csdn.net/weixin_42065669/article/details/116009445-「Python 网络自动化」Netmiko ——Netmiko 常用方法 by 某呆啊 on 2021-02-04 : https://blog.csdn.net/q965844841qq/article/details/113619281- Python 逐行读取txt 文件并生成列表 by 诺亚方包 on 2020-05-19 : https://blog.csdn.net/weixin_40973138/article/details/106209020- Python 使用 Netmiko 连接 H3C 网络设备 by 某呆 on 2021-02-03 : https://555.xdai.vip/posts/26e9de3c.html- H3C交换机python命令下发脚本 by xuwenfang1989 on 2018-08-27 : https://blog.51cto.com/u_1339643/2164819","link":"/posts/54cb8229.html"},{"title":"关于组网中使用默认MSTP的问题","text":"在一个项目中，或者说在一个不使用 VRRP 组网并且没有进行负载分担的核心网络中，项目初始时并没有刻意的去规划 生成树 这个协议。以华三设备为例，交换机默认开启了 MSTP 协议，所以在建设时有意或者无意的导致交换机的环路并不会使整个网络因此瘫痪. 关于生成树协议的工作原理，不在本文的要说明的范围内，可以自行Google或到各厂商官网查询，本文中用到的术语以华三厂商为例，可能与其他厂商叫法不一样，但是我想看这篇文的观众都知道，生成树协议不是私有协议（MSTP由IEEE制定的802.1s标准定义）。 写这篇文是想探讨一下一个网络中使用默认的 MSTP 可能导致的一些问题和关于生成树的调整 下面使用 HCL 搭建了一个经典的 核心/汇聚/接入 的三层网络，刻意构造的一个环路。 分析网络中的生成树 在实际项目中，是很难确定最小的mac的交换机就是核心交换机，这样导致的结果就是生成树的根桥不一定就在核心交换机上，上图的实验拓扑中也刻意的把mac大的两台交换机放在了核心上 通过命令查看，核心交换机 (CORE_SW1) 聚合组101 为 ROOT 根端口，根桥是 32768.186d-08c1-0100 根端口所谓根端口，是指非根桥设备上离根桥最近的端口。根端口负责与根桥进行通信。非根桥设备上有且只有一个根端口，根桥上没有根端口。 12345678910&lt;CORE_SW1&gt;dis stp brief MST ID Port Role STP State Protection 0 Bridge-Aggregation101 ROOT FORWARDING NONE 0 Bridge-Aggregation102 DESI FORWARDING NONE&lt;CORE_SW1&gt;&lt;CORE_SW1&gt;dis stp ro&lt;CORE_SW1&gt;dis stp root MST ID Root Bridge ID ExtPathCost IntPathCost Root Port 0 32768.186d-08c1-0100 58 0 BAGG101&lt;CORE_SW1&gt; 为什么会出现这种情况 首先根据 MST 域 的定义，结合 H3C 官网说明，判断出上图中每个交换机都是不同 MST 域，上面拓扑图中本质就由 6 个 MST 域组成，尽管它们域的配置除了域名不一样，其他参数都一样。剩下的就是 MST 域与 MST 域 的生成树关系。 MST域MST域（Multiple Spanning Tree Regions，多生成树域）是由交换网络中的多台设备以及它们之间的网段所构成。这些设备具有下列特点：· 都开启了生成树协议。· 域名相同。· VLAN与MSTI间映射关系的配置相同。· MSTP修订级别的配置相同。· 这些设备之间有物理链路连通 CISTCIST（Common and Internal Spanning Tree，公共和内部生成树）是一棵连接交换网络内所有设备的单生成树，所有MST域的IST再加上CST就共同构成了整个交换网络的一棵完整的单生成树，即CIST。 CIST生成树的计算通过比较BPDU后，在整个网络中选择一个优先级最高的设备作为CIST的根桥。在每个MST域内MSTP通过计算生成IST；同时MSTP将每个MST域作为单台设备对待，通过计算在域间生成CST。CST和IST构成了整个网络的CIST。 可能导致的问题 依照上面拓扑图搭建网络会出现什么问题 查看 AGGE_SW1 生成树信息，发现汇聚交换机下联接入交换机的端口是 Alternate Port 角色，不转发业务流量。造成的具体表现就是从核心交换机方向的流量要回到 ACC_SW1 上的终端设备会绕道 ACC_SW2 再到 ACC_SW1 的终端。是不是很不合理 123456&lt;AGGE_SW1&gt;dis stp brief MST ID Port Role STP State Protection 0 Bridge-Aggregation23 DESI FORWARDING NONE 0 GigabitEthernet1/0/1 ALTE DISCARDING NONE 0 GigabitEthernet1/0/2 ROOT FORWARDING NONE&lt;AGGE_SW1&gt; 解决之道 要扭转 说2 中这种不合理的流量路径，方法也很简单，保证核心交换机是根桥即可 配置核心交换机为根桥 1[CORE_SW1]stp instance 0 root primary 最后 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 欢迎“来电”来函探讨。","link":"/posts/8eea84ef.html"},{"title":"H3C_Python_SSH_Config_Auto_2","text":"针对上一版的脚本进行改进 增加嵌套一层 ‘ Try……finally: ’ ，代码执行末尾提示 “按任意键退出” 修改代码中预定义的登陆账号密码为 input 和 getpass 手动输入 修改文件当前目录为代码自动获取 os.getcwd() 修改执行完成后显示 “A log file is available in……” 记录log路径 想改多线程，threading 模块逻辑没搞清楚 两个脚本01123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115# File： py_net.py# Time： 2022/05/13 12:20:35# Author： Kir# Ver： 2.0# Description： AutoOutput/SSH/Logimport timefrom netmiko import ConnectHandler, NetMikoAuthenticationException, NetMikoTimeoutExceptionimport osimport reimport msvcrtimport getpasstry: # 校验账户交给netmiko模块，仅输入 login_user = input('Login:') login_pwd = getpass.getpass('Passwd:') # 时间格式蒸鹅心，冒号不能用做文件名字符 time_str1 = time.strftime('%Y%m%d', time.localtime()) time_str2 = time.strftime('%H%M%S', time.localtime()) time_str3 = time.strftime('%H:%M:%S', time.localtime()) # 获取当前工作目录 path = os.getcwd() title = \"%s\" % time_str1 # mkdir path &amp; touch file new_path = os.path.join(path, title) config_path = \"%s\\\\configuration_backup\" % new_path if not os.path.isdir(new_path): os.makedirs(new_path) if not os.path.isdir(config_path): os.makedirs(config_path) # 创建日志文件，记录运行结果 log_fo = open( '%s\\\\%s.log' % (config_path, time_str1), 'a+', encoding='utf-8', ) log_fo.write('\\n' + \"==========START TIME \" + time_str3 + \"=========\" + '\\n') # 读取 ip_list.txt 里的 ip 地址 ip_list = open('ip_list.txt', 'r', encoding='ascii') ip_addr = ip_list.readlines() ip_list.close() # display 命令 cmd_list = open('cmd_list.txt', 'r', encoding='ascii') cmd_line = cmd_list.readlines() cmd_list.close() # 遍历 ip_addr 列表里面的 ip 进行连接 for ip in iter(ip_addr): try: S5130 = { 'device_type': 'hp_comware', 'ip': ip, 'username': login_user, 'password': login_pwd, } net_connect = ConnectHandler(**S5130) # 禁用输出屏幕分屏 screen_d = net_connect.send_command('screen-length disable') # current_time as part of filename time_str2 = time.strftime('%H%M%S', time.localtime()) # sysname as part of fielname sysn = net_connect.send_command('dis cur | inc sysname') # split 空格分割回显内容 sysn = re.split(r'[ ]+', sysn) sysn = sysn[2] # 创建文件, 格式为 sysname + time_str2 config_fo = open('%s\\\\%s_%s_config.txt' % (config_path, sysn, time_str2), 'a', encoding='utf-8') time_str3 = time.strftime('%H:%M:%S', time.localtime()) print(time_str1 + \"_\" + time_str3 + ' Successfully connected to ' + ip) log_fo.write(time_str1 + \"_\" + time_str3 + ' Successfully connected to ' + ip) for cmd in iter(cmd_line): # 发送 cmd cmd_result = net_connect.send_command(cmd) print(cmd) print(cmd_result) print( '===================================================================' ) config_fo.write( '\\n' + '===================================================================' + '\\n' + cmd + '\\n' + cmd_result) net_connect.disconnect() config_fo.close() except (EOFError, NetMikoTimeoutException): print('Can not connect to Device ' + ip) time_str3 = time.strftime('%H:%M:%S', time.localtime()) log_fo.write(time_str1 + \"_\" + time_str3 + ' Can not connect to Device ' + ip) except (EOFError, NetMikoAuthenticationException): print('username/password wrong! ' + ip) time_str3 = time.strftime('%H:%M:%S', time.localtime()) log_fo.write(time_str1 + \"_\" + time_str3 + ' username/password wrong! ' + ip) time_str4 = time.strftime('%H:%M:%S', time.localtime()) log_fo.write('\\n' + \"==========END TIME \" + time_str4 + \"==========\" + '\\n') log_fo.close() print('\\n') print('A log file is available in ' + '\\\"' + config_path + '\\\\' + time_str1 + '.log' + '\\\"') print('\\n')finally: print('Press any key to quit program.') ord(msvcrt.getch()) 02123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116# File： py_net_config.py# Time： 2022/05/13 12:19:59# Author： Kir# Ver： 2.0# Description：AutoConfig/SSH/Logimport timefrom netmiko import ConnectHandler, NetMikoAuthenticationException, NetMikoTimeoutExceptionimport osimport reimport msvcrtimport getpasstry: # 校验账户交给netmiko模块，仅输入 login_user = input('Login:') login_pwd = getpass.getpass('Passwd:') # 时间格式蒸鹅心，冒号不能用做文件名字符 time_str1 = time.strftime('%Y%m%d', time.localtime()) time_str2 = time.strftime('%H%M%S', time.localtime()) time_str3 = time.strftime('%H:%M:%S', time.localtime()) # 获取当前工作目录 path = os.getcwd() title = \"%s\" % time_str1 # mkdir path &amp; touch file new_path = os.path.join(path, title) config_path = \"%s\\\\configure_device\" % new_path if not os.path.isdir(new_path): os.makedirs(new_path) if not os.path.isdir(config_path): os.makedirs(config_path) # 创建日志文件，记录运行结果 log_fo = open( '%s\\\\%s.log' % (config_path, time_str1), 'a+', encoding='utf-8', ) log_fo.write('\\n' + \"==========START TIME \" + time_str3 + \"=========\" + '\\n') # 读取 ip_list.txt 里的 ip 地址 ip_list = open('ip_list.txt', 'r', encoding='ascii') ip_addr = ip_list.readlines() ip_list.close() # 读取 cmd_config_list.txt 文件的配置命令 cmd_config_list = open('cmd_config_list.txt', 'r', encoding='ascii') cmd_line = cmd_config_list.readlines() print('AddCommand-line: ' + str(cmd_line)) cmd_config_list.close() # 遍历 ip_addr 列表里面的 ip 进行连接 for ip in iter(ip_addr): try: S5130 = { 'device_type': 'hp_comware', 'ip': ip, 'username': login_user, 'password': login_pwd, } net_connect = ConnectHandler(**S5130) # 禁用输出屏幕分屏 screen_d = net_connect.send_command('screen-length disable') # current_time as part of filename time_str2 = time.strftime('%H%M%S', time.localtime()) # sysname as part of fielname sysn = net_connect.send_command('dis cur | inc sysname') # split 空格分割回显内容 sysn = re.split(r'[ ]+', sysn) sysn = sysn[2] # 创建文件, 格式为 sysname + time_str2 config_fo = open('%s\\\\%s_%s_add_config.txt' % (config_path, sysn, time_str2), 'a', encoding='utf-8') time_str3 = time.strftime('%H:%M:%S', time.localtime()) print(time_str1 + \"_\" + time_str3 + ' Successfully connected to ' + ip + ' Configuring...') log_fo.write(time_str1 + \"_\" + time_str3 + ' Configuration complete: ' + ' Successfully connected to ' + ip) # 发送 cmd_line cmd_result = net_connect.send_config_set(cmd_line) print(cmd_result) print( '===================================================================' ) config_fo.write( '\\n' + '===================================================================' + '\\n' + cmd_result) net_connect.disconnect() config_fo.close() except (EOFError, NetMikoTimeoutException): print('Can not connect to Device ' + ip) time_str3 = time.strftime('%H:%M:%S', time.localtime()) log_fo.write(time_str1 + \"_\" + time_str3 + ' Configuration Fail: ' + ' Can not connect to Device! ' + ip) except (EOFError, NetMikoAuthenticationException): print('username/password wrong! ' + ip) time_str3 = time.strftime('%H:%M:%S', time.localtime()) log_fo.write(time_str1 + \"_\" + time_str3 + ' Configuration Fail: ' + ' username/password wrong! ' + ip) time_str4 = time.strftime('%H:%M:%S', time.localtime()) log_fo.write('\\n' + \"==========END TIME \" + time_str4 + \"==========\" + '\\n') log_fo.close() print('\\n') print('A log file is available in ' + '\\\"' + config_path + '\\\\' + time_str1 + '.log' + '\\\"') print('\\n')finally: print('Press any key to quit program.') ord(msvcrt.getch()) 参考资料:12345678- Python-交换机自动化巡检脚本笔记 by 02EVA on 2021-04-22 : https://blog.csdn.net/weixin_42065669/article/details/116009445-「Python 网络自动化」Netmiko ——Netmiko 常用方法 by 某呆啊 on 2021-02-04 : https://blog.csdn.net/q965844841qq/article/details/113619281- Python 逐行读取txt 文件并生成列表 by 诺亚方包 on 2020-05-19 : https://blog.csdn.net/weixin_40973138/article/details/106209020- Python 使用 Netmiko 连接 H3C 网络设备 by 某呆 on 2021-02-03 : https://555.xdai.vip/posts/26e9de3c.html- H3C交换机python命令下发脚本 by xuwenfang1989 on 2018-08-27 : https://blog.51cto.com/u_1339643/2164819- Python实现“按任意键返回”和无回显输入 by dongfuguo on 2020-03-25 : https://blog.csdn.net/dongfuguo/article/details/105103446- Python3文件路径/目录获取教程 by 诸子流 on 2020-07-09 : `https://www.cnblogs.com/lsdb/p/13265688.html- 如何让python不打印转义字符串？by 流芳 on 2020-07-07 : https://www.py.cn/jishu/jichu/19480.html","link":"/posts/2699eb47.html"},{"title":"工业交换机电源线缆选择","text":"交流供电端至独立电源（交流电源线）标准通信机房用阻燃软结构电缆，标识（RVVZ（ZRVVR)) RVVZ电缆是采用细丝合股多层复绞形式，具有良好的柔软性，弯曲性能高，同时具有高阻燃性能。R——软V——聚氯乙烯护套V——聚氯乙烯绝缘Z——阻燃RVVZ电缆常见型号RVZ–铜芯阻燃聚氯乙烯绝缘软电缆 RVVZ–铜芯阻燃聚氯乙烯绝缘和护套软电缆RVVZ22–铜芯阻燃聚氯乙烯绝缘和护套钢带铠装软电缆RVFH–铜芯阻燃聚氯乙烯绝缘防火软电缆RVVFH–铜芯阻燃聚氯乙烯绝缘和护套防火软电缆RVVFH22–铜芯阻燃聚氯乙烯绝缘和护套钢带铠装防火软电缆 电压等级RVVZ、RVVZ22、RVVFH、RVVFH22型号的电缆为0.6/1KV。 适用范围适用于电信、邮电、铁路、化工、消防、通信等通信机房配电系统的内部连接线，既适合于固定敷设也可做移动电缆使用，在特殊环境中尤为适用，本产品适用于通信机房、移动机站及高层建筑等电源的输、配电系统中．交流额定电压O.6／1kV及以下阻燃、耐火软电缆。 RVV和RVVZ的区别 1、RVV一般叫做软电线，RVVZ(ZR-VVR)一般叫软电缆。 2、电压等级：RVV：300/500V， RVVZ：0.6/1KV 3、使用场合 ​ RVV：主要应用于电器、仪表和电子设备及自动化装置用电源线、控制线及信号传输线，具体可用于防盗报警系统、楼宇对讲系统等。 ​ RVVZ：适用于交流额定电压为0.6/1KV及以下对柔软度要求非常高的的输配电线路上。 选用建议 选用 3 芯 RVVZ 标准的线缆用于供电插座至 H3C DG-30-S24II 电源的交流供电。 线缆标识：$$RVVZ–O.6／1kV –3* 1.0 m{m}^2$$ 独立电源至工业交换机接入端（直流电源线）标准根据官网资料查询，直流电源线的要求: 铜制线缆 线径：0.5mm^2 或 20AWG–3mm^2 或 12 AWG 12美国线规（英文是American wire gauge，缩写为AWG），是一种区分导线直径的标准，又被称为 Brown &amp; Sharpe线规。这种标准化线规系统于1857年起在美国开始使用。导线的直径与导线承载电流的能力有很大关系。线规数字越小，表示线材直径越粗，所能承载的电流就越大；反之，线规数字越大，表示线材直径越细，所能承载的电流就越小。AWG表适用于单根、实心、圆形的导线。 选用建议(CWG 标准选购)线芯：最小截面积为0.5mm^2， 最大截面积 3mm^2 的范围内选购线缆 线芯数： 2芯 套线： RVV软护套线 线缆标识$$RVV - 2* 1.0 m{m}^2$$","link":"/posts/cadda170.html"},{"title":"H3C 防火墙（v7）SSLVPN 实验配置","text":"本文使用华三 HCL 模拟器搭建拓扑，实现 H3C 防火墙（v7）SSLVPN 实验 后一篇文章中描述 在 Ubuntu 22.04 中安装 iNode 客户端拨号测试 本来只想写 Ubuntu 安装 iNode 的，想想还是一起记录下来 文中的所有操作方法都可在华三官网和搜索引擎找到 拓扑图 基操 配置接口 IP 地址 接口划入安全域（untrust，trust），新建安全域 SSLVPN 配置路由（FW–&gt;&gt; ROUTER:172.16.1.0/24，ROUTER–&gt;&gt;FW:0.0.0.0/0） 配置安全策略互通（any） 防火墙配置 SSLVPN配置 SSLVPN 网关 Gateway Name: SSLVPNGW IP Address: 172.31.100.234 port: 4443 配置 IP 接入接口 安全域： SSLVPN 指定IP地址：172.31.200.254/24 本机接收可不选 创建SSL VPN客户端地址池 地址池名称： SSLVPNPOOL 172.31.200.10 - 172.31.200.100 配置SSL VPN访问实例 访问实例： KIRIP 关联网关：SSLVPNGW url acl: None IP业务： ​ IP接入接口：SSLVPN-AC1 INTERFACE ​ 客户端地址池：SSLVPNPOOL IP接入资源：添加要被VPN接入客户端访问的网络 : ROUTERLIST: ​ 172.16.1.0/24 ​ …… 不配置快捷方式，next 配置资源组 资源组名称：RESOURCEGROUP 指定路由接入VPN：子网资源 客户端地址池：SSLVPNPOOL 客户端掩码：24 acl：3999 (新建acl，rule permit ip) 完成配置，使能访问实例（勾上） 创建 SSLVPN 用户 填写用户名–&gt;&gt;勾选SSL VPN 授权属性： SSL VPN 策略组： resourcegroup Windows平台 iNode 客户端测试 新建场景–&gt;&gt;创建连接 查看连接状态和分配到的客户端地址 访问资源和跟踪路径","link":"/posts/ed57c1e2.html"},{"title":"H3C防火墙（v7）CVE2015-0204/CVE1999-0524","text":"深信服漏洞扫描系统（基线核查）执行漏扫任务，检测出华三 F5060 防火墙存在CVE 2015-0204,CVE 1999-0524漏洞，处理过程记录。 SSL/TLS:已弃用的TLSv1.0和TLSv1.1协议检测(CVE-2015-0204)漏洞描述： CVE-2015-0204:OpenSSL是OpenSSL团队开发的一个开源的能够实现安全套接层（SSL v2/v3）和安全传输层（TLS v1）协议的通用加密库，它支持多种加密算法，包括对称密码、哈希算法、安全散列算法等. OpenSSL的s3_clnt.c文件中的‘ssl3_get_key_exchange’函数存在安全漏洞.远程攻击者可通过提供临时的RSA密钥利用该漏洞实施RSA-to-EXPORT_RSA降级攻击，加快暴力破解进度.以下版本受到影响：OpenSSL 0.9.8zd之前版本，1.0.0p之前1.0.0版本，1.0.1k之前1.0.1版本. 分析处理： 根据描述是某些 TLS 版本存在该漏洞，那么解决思路就指向：把这些有漏洞的 TLS 版本不启用不就完事了。事实也是如此 待按步骤操作完后，iNode 客户端就拨不上了（配置了 SSLVPN 服务），提示找不到网关 起初以为是加密套件去掉的太多了（还有其他漏洞，诸如：CVE-2002-20001，CVE-2016-2183，CVE-2016-2183,，CVE-2016-6329，CVE-2013-2566，CVE-2015-2808， CVE-2015-4000，CVE-2015-0204），处理上面这些漏洞，看着漏洞描述去除了一些加密套件 又把这些去掉的加密套件加上测试了一轮，客户端还是拨号失败，直到把 TLS 1.0 加上，拨上了。 问题指向了 iNode 客户端，经过上官网下载最新版 iNode 定制了一个新版本客户端，无意中发现有个 TLS 版本的选项（只有TLS 1.0 和 TLS1.2可选），瞬间拨云见雾 大概率是这个防火墙自带的客户端版本默认使用了 TLS 1.0，而这个TLS 1.0 刚好处在漏洞描述中的受影响版本内 一轮操作后，漏扫设备不再检测出这个漏洞 ICMP权限许可和访问控制问题漏洞(CVE-1999-0524)漏洞描述： ICMP信息如netmask和timestamp允许任意主机访问. 分析处理： 根据描述，此漏洞属于信息级别，不在低危漏洞及以上范围 网络上已经有很多文章描述和处理这个漏洞 按照这个时间看，1999 年 CVE 收录和确认的漏洞，为什么过了20年 ICMP 协议还不处理？亦或是无法处理？ 解决方法有两个 配置一条安全策略阻断攻击者发送的 ICMP TYPE 13 CODE0 和 ICMP TYPE 17 CODE 0 的报文到达设备 配置高级 ACL 阻断攻击者发送的 ICMP TYPE 13 CODE0 和 ICMP TYPE 17 CODE 0 的报文到达设备 防火墙的本地IP地址有多个，使用 ACL 的话会繁琐，所以配置了安全策略 交换机和路由器设备，可以使用配置高级 ACL 的方式进行规避 12345678910# 配置高级 ACLacl advanced 3456 description FIX_FOR_CVE-1999-0524 rule 0 deny icmp icmp-type timestamp-request rule 5 deny icmp icmp-type 17 0 rule 10 permit ip# 接口过滤调用interface Vlan-interface XXX packet-filter 3456 inbound hardware-count#","link":"/posts/6d4cdc14.html"},{"title":"H3C 防火墙（v7）提取导出安全策略至表格","text":"当前日期时间： 20221201 版本:H3C Comware Software, Version 7.1.064, Release 9628P2416还没有安全策略导出到表格的功能，而有时确实有实际需求导出安全策略到表格，无论是存档还是提交报告 本文介绍使用python脚本语言编写一个根据display回显内容提取安全策略和对象组到表格的方法 环境介绍： Python 3.9.7 openpyxl 3.0.10 HCL 3.0.1 （现网环境都为敏感内容，勉为其难用模拟器） VScode 1.73.1 提取工作过程命令行登陆设备导出display回显内容利用SecureCRT的Log Session(记录日志)功能生成一个包含回显内容的log文件，放置在与脚本文件相同目录 本次使用的是205550.log'，在下面代码中更换为自己的文件名称 使用的命令 123456# 查看安全策略dis security-policy ip# 查看地址对象组dis object-group ip address # 查看服务对象组dis object-group service 123456789101112131415161718192021222324252627&lt;Core_FW&gt;dis security-policy ipSecurity-policy ip rule 2 name management-local action pass source-zone management destination-zone local………………&lt;Core_FW&gt;dis object-group ip address Ip address object group api.test.com: 1 object(in use) 0 network host name api.test.com………………&lt;Core_FW&gt;dis object-group service Service object group A服务器端口服务: 3 objects(in use) 0 service tcp destination eq 1433 10 service tcp destination range 300 3010 20 service udp destination eq 2222Service object group 访问test.comAPI接口: 2 objects(in use) 0 service tcp destination eq 443 10 service tcp destination range 9000 9100&lt;Core_FW&gt; 运行的代码from openpyxl import Workbookfrom openpyxl.styles import PatternFillimport openpyxlfrom datetime import datetimeclass SecPolicy2XLSX: # 初始化参数 def __init__(self): # 文件名时间部分，用于区别新旧 self.create_time = datetime.now().strftime(\"%Y%m%d%H%M%S\") # 读取文件，填写同目录从防火墙命令巴拉下来的文件 self.export_cfg = '205550.log' self.f = open(self.export_cfg, 'r', encoding='utf8') # 表格 - 表头数据 self.sheet1_th = [[ '名称', 'ID', '源安全域', '目的安全域', '类型', '描述', '源地址', \\ '目的地址', '服务', '用户', '动作', '内容安全', '记录日志', '策略匹配统计', '启用' ]] self.sheet2_th = [['对象组名称和被引用', '对象']] # 表格初始数据 self.wb = Workbook() self.ws1 = self.wb.active self.ws1.title = '安全策略' self.ws2 = self.wb.create_sheet('地址对象组') self.ws3 = self.wb.create_sheet('服务对象组') # 写入表头 for i in self.sheet1_th: self.ws1.append(i) for i in self.sheet2_th: self.ws2.append(i) self.ws3.append(i) # 提取安全策略信息 def sp_comtent(self): # 保存单条策略内容的字典 comtent_dict = {} # 保存以下几项内容的字典，原因在于命令行中显示为多个（每个一行） src_zone_list = [] dst_zone_list = [] src_ip_list = [] dst_ip_list = [] service_list = [] while True: cfg_line = self.f.readline() if 'rule' in cfg_line: name = cfg_line.strip().split(' ', 3)[3] id = cfg_line.split()[1] comtent_dict['name'] = name comtent_dict['id'] = id if 'source-zone' in cfg_line: src_zone_list.append(cfg_line.strip().split()[1]) if 'profile' in cfg_line: profile_type = cfg_line.strip().split()[1].split('_')[1] comtent_dict['profile_type'] = profile_type if 'description' in cfg_line: desc = cfg_line.strip()[12:] comtent_dict['desc'] = desc if 'destination-zone' in cfg_line: dst_zone_list.append(cfg_line.strip().split()[1]) if 'source-ip' in cfg_line: src_ip_list.append(cfg_line.strip().split(' ', 1)[1]) if 'destination-ip' in cfg_line: dst_ip_list.append(cfg_line.strip().split(' ', 1)[1]) if 'action' in cfg_line: action = cfg_line.strip().split()[1] comtent_dict['action'] = action if 'logging ' in cfg_line: logg = cfg_line.strip().split()[1] comtent_dict['logg'] = logg if 'counting ' in cfg_line: count = cfg_line.strip().split()[1] comtent_dict['count'] = count if 'disable' in cfg_line: # enable = cfg_line.strip() comtent_dict['enable'] = 'disable' if 'service' in cfg_line: service_list.append(cfg_line.strip().split(' ', 1)[1]) # display 回显的内容 空行分割一条安全策略 if cfg_line.strip() == '': break # 把最终列表拼接到字符串 src_zone = ','.join(src_zone_list) dst_zone = ','.join(dst_zone_list) src_ip = ','.join(src_ip_list) dst_ip = ','.join(dst_ip_list) service = ','.join(service_list) # 把最终列表拼接到字符串写入comtent_dict字典 comtent_dict['src_zone'] = src_zone comtent_dict['dst_zone'] = dst_zone comtent_dict['src_ip'] = src_ip comtent_dict['dst_ip'] = dst_ip comtent_dict['service'] = service # 返回值是单条安全策略的字典 return comtent_dict # 提取地址对象组信息 def ip_obj_comtent(self): comtent_dict = {} networw_list = [] while True: cfg_line = self.f.readline() if 'Ip address object group' in cfg_line: name = cfg_line.strip().split(' ', 4)[4] comtent_dict['name'] = name if 'network ' in cfg_line: networw_list.append(cfg_line.strip().split(' ', 2)[2]) if cfg_line.strip() == '': break networw_list = ','.join(networw_list) comtent_dict['networw_list'] = networw_list # 返回值是单个地址对象组的字典 return comtent_dict # 提取服务对象组信息 def service_obj_comtent(self): comtent_dict = {} service_list = [] while True: cfg_line = self.f.readline() if 'Service object group' in cfg_line: name = cfg_line.strip().split(' ', 3)[3] comtent_dict['name'] = name if 'service tcp' in cfg_line or 'service udp' in cfg_line: service_list.append(cfg_line.strip().split(' ', 2)[2]) if cfg_line.strip() == '': break service_list = ','.join(service_list) comtent_dict['service_list'] = service_list # 返回值是单个服务对象组的字典 return comtent_dict # 循环 返回全部安全策略的生成器 def more_sp_comtent(self): # 找到文件末 的指针，用于判断是否读取完整个文件 eof = self.f.seek(0, 2) self.f.seek(0, 0) while True: res = self.sp_comtent() yield res if self.f.tell() &gt;= eof: break # 循环 返回全部地址对象组的生成器 def more_ip_comtent(self): eof = self.f.seek(0, 2) self.f.seek(0, 0) while True: res = self.ip_obj_comtent() yield res if self.f.tell() &gt;= eof: break # 循环 返回全部服务对象组的生成器 def more_service_comtent(self): eof = self.f.seek(0, 2) self.f.seek(0, 0) while True: res = self.service_obj_comtent() yield res if self.f.tell() &gt;= eof: break # 安全策略，移除和填充内容字典元素 def sp_fill_task(self): # 生成器 转 列表套字典 res = self.more_sp_comtent() comtent_list = list(res) # 移除不相干元素，列表套字典中字典不包含 'name' 键的字典 index_list = [] for i in comtent_list: key_list = list(i.keys()) if 'name' not in key_list: # 字典中不包含 'name' 键的字典在comtent_list列表的索引值 index_list.append(comtent_list.index(i)) # 索引列表去重--&gt;&gt;降序排列--&gt;&gt;删元素 index_list = list(set(index_list)) index_list.sort(reverse=True) for i in index_list: comtent_list.pop(i) # comtent_list列表去重 ret_comtent_list = [] for i in comtent_list: if i not in ret_comtent_list: ret_comtent_list.append(i) # 去头 ret_comtent_list = ret_comtent_list[1:] # 添加一些默认值，一些安全策略值在display回显的内容不显示 for i in ret_comtent_list: i['user'] = 'Any' # 一般应用安全都是使用默认配置文件中default策略，如有自定义的配置文件就增加一个提取函数 i['ap_profile'] = 'default' i.setdefault('desc', '-') # 安全策略没有启用显示disable，启用了display没有显示 i.setdefault('enable', 'enable') # IPv4 网络环境默认 i.setdefault('profile_type', 'IPv4') # 命中计数和流量统计，没有启用不在display显示 i.setdefault('count', 'disable') # 记录日志 i.setdefault('logg', 'enable') # print(i) # 键的值为空则替换为 Any ret_comtent_list = [{k: v if v and k != 'desc' else 'Any' for k, v in i.items()} for i in ret_comtent_list] # 最后一条拒绝所有策略的描述 ret_comtent_list[-1]['desc'] = '' self.ret_comtent_list = ret_comtent_list # 返回一个完整的列表套字典 return self.ret_comtent_list # 地址对象组，移除和填充内容字典元素 def ip_fill_task(self): # 生成器 转 列表套字典 res = self.more_ip_comtent() comtent_list = list(res) # 列表去重 ret_comtent_list = [] for i in comtent_list: if i not in ret_comtent_list: ret_comtent_list.append(i) # 去头 ret_comtent_list = ret_comtent_list[1:] self.ret_comtent_list = ret_comtent_list return self.ret_comtent_list def service_fill_task(self): # 生成器 转 列表套字典 res = self.more_service_comtent() comtent_list = list(res) # 列表去重 ret_comtent_list = [] for i in comtent_list: if i not in ret_comtent_list: ret_comtent_list.append(i) # 去头 ret_comtent_list = ret_comtent_list[1:] self.ret_comtent_list = ret_comtent_list # 在此处关闭文件 self.f.close() return self.ret_comtent_list # 写入数据到表格 - 安全策略工作表 def write2ws1(self): # 从第二行开始写入 row = 2 big_list = self.sp_fill_task() for i in big_list: self.ws1.cell(row=row, column=1, value=i['name']) self.ws1.cell(row=row, column=2, value=i['id']) self.ws1.cell(row=row, column=3, value=i['src_zone']) self.ws1.cell(row=row, column=4, value=i['dst_zone']) self.ws1.cell(row=row, column=5, value=i['profile_type']) self.ws1.cell(row=row, column=6, value=i['desc']) self.ws1.cell(row=row, column=7, value=i['src_ip']) self.ws1.cell(row=row, column=8, value=i['dst_ip']) self.ws1.cell(row=row, column=9, value=i['service']) self.ws1.cell(row=row, column=10, value=i['user']) self.ws1.cell(row=row, column=11, value=i['action']) self.ws1.cell(row=row, column=12, value=i['ap_profile']) self.ws1.cell(row=row, column=13, value=i['logg']) self.ws1.cell(row=row, column=14, value=i['count']) self.ws1.cell(row=row, column=15, value=i['enable']) row += 1 # 写入数据到表格 - 地址对象组工作表 def write2ws2(self): row = 2 big_list = self.ip_fill_task() for i in big_list: self.ws2.cell(row=row, column=1, value=i['name']) self.ws2.cell(row=row, column=2, value=i['networw_list']) row += 1 # 写入数据到表格 - 地址对象组工作表 def write2ws3(self): row = 2 big_list = self.service_fill_task() for i in big_list: self.ws3.cell(row=row, column=1, value=i['name']) self.ws3.cell(row=row, column=2, value=i['service_list']) row += 1 # 调整表格显示 保存xlsx表格 def save_to_file(self): # 修改ws1列宽 self.ws1.column_dimensions['A'].width = 50 self.ws1.column_dimensions['B'].width = 4 self.ws1.column_dimensions['C'].width = 46 self.ws1.column_dimensions['D'].width = 38 self.ws1.column_dimensions['F'].width = 50 self.ws1.column_dimensions['G'].width = 50 self.ws1.column_dimensions['H'].width = 50 self.ws1.column_dimensions['I'].width = 50 self.ws1.column_dimensions['N'].width = 12 # 修改ws2列宽 self.ws2.column_dimensions['A'].width = 50 self.ws2.column_dimensions['B'].width = 255 # 修改ws3列宽 self.ws3.column_dimensions['A'].width = 50 self.ws3.column_dimensions['B'].width = 255 # 修改列 垂直居中 自动换行，表头背景色 ，冻结首行 self.ws1.freeze_panes = 'A2' self.ws2.freeze_panes = 'A2' self.ws3.freeze_panes = 'A2' th_color_fill = PatternFill('solid', fgColor='D3D3D3') for col in range(1, 16): self.ws1.cell(row=1, column=col).fill = th_color_fill for col in range(1, 3): self.ws2.cell(row=1, column=col).fill = th_color_fill for col in range(1, 3): self.ws3.cell(row=1, column=col).fill = th_color_fill for r in self.ws1: for c in r: c.alignment = openpyxl.styles.Alignment(vertical='center', wrapText=True) for r in self.ws2: for c in r: c.alignment = openpyxl.styles.Alignment(vertical='center', wrapText=True) for r in self.ws3: for c in r: c.alignment = openpyxl.styles.Alignment(vertical='center', wrapText=True) # 保存并生成文件 self.wb.save(f'XXX防火墙安全策略统计{self.create_time}.xlsx')if __name__ == '__main__': # 类实例化 x = SecPolicy2XLSX() # res = x.sp_comtent() # res = x.more_comtent() # res = x.more_ip_comtent() # for i in res: # print(i) # x.ip_fill_task() x.write2ws1() x.write2ws2() x.write2ws3() x.save_to_file() print('搞快点--&gt;&gt;搞快点--&gt;&gt;') 导出的表格","link":"/posts/f285fb93.html"},{"title":"Ubuntu 22.04 安装iNode管理中心和定制客户端","text":"Ubuntu 22.04安装iNode管理中心和定制客户端，如题 官网下载安装文件 从官网下载 iNode PC(PC客户端)（https://www.h3c.com/cn/Service/Document_Software/Software_Download/IP_Management/ 解压后将Linux目录下的iNodeManager_H3C_Linux64_7.30(E0598).tar.gz上传至 Ubuntu Downloads目录 解压和安装 解压文件，并将解压后的文件夹所有者更改为当前用户， 移动文件夹至 /home 目录 修改文件夹下 install64.sh 的权限 安装文件 12345678执行命令：kir@kir:~/Downloads$ sudo tar -zxvf iNodeManager_H3C_Linux64_7.30\\(E0598\\).tar.gz kir@kir:~/Downloads$ sudo chown -R kir iNodeManagerkir@kir:~/Downloads$ sudo mv iNodeManager /home/kir@kir:~/Downloads$ cd /home/kir@kir:/home$ cd iNodeManager/kir@kir:/home/iNodeManager$ sudo chmod u+x install64.shkir@kir:/home/iNodeManager$ sudo sh install64.sh 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106操作步骤记录：kir@kir:~$ kir@kir:~$ pwd/home/kirkir@kir:~$ cd Downloads/kir@kir:~/Downloads$ lltotal 44368drwxr-xr-x 2 kir kir 4096 11月 26 11:40 ./drwxr-x--- 16 kir kir 4096 11月 26 01:51 ../-rw-rw-r-- 1 kir kir 45422267 6月 30 22:10 'iNodeManager_H3C_Linux64_7.30(E0598).tar.gz'kir@kir:~/Downloads$ kir@kir:~/Downloads$ sudo tar -zxvf iNodeManager_H3C_Linux64_7.30\\(E0598\\).tar.gz [sudo] password for kir: ./iNodeManager/./iNodeManager/7za./iNodeManager/template/./iNodeManager/template/iNodeClient_Linux64.tar.gz./iNodeManager/install64.sh.bak./iNodeManager/Resources/./iNodeManager/Resources/Language_en.xml./iNodeManager/Resources/Language_zh.xml./iNodeManager/uninstall64.sh.bak./iNodeManager/qt_zh_CN.qm./iNodeManager/uninstall64.sh./iNodeManager/install64.sh./iNodeManager/makeDeb.sh./iNodeManager/imageformats/./iNodeManager/imageformats/libqmng.so./iNodeManager/imageformats/libqjpeg.so./iNodeManager/imageformats/libqsvg.so./iNodeManager/imageformats/libqico.so./iNodeManager/imageformats/libqtga.so./iNodeManager/imageformats/libqwbmp.so./iNodeManager/imageformats/libqtiff.so./iNodeManager/imageformats/libqgif.so./iNodeManager/platforms/./iNodeManager/platforms/libqoffscreen.so./iNodeManager/platforms/libqminimal.so./iNodeManager/platforms/libqxcb.so./iNodeManager/platforms/libqlinuxfb.so./iNodeManager/lib64.tar.gz./iNodeManager/iNodeManager./iNodeManager/iNode.vifkir@kir:~/Downloads$ lltotal 44372drwxr-xr-x 3 kir kir 4096 11月 26 13:29 ./drwxr-x--- 16 kir kir 4096 11月 26 01:51 ../drwxrwxr-x 6 500 500 4096 6月 30 20:13 iNodeManager/-rw-rw-r-- 1 kir kir 45422267 6月 30 22:10 'iNodeManager_H3C_Linux64_7.30(E0598).tar.gz'kir@kir:~/Downloads$ sudo chown -R kir iNodeManagerkir@kir:~/Downloads$ sudo mv iNodeManager /home/kir@kir:~/Downloads$ cd /home/kir@kir:/home$ lltotal 16drwxr-xr-x 4 root root 4096 11月 26 13:30 ./drwxr-xr-x 20 root root 4096 11月 26 01:28 ../drwxrwxr-x 6 kir 500 4096 6月 30 20:13 iNodeManager/drwxr-x--- 16 kir kir 4096 11月 26 01:51 kir/kir@kir:/home$ cd iNodeManager/kir@kir:/home/iNodeManager$ lltotal 19712drwxrwxr-x 6 kir 500 4096 6月 30 20:13 ./drwxr-xr-x 4 root root 4096 11月 26 13:30 ../-rw-rw-r-- 1 kir 500 1125104 6月 30 20:13 7zadrwxrwxr-x 2 kir 500 4096 6月 30 20:13 imageformats/-rwxrwxr-x 1 kir 500 810603 6月 30 20:13 iNodeManager*-rw-rw-r-- 1 kir 500 300 6月 30 20:13 iNode.vif-rw-rw-r-- 1 kir 500 63 6月 30 20:13 install64.sh-rw-rw-r-- 1 kir 500 959 6月 30 20:13 install64.sh.bak-rw-rw-r-- 1 kir 500 18079733 6月 30 20:13 lib64.tar.gz-rw-rw-r-- 1 kir 500 926 6月 30 20:13 makeDeb.shdrwxrwxr-x 2 kir 500 4096 6月 30 20:13 platforms/-rw-rw-r-- 1 kir 500 117337 6月 30 20:13 qt_zh_CN.qmdrwxrwxr-x 2 kir 500 4096 6月 30 20:13 Resources/drwxrwxr-x 2 kir 500 4096 6月 30 20:13 template/-rw-rw-r-- 1 kir 500 41 6月 30 20:13 uninstall64.sh-rw-rw-r-- 1 kir 500 924 6月 30 20:13 uninstall64.sh.bakkir@kir:/home/iNodeManager$ sudo chmod u+x install64.shkir@kir:/home/iNodeManager$ kir@kir:/home/iNodeManager$ sudo sh install64.sh lib64/lib64/libQt5DBus.so.5.1.1lib64/libQt5DBus.so.5.1lib64/libQt5DBus.so.5lib64/libicudata.so.51.1lib64/libicudata.so.51lib64/libicui18n.so.51.1lib64/libicui18n.so.51lib64/libQt5Core.so.5.1.1lib64/libQt5Core.so.5.1lib64/libQt5Core.so.5lib64/libQt5Gui.so.5.1.1lib64/libQt5Xml.so.5.1.1lib64/libQt5Xml.so.5.1lib64/libQt5Xml.so.5lib64/libicuuc.so.51.1lib64/libicuuc.so.51lib64/libQt5Network.so.5lib64/libQt5Gui.so.5.1lib64/libQt5Gui.so.5lib64/libQt5Widgets.so.5.1.1lib64/libQt5Network.so.5.1.1lib64/libQt5Widgets.so.5.1lib64/libQt5Widgets.so.5lib64/libQt5Network.so.5.1kir@kir:/home/iNodeManager$ 启动管理中心和定制客户端 启动管理中心（图形化界面操作），路径位于/home/iNodeManager 仅勾选 SSL VPN 一项（按需勾选），点击 Advanced 添加 网关地址 （与防火墙上配置的网关 SSLVPNGW 一致），点击 OK，点击 Finish 填写一个标题，勾选第一项 定制完成后 生成的客户端文件位于/home/iNodeManager/iNodeSetup 1234567kir@kir:/home/iNodeManager$ cd iNodeSetup/kir@kir:/home/iNodeManager/iNodeSetup$ lltotal 25260drwxrwxr-x 2 kir kir 4096 11月 26 13:39 ./drwxrwxr-x 11 kir 500 4096 11月 26 13:39 ../-rw-rw-r-- 1 kir kir 25857547 11月 26 13:39 'iNodeClient_Linux64_7.3 (E0598).tar.gz'kir@kir:/home/iNodeManager/iNodeSetup$ 安装 iNode 客户端 将iNodeClient_Linux64_7.3 (E0598).tar.gz文件解压，并移动 iNodeClient 文件夹至/home目录 123456789101112131415161718192021kir@kir:/home/iNodeManager/iNodeSetup$ kir@kir:/home/iNodeManager/iNodeSetup$ sudo tar -zxvf iNodeClient_Linux64_7.3\\ \\(E0598\\).tar.gz ………………kir@kir:/home/iNodeManager/iNodeSetup$ lltotal 25264drwxrwxr-x 3 kir kir 4096 11月 26 13:44 ./drwxrwxr-x 11 kir 500 4096 11月 26 13:39 ../drwxr-xr-x 9 kir kir 4096 6月 30 20:07 iNodeClient/-rw-rw-r-- 1 kir kir 25857547 11月 26 13:39 'iNodeClient_Linux64_7.3 (E0598).tar.gz'kir@kir:/home/iNodeManager/iNodeSetup$ sudo mv iNodeClient /home/kir@kir:/home/iNodeManager/iNodeSetup$ cd /home/kir@kir:/home$ lltotal 20drwxr-xr-x 5 root root 4096 11月 26 13:46 ./drwxr-xr-x 20 root root 4096 11月 26 01:28 ../drwxr-xr-x 9 kir kir 4096 6月 30 20:07 iNodeClient/drwxrwxr-x 11 kir 500 4096 11月 26 13:39 iNodeManager/drwxr-x--- 16 kir kir 4096 11月 26 01:51 kir/kir@kir:/home$ 切换至iNodeClient 文件夹 ，执行 sh install_64.sh 12345kir@kir:/home$ cd iNodeClient/kir@kir:/home/iNodeClient$ sudo sh install_64.sh Nothing special for Ubuntu 22.04.1 LTS \\lStarting AuthenMngService: OK 启动 iNode 客户端 图形界面 进入/home/iNodeClient/.iNode目录（看不到.iNode 文件夹，先勾选显示隐藏文件） 双击iNodeClient启动，创建一个连接（填写name,Username,Password) SSLVPN 拨号 查看获取到的客户端地址，并测试 防火墙查看 SSLVPN 会话信息 最后 我电脑Windows + Ubuntu 22.04 双系统，在现网环境中都可正常使用 SSLVPN Ubuntu 截图和写Markdown发博客不方便（最重要的 HCL 没有Linux版本），所以拉了个虚拟机 按照官方的安装指导手册以普通用户安装，最后定制生成客户端会无法生成文件，需要在解压后将iNodeManager文件夹所有者更改为当前普通用户 在客户端创建新连接时，认证类型要选择 Local，否则拨号后提示网关参数错误 在定制客户端最后一步有三个选项 Generate customized client setup program(生成一个安装包，常用) Generate customized client upgrade package(升级包，使用前本地已经安装有旧版本，理解为增量升级包) Generate lightweight client upgrade package(用于放在服务端，在防火墙的SSL VPN–&gt;&gt;全局配置–&gt;&gt;上传客户端文件位置，在浏览器输入SSLVPNGW:4443可已打开页面，底下一行有下载的链接，就是下载这个文件)","link":"/posts/4eda38e9.html"},{"title":"Hexo推送提示输入账号密码问题","text":"今天推送 Github Pages 博客发现需要输入账号密码，网页端检查SSH Keys 和本地检查公钥pub都没问题 最后通过搜索引擎助力，修改 https 方式为 git 方式，成功推送 方法：修改博客目录下的_config.yml文件配置（不是主题目录下的配置文件） 123456789# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git # repo: https://github.com/kiraster/kiraster.github.io.git # 20221201发现使用https方式需要输入验证账号密码，修改为git方式后正常推送 repo: git@github.com:kiraster/kiraster.github.io.git branch: master","link":"/posts/5826b49.html"},{"title":"自动备份Hexo源文件到私有仓库","text":"Hexo 部署到Github的文件不包含主题文件，md文件，模版，配置文件等，在新电脑要重新部署相同环境写博客就要拷贝这些文件过去，可以通过文件共享，U盘拷贝，云盘等手段 还有一种方法就是把这些文件也推送到Github仓库，网上看到有一个hexo-git-backup可以把源码推送到仓库分支实现备份。但是我觉得这样不妥，由于部署到Github的静态网站仓库是公开的，把源文推送这个分支，意味着所有人都可以看到源文件的配置，包括一些个人的信息，可能有网站统计，收录的token，这样就不太好 看到一篇博文（https://0skyu.cn/p/a8bd.html） 就整的非常好，其中原理过程可以自行去研究 我参考这篇文章记录我自己的过程和操作 新建Github私有仓库不用初始化创建README文件， 本地Hexo目录git设置…or create a new repository on the command line 1234567echo \"# hexo-source-backup\" &gt;&gt; README.mdgit initgit add README.mdgit commit -m \"first commit\"git branch -M maingit remote add origin git@github.com:kiraster/hexo-source-backup.gitgit push -u origin main 使用上面的命令进行设置，进行第一次push推送，到 Github 网页端查看是否有文件上传 出现 error: failed to push some refs to 错误，使用强制命令git pull origin master --allow-unrelated-historie，如果还有其他命令报错自行查看文档或 Google，都是简单的小问题搜索引擎第一页就有 网上很多文章说要修改或创建一个名称为.gitignore的文件，其实这个在你部署静态文件到公共仓库就会有，保持默认就行 除此之外，有些主题在主题目录下有.gitignore文件，一般主题作者不会把主题配置文件_config.yml上传，这里要把这行去掉，使之上传到私有仓库 12345678.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/_multiconfig.yml 安装 shelljs 模块1npm install --save shelljs 自动备份脚本创建一个js脚本文件，保存在博客目录下的scripts目录，文件名称自己定 第 38 行 的双引号提交信息 任意修改 第 15 和 41 行 的分支名称注意 保持和第二步骤中的保持一致，有些用人喜欢用main有些人喜欢用master 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647require('shelljs/global');const logger = require('hexo-log')();/* 危险操作，注意查看控制台提示！！！*/hexo.on('generateBefore', function() { logger.info(\"Start pulling\\n==================================================\"); pullToLocal(); });function pullToLocal() { if (exec('git stash').code !== 0) { logger.error('暂时存放出错，请查看提示处理'); } if (exec('git pull origin main').code !== 0) { logger.error('同步到本地出错，请检查网络连接查看提示处理'); } if (exec('git stash pop').code !== 0) { logger.error('重新应用缓存的stash出错，请查看提示处理'); process.exit(-1); } logger.info(\"Pull done\\n==================================================\"); }try { hexo.on('deployAfter', function() { logger.info(\"Start pushing\\n==================================================\"); pushToPrivateRepo(); });} catch (e) { logger.info(\"博客源码推送至私有仓库异常，错误提示：\" + e.toString());}function pushToPrivateRepo() { if (exec('git add .').code !== 0) { logger.warn(\"添加文件到暂存区出错\"); } if (exec('git commit -m \"Auto backup\"').code !== 0) { logger.warn(\"没有提交的新内容或提交暂存区到本地仓库错误\"); } if (exec('git push origin main').code !== 0) { logger.warn(\"推送代码至github main 主分支出错\"); } logger.info(\"Push done\\n==================================================\") console.log(\"Ctrl + C 退出或关闭窗口退出或60秒后自动退出\"); setTimeout(() =&gt; console.log('q'), 60000) } 推送执行hexo clean &amp;&amp; hexo g &amp;&amp; hexo d会自动调用这个脚本 123456789101112131415161718192021222324252627282930…………INFO Start pulling==================================================Saved working directory and index state WIP on main: 4978dc8 Auto backupFrom github.com:kiraster/xxxx-xx * branch main -&gt; FETCH_HEADAlready up to date.On branch mainChanges not staged for commit: (use \"git add &lt;file&gt;...\" to update what will be committed) (use \"git restore &lt;file&gt;...\" to discard changes in working directory) modified: source/_posts/xxxx-xx.mdno changes added to commit (use \"git add\" and/or \"git commit -a\")Dropped refs/stash@{0} (ce84730faef3bc908459561ad81e352ec3daeda6)INFO Pull done==================================================…………INFO Deploy done: gitINFO Start pushing==================================================[main 0f532bb] Auto backup 1 file changed, 1 insertion(+), 1 deletion(-)To github.com:kiraster/xxxx-xx.git 4481470..0f532bb main -&gt; mainINFO Push done==================================================Ctrl + C 退出或关闭窗口退出或60秒后自动退出 注意： 出现没有提交新内容到缓冲区，推送等错误，按提示排查错误即可 看到原博客出现要切换到博客目录的这一行脚本命令，我觉得在推送博客的时候你就已经切换到博客目录，去掉这一行","link":"/posts/310ece77.html"},{"title":"Hexo环境新电脑环境重构","text":"在上上篇博文中描述了如何将博客源文件推送到GitHub私有仓库备份，这篇文将讲述如何从GitHub私有仓库clone至本地重构 Hexo 环境来写博客 网上也有很多文章描述如何操作，也可以去参考，我记录我的操作过程如下 下载安装Git 和 node.js 去官网下载软件包Git (git-scm.com)，以往的版本 | Node.js (nodejs.org) Git 版本可安装最新的或保持和原环境一致版本 Hexo 版本和原环境的保持一致（npm安装@指定版本号：npm install -g hexo-cli@4.x.x） node.js 版本保持和原环境一致，因为 Hexo 版本 对 node.js 版本有要求 安装过程基本点“下一步”，注意环境变量的“Add to PATH”勾上 克隆私有仓库至本地添加本地 Git 配置注意：因为是私有仓库，克隆需要验证权限，安装完成 Git 后先配置用户、邮箱、ssh keys 123我使用的全局配置用户，对于同时推送代码到不同网站的，请按照多用户多仓库的方法配置git config --global user.name \"xxx\"git config --global user.email \"xxx@xxx.com\" 生成公钥，添加 Github SSH Keys123456789生成公钥ssh-keygen -t \"选一个官方的算法\" -C xxx@xxx.com然后接下来的你应该懂了，复制公钥内容--&gt;&gt;粘贴到Github的 SSH Keys --&gt;&gt; 添加测试连接$ ssh -T git@github.comHi xxxx! You've successfully authenticated, but GitHub does not provide shell access.有上面的提示说明成功了 克隆私有仓库至本地git clone 命令跟一个本地路径，克隆下来的文件就在这个目录了，不加目录克隆的话克隆下来的是包含你私有仓库名称的一个文件夹 注意：命令后跟的本地路径，不要手动创建，否则会提示目录已存在，克隆失败 1git clone git@github.com:kiraster/xxxx-xx.git \"D:\\Blog\" 安装 Hexo 和 其他npm插件注意：重构 Hexo 环境只需以下的文件，但是其他文件也可以存在 package-lock.json这个文件如果执行下一步提示报错就删掉，或者直接删掉 12345_config.ymlpackage.jsonscaffolds/source/themes/ 安装 Hexo 和 其他插件1234567安装 Hexo 保持和原电脑的版本一致# 查看版本hexo -v# 安装npm install -g hexo-cli@4.x.x# 安装后查看版本hexo -v 12345678910安装npm # 修改npm 淘宝镜像npm confg set http://registry.npm.taobao.org# 查看设置npm config list# 安装 npmnpm install若这一步报错ERROR Try running: 'rm -rf node_modules &amp;&amp; npm install --force' 按照提示操作rm -rf node_modules &amp;&amp; npm install --forcenpm会按照 package.json 这个文件的内容自动按照插件，你也可以记事本打开这个文件查看安装的插件 注意： 一些插件提示不再更新维护支持之类的，取决于主题使用到的插件和旧版本 Hexo 使用的插件，大家自己决定 一些插件可能需要从 GitHub 公共仓库下载文件，保障新电脑网络环境能联网 我的环境就是有个文件下载不来，所以去手动下载，拷贝到对应的目录 大家可以看提示错误，按提示操作，查缺补漏，少的模块文件 本地启动预览1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 观察启动过程，是否有报错信息，按提示解决对象报错，不明的可以去搜索引擎 scripts/下的脚本，如果新电脑和原电脑路径等不一致记得修改 完成这一步骤，基本上就大功告成了 推送至 GitHub 仓库1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 因为这一步我的环境有 自动备份源文件到 私有仓库的脚本所以要按照上上篇文章的方式操作一轮 设置本地 Hexo 目录的 Git 123git initgit branch -M maingit remote add origin git@github.com:kiraster/xxxx-xx.git 完结。","link":"/posts/567e6fc3.html"},{"title":"Ubuntu Server 22.04 安装 Gitlab-ce","text":"本文记录VMware Workstation 环境下Ubuntu server 22.04系统安装gitlab-ce_15.8.3的过程。 准备环境 一台安装好 ubuntu server的虚拟机 ubuntu可联网 SecureCRT软件（或其它带SSH登陆功能的工具） 更新软件包信息和安装软件首先设置好国内更新源，在安装Ubuntu的时候我已经填写了阿里云的站点（mirrors.aliyun.com/ubuntu），如果你没有修改这一项，登陆服务器后修改 /etc/apt/sources.list即可 1sudo apt-get update 安装或更新以下软件（虽然安装Ubuntu的时候勾选了Openssh但是不是最新版本，提示升级） 1sudo apt-get install curl openssh-server ca-certificates postfix 命令回显 123456789101112131415161718192021222324kir@gitlabserver:/etc/apt$ sudo apt-get install curl openssh-server ca-certificates postfix Reading package lists... DoneBuilding dependency tree... DoneReading state information... DoneThe following additional packages will be installed: libcurl4 openssh-client openssh-sftp-server ssl-certSuggested packages: keychain libpam-ssh monkeysphere ssh-askpass molly-guard procmail postfix-mysql postfix-pgsql postfix-ldap postfix-pcre postfix-lmdb postfix-sqlite sasl2-bin | dovecot-common resolvconf postfix-cdb mail-reader postfix-mta-sts-resolver postfix-docThe following NEW packages will be installed: postfix ssl-certThe following packages will be upgraded: ca-certificates curl libcurl4 openssh-client openssh-server openssh-sftp-server6 upgraded, 2 newly installed, 0 to remove and 181 not upgraded.Need to get 3,271 kB of archives.After this operation, 4,243 kB of additional disk space will be used.Do you want to continue? [Y/n] yGet:1 http://mirrors.aliyun.com/ubuntu jammy-updates/main amd64 openssh-sftp-server amd64 1:8.9p1-3ubuntu0.1 [38.7 kB]Get:2 http://mirrors.aliyun.com/ubuntu jammy-updates/main amd64 openssh-server amd64 1:8.9p1-3ubuntu0.1 [434 kB]Get:3 http://mirrors.aliyun.com/ubuntu jammy-updates/main amd64 openssh-client amd64 1:8.9p1-3ubuntu0.1 [908 kB]……………… postfix 软件安装后会弹出一个”Postfix Configuration”向导，直接选No configuration不进行配置（本地环境不实用） 下载和安装gitlab-ce_15.8.3这个看各自网络的网速，官网下载（ubuntu/jammy/gitlab-ce_15.8.3-ce.0_amd64.deb - gitlab/gitlab-ce · packages.gitlab.com） 清华镜像站下载（Index of /gitlab-ce/ubuntu/pool/jammy/main/g/gitlab-ce/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror） 下载完成后，校验一下MD5值，对比官网提供的校验信息 12kir@gitlabserver:~$ sudo md5sum gitlab-ce_15.8.3-ce.0_amd64.deb feaecd81f1b2a39600114c873b1b9085 gitlab-ce_15.8.3-ce.0_amd64.deb 命令回显： 12345678910111213141516171819202122232425262728293031323334353637383940414243kir@gitlabserver:~$ sudo dpkg -i gitlab-ce_15.8.3-ce.0_amd64.deb Selecting previously unselected package gitlab-ce.(Reading database ... 73398 files and directories currently installed.)Preparing to unpack gitlab-ce_15.8.3-ce.0_amd64.deb ...Unpacking gitlab-ce (15.8.3-ce.0) ...Setting up gitlab-ce (15.8.3-ce.0) ...It looks like GitLab has not been configured yet; skipping the upgrade script. *. *. *** *** ***** ***** .****** ******* ******** ******** ,,,,,,,,,***********,,,,,,,,, ,,,,,,,,,,,*********,,,,,,,,,,, .,,,,,,,,,,,*******,,,,,,,,,,,, ,,,,,,,,,*****,,,,,,,,,. ,,,,,,,****,,,,,, .,,,***,,,, ,*,. _______ __ __ __ / ____(_) /_/ / ____ _/ /_ / / __/ / __/ / / __ `/ __ \\ / /_/ / / /_/ /___/ /_/ / /_/ / \\____/_/\\__/_____/\\__,_/_.___/ Thank you for installing GitLab!GitLab was unable to detect a valid hostname for your instance.Please configure a URL for your GitLab instance by setting `external_url`configuration in /etc/gitlab/gitlab.rb file.Then, you can start your GitLab instance by running the following command: sudo gitlab-ctl reconfigureFor a comprehensive list of configuration options please see the Omnibus GitLab readmehttps://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.mdHelp us improve the installation experience, let us know how we did with a 1 minute survey:https://gitlab.fra1.qualtrics.com/jfe/form/SV_6kVqZANThUQ1bZb?installation=omnibus&amp;release=15-8 修改外部url和reconfigure 修改/etc/gitlab/下的gitlab.rb文件，external_url直接修改为ubuntu系统的的IP地址，如果 80 端口有冲突可在后边加上端口号 1external_url 'http://192.168.x.x' 1234567891011121314kir@gitlabserver:~$ cd /etc/gitlabkir@gitlabserver:/etc/gitlab$ lltotal 148drwxr-xr-x 2 root root 4096 Feb 23 03:49 ./drwxr-xr-x 102 root root 4096 Feb 23 03:49 ../-rw------- 1 root root 140235 Feb 23 03:49 gitlab.rbkir@gitlabserver:/etc/gitlab$ sudo cp gitlab.rb gitlab.rb_bakkir@gitlabserver:/etc/gitlab$ lltotal 288drwxr-xr-x 2 root root 4096 Feb 23 03:50 ./drwxr-xr-x 102 root root 4096 Feb 23 03:49 ../-rw------- 1 root root 140235 Feb 23 03:49 gitlab.rb-rw------- 1 root root 140235 Feb 23 03:50 gitlab.rb_bakkir@gitlabserver:/etc/gitlab$ sudo nano gitlab.rb 重配置（这一步骤耗时较长） 12345678910111213141516171819202122232425262728kir@gitlabserver:/opt/gitlab/bin$ sudo gitlab-ctl reconfigure[2023-02-23T03:52:56+00:00] INFO: Started Cinc Zero at chefzero://localhost:1 with repository at /opt/gitlab/embedded (One version per cookbook)Cinc Client, version 17.10.0Patents: https://www.chef.io/patentsInfra Phase starting[2023-02-23T03:52:57+00:00] INFO: *** Cinc Client 17.10.0 ***[2023-02-23T03:52:57+00:00] INFO: Platform: x86_64-linux[2023-02-23T03:52:57+00:00] INFO: Cinc-client pid: 18551[2023-02-23T03:52:58+00:00] INFO: Setting the run_list to [\"recipe[gitlab]\"] from CLI options[2023-02-23T03:52:58+00:00] INFO: Run List is [recipe[gitlab]][2023-02-23T03:52:58+00:00] INFO: Run List expands to [gitlab][2023-02-23T03:52:58+00:00] INFO: Starting Cinc Client Run for gitlabserver[2023-02-23T03:52:58+00:00] INFO: Running start handlers[2023-02-23T03:52:58+00:00] INFO: Start handlers complete.Resolving cookbooks for run list: [\"gitlab\"]………………Notes:Default admin account has been configured with following details:Username: rootPassword: You didn't opt-in to print initial root password to STDOUT.Password stored to /etc/gitlab/initial_root_password. This file will be cleaned up in first reconfigure run after 24 hours.NOTE: Because these credentials might be present in your log files in plain text, it is highly recommended to reset the password following https://docs.gitlab.com/ee/security/reset_user_password.html#reset-your-root-password.gitlab Reconfigured! 重启gitlab 12345678910111213141516kir@gitlabserver:/opt/gitlab/bin$ sudo gitlab-ctl restartok: run: alertmanager: (pid 21046) 0sok: run: gitaly: (pid 21058) 0sok: run: gitlab-exporter: (pid 21077) 0sok: run: gitlab-kas: (pid 21085) 0sok: run: gitlab-workhorse: (pid 21095) 1sok: run: logrotate: (pid 21107) 0sok: run: nginx: (pid 21115) 0sok: run: node-exporter: (pid 21123) 1sok: run: postgres-exporter: (pid 21129) 0sok: run: postgresql: (pid 21144) 1sok: run: prometheus: (pid 21153) 0sok: run: puma: (pid 21166) 0sok: run: redis: (pid 21171) 0sok: run: redis-exporter: (pid 21177) 1sok: run: sidekiq: (pid 21260) 1s 修改 root 密码根据重配置步骤后的提示Password stored to /etc/gitlab/initial_root_password. This file will be cleaned up in first reconfigure run after 24 hours.，root的初始密码储存在initial_root_password，文件在第一次reconfigure 24小时后清除。 使用initial_root_password文件里的密码 web登陆，”Edit profile”–”Panssword”修改 使用命令修改 12345kir@gitlabserver:/etc/gitlab$ sudo gitlab-rake \"gitlab:password:reset[root]\"Enter password: Confirm password: Password successfully updated for user with username root.kir@gitlabserver:/etc/gitlab$ 控制台修改 123456789101112131415161718192021切换路径cd /opt/gitlab/bin/ kir@gitlabserver:/opt/gitlab/bin$ sudo gitlab-rails console -e production-------------------------------------------------------------------------------- Ruby: ruby 2.7.7p221 (2022-11-24 revision 168ec2b1e5) [x86_64-linux] GitLab: 15.8.3 (22f43167474) FOSS GitLab Shell: 14.15.0 PostgreSQL: 13.8------------------------------------------------------------[ booted in 90.93s ]Loading production environment (Rails 6.1.6.1)irb(main):001:0&gt; u=User.where(id:1).firstirb(main):001:0&gt; u=User.where(id:1).first=&gt; #&lt;User id:1 @root&gt;irb(main):002:0&gt; u.password=12345678=&gt; 12345678irb(main):003:0&gt; u.password_confirmation=12345678=&gt; 12345678irb(main):004:0&gt; u.save!=&gt; trueirb(main):005:0&gt; quit 注册和登陆Gitlab在启动gitlab后，直接用浏览器登陆可能出现下图所示502错误，等一会儿再打开就ok了，猜测是服务没有完全运行起来，也有可能是我物理机配置差劲。 注册，由于是本地使用，之前也没配置邮件Postfix，填上舒服的信息即可 注册完后登陆出错，看提示是账号被挂起，使用root管理员账户登陆进行审批通过即可 登陆管理员账户进行审批通过 退出管理员登陆，使用刚才注册的账号登陆，确认后，选择一个角色 最后 为什么写这篇文，因为我的一块硬盘报废了，整块硬盘直接奔溃，各种尝试后放弃了，因为这块500G的硬盘是大学时候台式电脑的，间接原因是使用时间和寿命，直接原因是电脑死机强制关机。 然后京东购了一块固态盘，一看价格现在同容量的固态硬盘比机械硬盘还便宜了。都说固态硬盘一坏文件全扑街，机械硬盘还有抢救的机会，这个只能靠自己掌控了，临近使用寿命或电脑出现异常就要考虑换硬盘了，最好的方法是做备份。 虽然这块盘报废了，也丢失了一些文件，但是由于我把重要的文件都做有备份，但是像这种虚拟机的环境一般都不留备份（文件太大太多）。 得益于硬盘报废，实操了一把前面文章写的自动备份Hexo源文件到私有仓库和Hexo环境新电脑环境重构，博客源文件回来了。 备份很重要-备份很重要-备份很重要","link":"/posts/ed7bc2e7.html"},{"title":"Hexo 几个bat脚本","text":"自己日常操作的几个脚本 bat启动 Hexo 本地服务 bat 推送至 Github 自动打开markdown编辑器 bat启动 Hexo 本地服务前提条件：已完成博客搭建。 123456@echo off:: 切换至博客源文件目录d:cd D:\\blog5:: 执行 清除缓存文件&amp;&amp;生成静态文件&amp;&amp;启用本地服务hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 新建后缀为bat的脚本文件 复制以上命令粘贴（注意修改路径 ），保存 双击此脚本运行的结果相当于在你的博客路径下右键 “Git Bash Here” 并输入 “hexo clean &amp;&amp; hexo g &amp;&amp; hexo s” 运行. bat 推送至 Github前提条件：已完成博客搭建和推送 Github 的设置。 123456@echo off:: 切换至博客源文件目录d:cd D:\\blog5:: 执行 清除缓存文件&amp;&amp;生成静态文件&amp;&amp;部署网站hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 新建后缀为 bat 的脚本文件 复制以上命令粘贴（注意修改路径 ），保存 双击此脚本运行的结果相当于在你的博客路径下右键 “Git Bash Here” 并输入 “hexo clean &amp;&amp; hexo g ” 运行，如果只执行 “hexo clean &amp;&amp; hexo g &amp;&amp; hexo d “ ，当命令执行完后会自动关闭命令窗口，后边加”hexo s“启用本地服务保持窗口不关闭（由于还有自动推送博客源文件的步骤，我不加这个），运行完成后确认是否推送成功，Ctrl+C结束即可 自动打开markdown编辑器在执行hexo n xxxx后自动打开 markdown 编辑器打开 md 文件，在博客目录下的scripts目录新建js文件（我使用的是Typora） 1234var spawn = require('child_process').exec;hexo.on('new', function(data){ spawn('start \"D:\\Program Files\\Typora\\Typora.exe\" ' + data.path);}); 新建后缀为 js 的脚本文件 复制以上命令粘贴（注意修改路径 ），保存","link":"/posts/e1203792.html"},{"title":"配置跨域的Option C MPLS VPN（Cisco）","text":"Introduction This document describes how to configure and verify the Inter-AS Layer 3 Multiprotocol Label Switching (MPLS) VPN, option C feature. A sample network scenario and its configuration and outputs are shown for a better understanding. 本文描述的是根据思科网站一篇配置文档（https://www.cisco.com/c/en/us/support/docs/multiprotocol-label-switching-mpls/mpls/200523-Configuration-and-Verification-of-Layer.html#） 修改搭建的一个实验。 环境 模拟器：PNET 4.2.10 Cisco IOL： l3-ADVENTERPRISEK9-M-15.4-2T.bin 配置网络拓扑网站原图 搭建的拓扑 拓扑规划 每台路由配置环回接口 0 ，例如 R1 格式为： 1.1.1.1/32 互联接口为：设备编号1 + 设备编号2 + .1.1 + 设备编号1，例如 R1 e0/0 接口IP地址：12.1.1.1/24 R7、R8、R9、R10 为 CE，R11 和 R12 为 反射器 ISP1，ISP2 底层 IGP 运行 OSPF 协议 A1，A2 的 CE 与 PE 运行 OSPF 协议 B1，B2 的 CE 与 PE 运行 BGP 协议 配置思路 配置 ISP 底层 OSPF IGP ，验证：show ip os nei / show ip route ospf 配置 ISP 启用 MPLS LDP，验证：show mpls interface / show mpls ldp discovery 配置 PE VRF，配置与 CE 互联接口划分到 VRF，验证：show ip vrf int / show ip route vrf X 配置 ISP 的 BGP 邻居，验证：show ip b summ / show ip b vpnv4 all summ 配置 RR1 和 RR2 的 MP-eBGP，验证：show ip b vpnv4 all summ 配置 CE 和 PE 间的路由协议，验证：show ip route vrf X / show ip os nei / show ip b summ 配置 PE 上 双向重分布 配置步骤 配置 IP 地址 （略） 配置 ISP 底层 IGP （以 ISP 1 为例，ISP2 同理）12345678910111213141516171819!--- R1 commands.int ran e 0/0,e0/3,lo0 ip os 100 a 0 !--- R2 commands.int ran e0/0-1,e0/3,lo0 ip os 100 a 0 !--- R3 commands.int ran e 0/1,e0/3,lo0 ip os 100 a 0 !--- R11 commands.int ran e 0/1-3,lo0 ip os 100 a 0 验证：查看 OSPF 邻居，查看 OSPF 路由，以 R2 为例 1234567891011121314151617181920212223!--- R2 output.R2#sh ip os neiNeighbor ID Pri State Dead Time Address Interface11.11.11.11 1 FULL/BDR 00:00:39 112.1.1.11 Ethernet0/33.3.3.3 1 FULL/DR 00:00:30 23.1.1.3 Ethernet0/11.1.1.1 1 FULL/BDR 00:00:39 12.1.1.1 Ethernet0/0R2#sh ip route ospf | b GateGateway of last resort is not set 1.0.0.0/32 is subnetted, 1 subnetsO 1.1.1.1 [110/11] via 12.1.1.1, 02:06:04, Ethernet0/0 3.0.0.0/32 is subnetted, 1 subnetsO 3.3.3.3 [110/11] via 23.1.1.3, 02:05:54, Ethernet0/1 11.0.0.0/32 is subnetted, 1 subnetsO 11.11.11.11 [110/11] via 112.1.1.11, 02:05:54, Ethernet0/3 111.0.0.0/24 is subnetted, 1 subnetsO 111.1.1.0 [110/20] via 12.1.1.1, 02:06:04, Ethernet0/0 113.0.0.0/24 is subnetted, 1 subnetsO 113.1.1.0 [110/20] via 23.1.1.3, 02:05:54, Ethernet0/1R2# 配置 ISP 启用 MPLS LDP （以 ISP 1 为例，ISP2 同理）12345678910111213141516171819!--- R1 commands.int ran e 0/0,e0/3 mpls ip !--- R2 commands.int ran e0/0-1,e0/3 mpls ip!--- R3 commands.int ran e 0/1,e0/3 mpls ip!--- R11 commands.int ran e 0/1-3 mpls ip 验证： 查看 LDP 接口和 ldp 会话，以 R2 为例 1234567891011121314151617181920!--- R2 output.R2#sh mpls interfaces Interface IP Tunnel BGP Static OperationalEthernet0/0 Yes (ldp) No No No Yes Ethernet0/1 Yes (ldp) No No No Yes Ethernet0/3 Yes (ldp) No No No Yes R2#sh mpls ldp disR2#sh mpls ldp discovery Local LDP Identifier: 2.2.2.2:0 Discovery Sources: Interfaces: Ethernet0/0 (ldp): xmit/recv LDP Id: 1.1.1.1:0 Ethernet0/1 (ldp): xmit/recv LDP Id: 3.3.3.3:0 Ethernet0/3 (ldp): xmit/recv LDP Id: 11.11.11.11:0R2# 配置 PE 的 VRF，配置与 CE 互联的接口划分到 VRF1234567891011121314151617181920212223242526272829303132333435363738!--- R1 commands.ip vrf a rd 7:100 route-target export 7:7 route-target import 9:9ip vrf b rd 8:100 route-target export 8:8 route-target import 10:10 !interface Ethernet0/1 ip vrf forwarding a ip address 17.1.1.1 255.255.255.0interface Ethernet0/2 ip vrf forwarding b ip address 18.1.1.1 255.255.255.0!--- R6 commands.ip vrf a rd 9:200 route-target export 9:9 route-target import 7:7ip vrf b rd 10:200 route-target export 10:10 route-target import 8:8 interface Ethernet0/1 ip vrf forwarding a ip address 69.1.1.6 255.255.255.0!interface Ethernet0/2 ip vrf forwarding b ip address 106.1.1.6 255.255.255.0 验证：查看 VRF 路由表，以 R1 为例 12345678910111213141516!--- R1 output.R1#sh ip route vrf a | b GateGateway of last resort is not set 17.0.0.0/8 is variably subnetted, 2 subnets, 2 masksC 17.1.1.0/24 is directly connected, Ethernet0/1L 17.1.1.1/32 is directly connected, Ethernet0/1R1#R1#sh ip route vrf b | b GateGateway of last resort is not set 18.0.0.0/8 is variably subnetted, 2 subnets, 2 masksC 18.1.1.0/24 is directly connected, Ethernet0/2L 18.1.1.1/32 is directly connected, Ethernet0/2R1# 配置 ISP 的 BGP 邻居R3 与 R4 配置 IPv4 BGP 邻居，R3 宣告 1.1.1.1 和 11.11.11.11，R4 宣告 6.6.6.6 和 12.12.12.12 将 BGP 路由重分布进底层 OSPF 协议，为了学习到对端 RR 和 PE 路由，建立 MP-BGP 需要 由于底层 OSPF 协议的运行，R3 与 R4 已经学习到这些路由，在建立 eBGP 邻居后能传递到对端 1234567891011121314151617181920212223!--- R3 commands.router bgp 100 bgp log-neighbor-changes network 1.1.1.1 mask 255.255.255.255 network 11.11.11.11 mask 255.255.255.255 neighbor 34.1.1.4 remote-as 200 neighbor 34.1.1.4 send-label router ospf 100 redistribute bgp 100 subnets !--- R4 commands.router bgp 200 bgp log-neighbor-changes network 6.6.6.6 mask 255.255.255.255 network 12.12.12.12 mask 255.255.255.255 neighbor 34.1.1.3 remote-as 100 neighbor 34.1.1.3 send-label router ospf 200 redistribute bgp 200 subnets 验证： R3 与 R4 的 eBGP 邻居 1234567891011121314R3#sh ip b summary BGP router identifier 3.3.3.3, local AS number 100BGP table version is 75, main routing table version 754 network entries using 560 bytes of memory4 path entries using 320 bytes of memory4/4 BGP path/bestpath attribute entries using 576 bytes of memory1 BGP AS-PATH entries using 24 bytes of memory0 BGP route-map cache entries using 0 bytes of memory0 BGP filter-list cache entries using 0 bytes of memoryBGP using 1480 total bytes of memoryBGP activity 4/0 prefixes, 36/32 paths, scan interval 60 secsNeighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd34.1.1.4 4 200 90 90 75 0 0 01:16:45 0 R1 的 1.1.1.1 去往 R6 的 6.6.6.6 路由可达，标签路径连续 R11 的 11.11.11.11 去往 R12 的 12.12.12.12 路由可达，标签路径连续 12345678910111213141516171819202122232425262728293031R1#ping 6.6.6.6 source 1.1.1.1 Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 6.6.6.6, timeout is 2 seconds:Packet sent with a source address of 1.1.1.1 !!!!!Success rate is 100 percent (5/5), round-trip min/avg/max = 6/6/8 msR1#traceroute 6.6.6.6 source 1.1.1.1Type escape sequence to abort.Tracing the route to 6.6.6.6VRF info: (vrf in name/id, vrf out name/id) 1 12.1.1.2 [MPLS: Label 24 Exp 0] 5 msec 6 msec 6 msec 2 23.1.1.3 [MPLS: Label 26 Exp 0] 6 msec 5 msec 6 msec 3 34.1.1.4 [MPLS: Label 27 Exp 0] 7 msec 7 msec 5 msec 4 45.1.1.5 [MPLS: Label 22 Exp 0] 4 msec 5 msec 6 msec 5 56.1.1.6 6 msec * 7 msecR1#----------------------------------------------------------R11#ping 12.12.12.12 source 11.11.11.11Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 12.12.12.12, timeout is 2 seconds:Packet sent with a source address of 11.11.11.11 !!!!!Success rate is 100 percent (5/5), round-trip min/avg/max = 3/3/4 msR11#trace 12.12.12.12 source 11.11.11.11Type escape sequence to abort.Tracing the route to 12.12.12.12VRF info: (vrf in name/id, vrf out name/id) 1 113.1.1.3 [MPLS: Label 27 Exp 0] 4 msec 4 msec 4 msec 2 34.1.1.4 [MPLS: Label 25 Exp 0] 3 msec 2 msec 2 msec 3 124.1.1.12 4 msec * 4 msecR11# 关于send-label 命令： tell the router to send the lables of bgp prefix to its peer，为 BGP 路由传递标签，使用此命令后，对应接口自动配置 mpls bgp forwarding ，但是 no 掉后接口的这行配置并不会自动去掉 1*Mar 4 05:54:10.850: %BGP_LMM-6-AUTOGEN1: The mpls bgp forwarding command has been configured on interface: Ethernet0/0 未配置 send-label 命令前，R3 去往 6.6.6.6 的标签 是空标签，R3 的动作是弹出所有标签，标签中断。 12345678910111213141516171819202122R3#sh mpls forwarding-table 6.6.6.6Local Outgoing Prefix Bytes Label Outgoing Next Hop Label Label or Tunnel Id Switched interface 26 No Label 6.6.6.6/32 0 Et0/0 34.1.1.4 R3#sh ip b la R3#sh ip b labels Network Next Hop In label/Out label 1.1.1.1/32 23.1.1.2 nolabel/nolabel 6.6.6.6/32 34.1.1.4 nolabel/nolabel 11.11.11.11/32 113.1.1.11 nolabel/nolabel 12.12.12.12/32 34.1.1.4 nolabel/nolabelR3#sh ip b 6.6.6.6 BGP routing table entry for 6.6.6.6/32, version 66Paths: (1 available, best #1, table default) Not advertised to any peer Refresh Epoch 1 200 34.1.1.4 from 34.1.1.4 (4.4.4.4) Origin IGP, metric 21, localpref 100, valid, external, best rx pathid: 0, tx pathid: 0x0R3# 配置 send-label 命令后，分配 27 标签 12345678910111213141516171819202122232425262728293031R3#sh mpls forwarding-table 6.6.6.6Local Outgoing Prefix Bytes Label Outgoing Next Hop Label Label or Tunnel Id Switched interface 26 27 6.6.6.6/32 0 Et0/0 34.1.1.4 R3#sh ip b labels Network Next Hop In label/Out label 1.1.1.1/32 23.1.1.2 21/nolabel 6.6.6.6/32 34.1.1.4 nolabel/27 11.11.11.11/32 113.1.1.11 25/nolabel 12.12.12.12/32 34.1.1.4 nolabel/25R3#sh ip b 6.6.6.6 BGP routing table entry for 6.6.6.6/32, version 56Paths: (1 available, best #1, table default) Not advertised to any peer Refresh Epoch 1 200 34.1.1.4 from 34.1.1.4 (4.4.4.4) Origin IGP, metric 21, localpref 100, valid, external, best mpls labels in/out nolabel/27 rx pathid: 0, tx pathid: 0x0# 在 R4 上查看到关于去往6.6.6.6 的 入向标签 27R4#sh ip bgp labels Network Next Hop In label/Out label 1.1.1.1/32 34.1.1.3 nolabel/21 6.6.6.6/32 45.1.1.5 27/nolabel 11.11.11.11/32 34.1.1.3 nolabel/25 12.12.12.12/32 124.1.1.12 25/nolabelR4# R1 与 R11 配置 BGP VPNV4 邻居 注意：R3 与 R11 不建立 BGP 邻居 123456789101112131415161718192021!--- R1 commands.router bgp 100 no bgp default ipv4-unicast neighbor 11.11.11.11 remote-as 100 neighbor 11.11.11.11 update-source Loopback0 address-family vpnv4 neighbor 11.11.11.11 activate !--- R11 commands. router bgp 100 bgp log-neighbor-changes no bgp default ipv4-unicast neighbor 1.1.1.1 remote-as 100 neighbor 1.1.1.1 update-source Loopback0 address-family vpnv4 neighbor 1.1.1.1 activate neighbor 1.1.1.1 route-reflector-client R6 与 R12 配置 BGP VPNV4 邻居 注意：R4 与 R12 不建立 BGP 邻居 1234567891011121314151617181920!--- R6 commands.router bgp 200 no bgp default ipv4-unicast neighbor 12.12.12.12 remote-as 200 neighbor 12.12.12.12 update-source Loopback0 address-family vpnv4 neighbor 12.12.12.12 activate !--- R12 commands.router bgp 200 no bgp default ipv4-unicast neighbor 6.6.6.6 remote-as 200 neighbor 6.6.6.6 update-source Loopback0 address-family vpnv4 neighbor 6.6.6.6 activate neighbor 6.6.6.6 route-reflector-client 验证：VPNV4 邻居 1sh ip b vpnv4 all summary R11 与 R12 建立 MP-eBGP 邻居 设置 eBGP 多跳。不是物理直连的 eBGP 邻居 设置下一跳不改变。R11 与 R12 建立 MP-eBGP 邻居，传递路由时默认下一跳改变成自身，这样 ISP 两侧的流量互通都流经反射器不合理，设置下一跳不改变后，R1 上去往 ISP2 CE 的路由下一跳看到的是 R6 的 6.6.6.6 ，最后再在两个 ISP 内部控制底层 IGP 的路径，使得流量不经过反射器。 123456789101112131415161718192021!--- R11 commands.router bgp 100 neighbor 12.12.12.12 remote-as 200 neighbor 12.12.12.12 ebgp-multihop 255 neighbor 12.12.12.12 update-source Loopback0 address-family vpnv4 neighbor 12.12.12.12 activate neighbor 12.12.12.12 next-hop-unchanged!--- R12 commands.router bgp 200 neighbor 11.11.11.11 remote-as 100 neighbor 11.11.11.11 ebgp-multihop 255 neighbor 11.11.11.11 update-source Loopback0 address-family vpnv4 neighbor 11.11.11.11 activate neighbor 11.11.11.11 next-hop-unchanged 验证：查看 R11 上的 BGP 邻居 1234567891011121314151617R11#sh ip b vpnv4 all summary BGP router identifier 11.11.11.11, local AS number 100BGP table version is 67, main routing table version 676 network entries using 912 bytes of memory6 path entries using 480 bytes of memory5/5 BGP path/bestpath attribute entries using 760 bytes of memory3 BGP AS-PATH entries using 72 bytes of memory4 BGP extended community entries using 128 bytes of memory0 BGP route-map cache entries using 0 bytes of memory0 BGP filter-list cache entries using 0 bytes of memoryBGP using 2352 total bytes of memoryBGP activity 6/0 prefixes, 6/0 paths, scan interval 60 secsNeighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd1.1.1.1 4 100 127 151 67 0 0 01:50:57 312.12.12.12 4 200 190 185 67 0 0 01:50:16 3R11# 配置 CE 和 PE 间的路由协议以 R7，R8，R1 为例， R9，R10，R6 同理 1234567891011121314151617181920!--- R7 commands.int ran e 0/0,lo0 ip os 7 a 0!--- R8 commands.router bgp 300 network 8.8.8.8 mask 255.255.255.255 neighbor 18.1.1.1 remote-as 100 !--- R1 commands.router ospf 1 vrf a router-id 1.1.1.17 network 17.1.1.1 0.0.0.0 area 0 router bgp 100 address-family ipv4 vrf b neighbor 18.1.1.8 remote-as 300 验证： 123456show ip os neishow ip route ospfshow ip route vrf ashow ip route vrf bsh ip b summary 配置 PE 上 双向重分布以 R1 为例，只需在 VRF a 12345678910!--- R1 commands.# 只需在 vrf a 和 BGP ipv4 vrf a 视图下配置重分布# R8 - R1 之间运行的是 BGP ，在 BGP ipv4 vrf b 视图下建立邻居即可router ospf 1 vrf a redistribute bgp 100 subnets router bgp 100 address-family ipv4 vrf a redistribute ospf 1 优化ISP 内部 OSPF 下一跳查看 R1 路由表发现，去往 9.9.9.9 下一跳是 6.6.6.6 12345678910111213141516171819202122232425262728R1#sh ip b vpnv4 vrf a BGP table version is 166, local router ID is 1.1.1.1Status codes: s suppressed, d damped, h history, * valid, &gt; best, i - internal, r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, x best-external, a additional-path, c RIB-compressed, Origin codes: i - IGP, e - EGP, ? - incompleteRPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight PathRoute Distinguisher: 7:100 (default for vrf a) *&gt; 7.7.7.7/32 17.1.1.7 11 32768 ? *&gt;i 9.9.9.9/32 6.6.6.6 0 100 0 200 ? *&gt; 17.1.1.0/24 0.0.0.0 0 32768 ? *&gt;i 69.1.1.0/24 6.6.6.6 0 100 0 200 ?R1#R1#sh ip route vrf a | b GateGateway of last resort is not set 7.0.0.0/32 is subnetted, 1 subnetsO 7.7.7.7 [110/11] via 17.1.1.7, 04:21:39, Ethernet0/1 9.0.0.0/32 is subnetted, 1 subnetsB 9.9.9.9 [200/0] via 6.6.6.6, 03:10:42 17.0.0.0/8 is variably subnetted, 2 subnets, 2 masksC 17.1.1.0/24 is directly connected, Ethernet0/1L 17.1.1.1/32 is directly connected, Ethernet0/1 69.0.0.0/24 is subnetted, 1 subnetsB 69.1.1.0 [200/0] via 6.6.6.6, 03:10:42R1# 再查找，去往 6.6.6.6 前缀有两条路径，管理和开销都一致，负载均衡？ 这条路由是 R3 BGP 重分布进底层 IGP OSPF 而学习到的，有两条路径，管理距离110，metric 1 ，这时候需要比较forwarding metric，很不巧的是forwarding metric 也是一样，这样去往 6.6.6.6 就真负载均衡。forwarding metric 是本地到 ASBR 的 开销，修改 R11 e0/1-3 的开销。同理也需要修改 R12 的接口开销。 12O E2 12.12.12.12/32 [110/1] via 111.1.1.11, 01:37:27, Ethernet0/3 [110/1] via 12.1.1.2, 03:15:27, Ethernet0/0 1234567891011121314151617181920212223242526272829R1#sh ip route | b GateGateway of last resort is not set 1.0.0.0/32 is subnetted, 1 subnetsC 1.1.1.1 is directly connected, Loopback0 2.0.0.0/32 is subnetted, 1 subnetsO 2.2.2.2 [110/11] via 12.1.1.2, 04:26:59, Ethernet0/0 3.0.0.0/32 is subnetted, 1 subnetsO 3.3.3.3 [110/21] via 111.1.1.11, 01:37:27, Ethernet0/3 [110/21] via 12.1.1.2, 04:26:49, Ethernet0/0 6.0.0.0/32 is subnetted, 1 subnetsO E2 6.6.6.6 [110/1] via 111.1.1.11, 01:37:27, Ethernet0/3 [110/1] via 12.1.1.2, 03:15:27, Ethernet0/0……R1#R1#sh ip route 6.6.6.6Routing entry for 6.6.6.6/32 Known via \"ospf 100\", distance 110, metric 1 Tag 200, type extern 2, forward metric 20 Last update from 12.1.1.2 on Ethernet0/0, 00:00:51 ago Routing Descriptor Blocks: * 111.1.1.11, from 3.3.3.3, 00:31:15 ago, via Ethernet0/3 Route metric is 1, traffic share count is 1 Route tag 200 12.1.1.2, from 3.3.3.3, 00:00:51 ago, via Ethernet0/0 Route metric is 1, traffic share count is 1 Route tag 200R1# 1234567# 修改 R11 R12 的接口开销R11(config)#int ran e 0/1-/3 R11(config-if-range)#ip ospf cost 1000R12(config-if)#int ran e 0/1-0/3R12(config-if-range)#ip ospf cost 1000 123456789101112131415161718192021# 修改 R11 R12 的接口开销后R1#sh ip route 6.6.6.6Routing entry for 6.6.6.6/32 Known via \"ospf 100\", distance 110, metric 1 Tag 200, type extern 2, forward metric 20 Last update from 12.1.1.2 on Ethernet0/0, 00:08:51 ago Routing Descriptor Blocks: * 12.1.1.2, from 3.3.3.3, 00:08:51 ago, via Ethernet0/0 Route metric is 1, traffic share count is 1 Route tag 200R1#R6#sh ip rou 1.1.1.1 Routing entry for 1.1.1.1/32 Known via \"ospf 200\", distance 110, metric 1 Tag 100, type extern 2, forward metric 20 Last update from 56.1.1.5 on Ethernet0/0, 00:02:30 ago Routing Descriptor Blocks: * 56.1.1.5, from 4.4.4.4, 00:39:02 ago, via Ethernet0/0 Route metric is 1, traffic share count is 1 Route tag 100R6# 测试R7 和 R9 之间的 ping 操作 1234567891011121314R7#ping 9.9.9.9 source 7.7.7.7Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 9.9.9.9, timeout is 2 seconds:Packet sent with a source address of 7.7.7.7 !!!!!Success rate is 100 percent (5/5), round-trip min/avg/max = 8/8/11 msR7#R9#ping 7.7.7.7 source 9.9.9.9Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 7.7.7.7, timeout is 2 seconds:Packet sent with a source address of 9.9.9.9 !!!!!Success rate is 100 percent (5/5), round-trip min/avg/max = 8/8/10 msR9# R8 和 R10 之间的 ping 操作 1234567891011121314R8#ping 10.10.10.10 source 8.8.8.8Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 10.10.10.10, timeout is 2 seconds:Packet sent with a source address of 8.8.8.8 !!!!!Success rate is 100 percent (5/5), round-trip min/avg/max = 8/9/13 msR8#R10#ping 8.8.8.8 source 10.10.10.10Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 8.8.8.8, timeout is 2 seconds:Packet sent with a source address of 10.10.10.10 !!!!!Success rate is 100 percent (5/5), round-trip min/avg/max = 8/9/10 msR10# R7 和 R9 之间的 Traceroute 操作 123456789101112131415161718192021222324R7#traceroute 9.9.9.9 source 7.7.7.7Type escape sequence to abort.Tracing the route to 9.9.9.9VRF info: (vrf in name/id, vrf out name/id) 1 17.1.1.1 1 msec 1 msec 2 msec 2 12.1.1.2 [MPLS: Labels 24/26 Exp 0] 8 msec 8 msec 8 msec 3 23.1.1.3 [MPLS: Labels 26/26 Exp 0] 8 msec 12 msec 7 msec 4 34.1.1.4 [MPLS: Labels 27/26 Exp 0] 8 msec 9 msec 8 msec 5 45.1.1.5 [MPLS: Labels 22/26 Exp 0] 9 msec 8 msec 8 msec 6 69.1.1.6 [MPLS: Label 26 Exp 0] 9 msec 7 msec 9 msec 7 69.1.1.9 9 msec * 9 msecR7#R9#traceroute 7.7.7.7 source 9.9.9.9Type escape sequence to abort.Tracing the route to 7.7.7.7VRF info: (vrf in name/id, vrf out name/id) 1 69.1.1.6 2 msec 39 msec 2 msec 2 56.1.1.5 [MPLS: Labels 25/26 Exp 0] 10 msec 9 msec 9 msec 3 45.1.1.4 [MPLS: Labels 23/26 Exp 0] 12 msec 9 msec 9 msec 4 34.1.1.3 [MPLS: Labels 21/26 Exp 0] 10 msec 8 msec 10 msec 5 23.1.1.2 [MPLS: Labels 19/26 Exp 0] 9 msec 10 msec 11 msec 6 17.1.1.1 [MPLS: Label 26 Exp 0] 7 msec 18 msec 9 msec 7 17.1.1.7 8 msec * 8 msecR9# R8 和 R10 之间的 Traceroute 操作 123456789101112131415161718192021222324R8#traceroute 10.10.10.10 source 8.8.8.8Type escape sequence to abort.Tracing the route to 10.10.10.10VRF info: (vrf in name/id, vrf out name/id) 1 18.1.1.1 2 msec 1 msec 1 msec 2 12.1.1.2 [MPLS: Labels 24/28 Exp 0] 8 msec 9 msec 9 msec 3 23.1.1.3 [MPLS: Labels 26/28 Exp 0] 9 msec 9 msec 9 msec 4 34.1.1.4 [MPLS: Labels 27/28 Exp 0] 10 msec 8 msec 10 msec 5 45.1.1.5 [MPLS: Labels 22/28 Exp 0] 7 msec 9 msec 8 msec 6 106.1.1.6 [MPLS: Label 28 Exp 0] 8 msec 7 msec 9 msec 7 106.1.1.10 8 msec * 10 msecR8#R10#traceroute 8.8.8.8 source 10.10.10.10Type escape sequence to abort.Tracing the route to 8.8.8.8VRF info: (vrf in name/id, vrf out name/id) 1 106.1.1.6 1 msec 2 msec 1 msec 2 56.1.1.5 [MPLS: Labels 25/28 Exp 0] 8 msec 8 msec 11 msec 3 45.1.1.4 [MPLS: Labels 23/28 Exp 0] 8 msec 28 msec 8 msec 4 34.1.1.3 [MPLS: Labels 21/28 Exp 0] 8 msec 11 msec 8 msec 5 23.1.1.2 [MPLS: Labels 19/28 Exp 0] 9 msec 8 msec 10 msec 6 18.1.1.1 [MPLS: Label 28 Exp 0] 16 msec 6 msec 7 msec 7 18.1.1.8 9 msec * 10 msecR10# 一个视频&lt;&lt;&lt;&lt;&lt;&lt;&lt; Updated upstream &gt;&gt;&gt;&gt;&gt;&gt;&gt; Stashed changes 最后 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 配置存阿里云盘了，这是链接：[分享的文件] 欢迎“来电”来函探讨。","link":"/posts/c0ba4ae2.html"},{"title":"基于Django编写的SNMP轮询Demo","text":"一个基于Django编写的SNMP轮询Demo，可以对设备（代码内置了H3C OID部分规则）进行SNMP轮询，icmp连通性检测，并将结果写入数据库，前端页面读取数据库数据进行直观的展示。效果图可点击本页面导航栏的Gallery相册查看。 一个视频无解说无字幕，嫌BGM太吵可静音 缘由声明：我不是搞软件的 当初仅为了在项目实施中显示设备的上线情况和快速查找到需要变更配置的设备；后来越搞越多，像首页，设备导出，修改页，查看配置，计划任务，清空数据等功能并不是我当初有计划要制作的；最后及时刹车，许多脑中风暴的功能没有继续写，也没有继续添加功能的计划。 代码组成及工作流框架 Bootstrap-3.3.7+Django4.0.7+MySql-5.7.39（或sqlite） 工作流 设备初始参数写入数据库 设备的轮询，并对结果进行写入数据库 前端页面对数据的展示 页面及功能 首页 设备类型统计显示 设备在线/离线、CPU使用率、内存使用率概览饼状图显示 设备CPU使用率、内存使用率 TOP 10 显示 关于 设备管理 设备数据显示 设备添加 snmp测试 继续添加 添加并返回 设备导出 设备详情 刷新 执行查看配置 设备参数修改、同步、删除 计划任务 定时任务 手动任务 更多操作 批量导入 清空数据 如何使用clone&nbsp;仓库代码至本地或使用浏览器下载压缩包 1git clone https://github.com/kiraster/ndgv_demo.git 或 https://github.com/kiraster/ndgv_demo Code –&gt;&gt; Download ZIP 本地处理使用任意支持Python&nbsp;的 IDE工具，将代码目录添加 安装环境为了不影响你电脑的python环境，建议使用虚拟环境运行本代码（以下用Visual Studio Code 软件举例） IDE工具控制台切换到代码根目录 创建虚拟环境 1python -m venv venv 激活虚拟环境 1.\\venv\\Scripts\\Activate.ps1 可能遇到不能执行脚本的错误，可以以管理员身份打开powershell，执行 set-executionpolicy remotesigned，选择y 安装python&nbsp;库1pip install -r requirements.txt 初始化数据库 修改ndgv1/settings.py 文件(78行开始)（以下是使用sqlite数据的配置，如需使用MySQL，把sqlite部分注释，再把MySQL注释部分取消即可） 1234567891011121314DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', # 'default': { # 'ENGINE': 'django.db.backends.mysql', # 'NAME': 'ndgv1.3', # 数据库名称 # 'USER': 'root', # 'PASSWORD': 'xxxxxxxx', # 'HOST': '127.0.0.1', # 'PORT': 3306, # 'CHARSET': 'utf8' }} 删除device_app/migrations 和 scheduler_app/migrations 除_init_.py 外的所有文件 删除 db.sqlite3 文件 执行数据库迁移命令 12python manage.py makemigrationspython manage.py migrate 修改清空数据功能代码修改device_app/views文件(683行开始)，以下是使用sqlite数据的配置，如需使用MySQL，把sqlite部分注释，再把MySQL注释部分取消即可 12345678910111213141516171819202122232425262728只直接使用原生 sql 语句 更快from django.db import connection# sqlite 数据库sqlite_db = connection.cursor()# MySQL 数据库# mysql_db = connection.cursor()# 执行 命令 重置 自增IDsqlite_db.execute('DELETE FROM sqlite_sequence')sqlite_db.execute('DELETE FROM device_app_device')sqlite_db.execute('DELETE FROM device_app_devicedetail')sqlite_db.execute('DELETE FROM device_app_devicestate')sqlite_db.execute('DELETE FROM device_app_devicelocation')sqlite_db.execute('DELETE FROM scheduler_app_schedulerdetail')sqlite_db.execute('DELETE FROM django_apscheduler_djangojob')sqlite_db.execute('DELETE FROM django_apscheduler_djangojobexecution')sqlite_db.execute('DELETE FROM sqlite_sequence')# 取消外键约束# mysql_db.execute('SET FOREIGN_KEY_CHECKS=0')# mysql_db.execute('truncate table device_app_device')# mysql_db.execute('truncate table device_app_devicedetail')# mysql_db.execute('truncate table device_app_devicestate')# mysql_db.execute('truncate table device_app_devicelocation')# mysql_db.execute('truncate table scheduler_app_schedulerdetail')# mysql_db.execute('truncate table django_apscheduler_djangojob')# mysql_db.execute('truncate table django_apscheduler_djangojobexecution')# 设置外键约束# mysql_db.execute('SET FORE 运行代码1python .\\manage.py runserver 代码弊端 代码写死华三设备的oid 代码中写死设备命名规则 定时任务写死轮询时间 前端页面展示以1080P分辨率屏幕编写 首页展示，类别显示的规则写死华三设备型号 …… 可能的问题或错误 PermissionError: [WinError 10013] 以一种访问权限不允许的方式做了一个访问套接字的尝试。 使用管理员权限运行IDE编辑器 检查是否端口占用 设备管理页面显示的数据不正确 由于是内置华三部分设备的OID，有些设备的OID值没有添加到代码 有些数据根据设备命名规则解析出来的，如果设备名称不符合命名规则会显示不正确 设备同步后显示同步成功，但是没有数据 可能是snmp团体字不正确，或IP地址不可达 或者本机防火墙限制 批量导入失败 上传文件中格式不准确或数据有误 上传文件中数据与已有数据冲突，可使用清空数据再进行导入 由于没有加入Django事务，对于已导入正确数据并不会进行回退 首页中类型统计不正确 统计规则是根据华三的设备型号中关键字定义的 其他厂商设备不通用 页面显示不全或内容挤压 编写时候是以1080P分辨率屏幕显示为准 没有对其他分辨率屏幕做调整","link":"/posts/d70f2b4c.html"},{"title":"观察OSPF虚链路和虚链路的替代办法","text":"一个小实验，观察OSPF虚链路、虚链路的替代办法。 拓扑图： 如上图所示，右边 AREA 2、3、4 普通区域被 AREA 1 分割。 要求：不改动物理连线的方式配置设备，使得 R1 学习到 R6、R7、R8上的路由。 方式一：R2 – R3 间配置跨 AREA 1 的虚链路 方式二：R2 – R4 间配置 Tunnel 隧道，配置宣告 方式三：R5 上 配置 AREA 4 在另一个 OSPF 进程，配置重分布 方式一123456789!--- R2 commands.router ospf 100 area 1 virtual-link 3.3.3.3 !--- R3 commands.router ospf 100 area 1 virtual-link 2.2.2.2 方式二123456789101112131415161718192021222324!--- R2 commands.!interface Tunnel0 ip address 100.1.1.1 255.255.255.252 tunnel source 24.1.1.2 tunnel destination 24.1.1.4!router ospf 100 # 将Tunnel接口地址宣告进区域0 network 100.1.1.1 0.0.0.0 area 0! !--- R4 commands.interface Tunnel0 ip address 100.1.1.2 255.255.255.252 tunnel source 24.1.1.4 tunnel destination 24.1.1.2!router ospf 100 # 将Tunnel接口地址宣告进区域0 network 100.1.1.2 0.0.0.0 area 0! 方式三123456789101112131415R5#sh run | s r orouter ospf 100 router-id 5.5.5.5 # 重分布 redistribute ospf 200 subnets network 5.5.5.5 0.0.0.0 area 1 network 25.1.1.5 0.0.0.0 area 1 # 配置 AREA 4 在另一个 OSPF 进程router ospf 200 router-id 55.55.55.55 # 重分布 redistribute ospf 100 subnets network 58.1.1.5 0.0.0.0 area 4R5# 观察R1 上查看 OSPF 路由，发现能学习到 R6，R7，R8上的环回口路由；Tunnel接口的地址也被学习到，而且是 O 表项路由属于区域 0 ，R8 的路由因为在R5 上进行了双向重分布显示为 OE2 表项。 R6，R7 则是区域间路由，逻辑上的直连区域0。 123456789101112131415161718192021222324252627282930313233343536373839404142R1#sh ip route ospfCodes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfRGateway of last resort is not set 2.0.0.0/32 is subnetted, 1 subnetsO 2.2.2.2 [110/11] via 12.1.1.2, 00:26:14, Ethernet0/0 3.0.0.0/32 is subnetted, 1 subnetsO IA 3.3.3.3 [110/21] via 12.1.1.2, 00:25:54, Ethernet0/0 4.0.0.0/32 is subnetted, 1 subnetsO IA 4.4.4.4 [110/21] via 12.1.1.2, 00:26:03, Ethernet0/0 5.0.0.0/32 is subnetted, 1 subnetsO IA 5.5.5.5 [110/21] via 12.1.1.2, 00:26:03, Ethernet0/0 6.0.0.0/32 is subnetted, 1 subnetsO IA 6.6.6.6 [110/31] via 12.1.1.2, 00:25:54, Ethernet0/0 7.0.0.0/32 is subnetted, 1 subnetsO IA 7.7.7.7 [110/1021] via 12.1.1.2, 00:25:53, Ethernet0/0 8.0.0.0/32 is subnetted, 1 subnetsO E2 8.8.8.8 [110/11] via 12.1.1.2, 00:25:53, Ethernet0/0 23.0.0.0/24 is subnetted, 1 subnetsO IA 23.1.1.0 [110/20] via 12.1.1.2, 00:26:14, Ethernet0/0 24.0.0.0/24 is subnetted, 1 subnetsO IA 24.1.1.0 [110/20] via 12.1.1.2, 00:26:14, Ethernet0/0 25.0.0.0/24 is subnetted, 1 subnetsO IA 25.1.1.0 [110/20] via 12.1.1.2, 00:26:14, Ethernet0/0 36.0.0.0/24 is subnetted, 1 subnetsO IA 36.1.1.0 [110/30] via 12.1.1.2, 00:25:54, Ethernet0/0 47.0.0.0/24 is subnetted, 1 subnetsO IA 47.1.1.0 [110/1020] via 12.1.1.2, 00:26:14, Ethernet0/0 58.0.0.0/24 is subnetted, 1 subnetsO E2 58.1.1.0 [110/10] via 12.1.1.2, 00:25:54, Ethernet0/0 100.0.0.0/30 is subnetted, 1 subnetsO 100.1.1.0 [110/1010] via 12.1.1.2, 00:26:14, Ethernet0/0R1# R2上查看 OSPF 邻居，发现除常规的邻居外，还有Tunnel0 的邻居和虚链路的邻居，两种邻居的区别在于虚链路邻居一旦邻居建立处于稳定状态，不发送hello报文，而且Dead Time 永不超时。而Tunnel0 的邻居有Dead Time 默认40秒，debug 查看 hello 会发现*Mar 16 15:24:11.782: OSPF-100 HELLO Tu0: Rcv hello from 4.4.4.4 area 0 100.1.1.2，好像没什么用，好看 12345678910R2#sh ip os neiNeighbor ID Pri State Dead Time Address Interface4.4.4.4 0 FULL/ - 00:00:30 100.1.1.2 Tunnel01.1.1.1 1 FULL/BDR 00:00:32 12.1.1.1 Ethernet0/03.3.3.3 0 FULL/ - - 23.1.1.3 OSPF_VL05.5.5.5 1 FULL/DR 00:00:33 25.1.1.5 Ethernet0/34.4.4.4 1 FULL/DR 00:00:34 24.1.1.4 Ethernet0/23.3.3.3 1 FULL/DR 00:00:37 23.1.1.3 Ethernet0/1R2# R8上查看路由表，因为在R5上进行了重分布，R5是ASBR。所有看到的OSPF路由表项都是 OE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354R8#sh ip rou osCodes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfRGateway of last resort is not set 1.0.0.0/32 is subnetted, 1 subnetsO E2 1.1.1.1 [110/21] via 58.1.1.5, 00:41:42, Ethernet0/0 2.0.0.0/32 is subnetted, 1 subnetsO E2 2.2.2.2 [110/11] via 58.1.1.5, 00:41:42, Ethernet0/0 3.0.0.0/32 is subnetted, 1 subnetsO E2 3.3.3.3 [110/21] via 58.1.1.5, 00:41:42, Ethernet0/0 4.0.0.0/32 is subnetted, 1 subnetsO E2 4.4.4.4 [110/21] via 58.1.1.5, 00:41:42, Ethernet0/0 5.0.0.0/32 is subnetted, 1 subnetsO E2 5.5.5.5 [110/1] via 58.1.1.5, 00:41:42, Ethernet0/0 6.0.0.0/32 is subnetted, 1 subnetsO E2 6.6.6.6 [110/31] via 58.1.1.5, 00:41:41, Ethernet0/0 7.0.0.0/32 is subnetted, 1 subnetsO E2 7.7.7.7 [110/31] via 58.1.1.5, 00:01:46, Ethernet0/0 12.0.0.0/24 is subnetted, 1 subnetsO E2 12.1.1.0 [110/20] via 58.1.1.5, 00:41:42, Ethernet0/0 23.0.0.0/24 is subnetted, 1 subnetsO E2 23.1.1.0 [110/20] via 58.1.1.5, 00:41:42, Ethernet0/0 24.0.0.0/24 is subnetted, 1 subnetsO E2 24.1.1.0 [110/20] via 58.1.1.5, 00:41:42, Ethernet0/0 25.0.0.0/24 is subnetted, 1 subnetsO E2 25.1.1.0 [110/10] via 58.1.1.5, 00:41:42, Ethernet0/0 36.0.0.0/24 is subnetted, 1 subnetsO E2 36.1.1.0 [110/30] via 58.1.1.5, 00:41:42, Ethernet0/0 47.0.0.0/24 is subnetted, 1 subnetsO E2 47.1.1.0 [110/30] via 58.1.1.5, 00:01:46, Ethernet0/0 100.0.0.0/30 is subnetted, 1 subnetsO E2 100.1.1.0 [110/1010] via 58.1.1.5, 00:41:42, Ethernet0/0R8#R8# sh ip os border-routers OSPF Router with ID (8.8.8.8) (Process ID 200) Base Topology (MTID 0)Internal Router Routing TableCodes: i - Intra-area route, I - Inter-area routei 55.55.55.55 [10] via 58.1.1.5, Ethernet0/0, ASBR, Area 4, SPF 2R8#","link":"/posts/5c8077d9.html"},{"title":"一个使用nornir框架编写的跑脚本工具","text":"一个使用nornir框架编写的跑脚本工具。之前写过一版这个菜单式跑python脚本的工具，简直臃肿的不堪入目，后面发现需要添加改进功能真让我头大。了解nornir后，一直就想把功能移植过来，现在搞的差不多了，分享一下 重构原因 摒弃旧版本自己写的异步并发和文件写入，使用nornir自带的并发机制，专注于功能的实现 nornir具有与其他开源模块的联动功能，如netbox、sql、scrapli、napalm等，具有强扩展性 原有代码结构臃肿、难维护、设计不合理、功能杂乱 脚本启动界面： 执行批量备份配置 执行 筛选–&gt;执行 执行获取交换机 端口-MAC地址 和 搜索MAC地址对应设备 执行批量ssh可达性测试 和 批量ping可达性测试 执行批量保存配置 生成的文件 文件根目录 功能说明 批量备份配置 根据加载的设备清单，读取ssh登陆信息登陆设备，执行display列中的display命令，将回显内容写入到EXPORT\\当天日期\\export_conf文件夹下，每个设备的回显内容分别记录在一个txt文件(格式：name + ip + 当前时间.txt)，运行结果记录在EXPORT\\当天日期\\result_当前日期.log文件 批量修改配置 根据加载的设备清单，读取ssh登陆信息登陆设备，执行config列中的config命令，将回显内容写入到EXPORT\\当天日期\\modify_conf文件夹下，每个设备的回显内容分别记录在一个txt文件(格式：name + ip + 当前时间.txt)，运行结果记录在EXPORT\\当天日期\\result_当前日期.log文件 筛选–&gt;执行 选择该功能选项后，会在二级菜单显示主菜单中的1、2、6、7、8功能 选择对应功能后进入筛选菜单 筛选菜单： IP地址-筛选 平台-筛选 设备型号-筛选 区域-筛选 组合筛选（未编写） 获取交换机 端口-MAC地址 该功能通过获取交换机MAC地址表和trunk接口信息，求差集获取到非trunk接口的MAC地址表，表格文件存储到EXPORT\\当天日期\\generate_table，格式为：当天日期_MAC地址表.xlsx 强烈建议在代码task.run前进行filter过滤接入交换机的nr对象 运行结果记录在EXPORT\\当天日期\\result_当前日期.log文件 搜索MAC地址对应设备 本功能依赖功能4中生成的MAC地址表，需要使用本功能先执行功能4 输入的MAC地址格式任意，可以是全匹配如：4426-0f92-0d06，也可以是其中部分如：0d06 或 4426，或者任意字符（没有意义） 批量ssh可达性测试 根据加载的设备清单，读取ssh登陆信息登陆设备，以获取到设备的prompt作为依据判断ssh可达，运行结果记录在EXPORT\\当天日期\\result_当前日期.log文件 批量ping可达性测试 根据加载的设备清单，执行ping操作，以没有异常作为依据判断ping可达，运行结果记录在EXPORT\\当天日期\\result_当前日期.log文件 批量保存配置 根据加载的设备清单，执行netmiko_save_config操作，以没有异常作为依据判断保存成功，运行结果记录在EXPORT\\当天日期\\result_当前日期.log文件 如何使用下载Github仓库地址：https://github.com/kiraster/netops_v2.0_beta 虚拟环境由于运行代码需要安装非常多的库，可能与你当前python环境会有冲突，建议在虚拟环境下运行 以vscode软件举例: 代码编辑打开目录并控制台切换到代码根目录 创建虚拟环境 1python -m venv venv 激活虚拟环境 1.\\venv\\Scripts\\Activate.ps1 安装python 库1pip install -r requirements.txt 安装库的时候可能遇到timeout提示，检查网络；如遇报错看提示去Google 运行前说明 查看nornir.yaml文件，发现plugin: ExcelInventory，是因为本代码使用了【nornir_table_inventory 插件】 excel_file: \"inventory/inventory_unprotected.xlsx\"，这行配置指示了需要的excel文件，注意看文件名（unprotected），这是一个不带保护密码的excel文件，具体说明见README文件 inventory文件夹下还有一个inventory_protected.xlsx文件，这是一个有保护密码的文件 inventory_protected.xlsx文件需要自行制作并设置一个保护密码，以下是本机环境中的格式，可参照插件作者的示例增删改 可以根据实际情况修改num_workers并发进程数和日志记录 如修改inventory路径和excel文件名，自行更新代码中对应的路径变量 代码执行逻辑 最后 总有不足之处，可以提，但不一定改 我总觉得使用display和show等命令去采集设备信息不是一个很妥的方式，特别是配合textfsm形成列表套字典再写入表格；且不说速度慢，每一个命令对应一个模板导致代码结构不简洁和繁多，每个厂商的命令也不尽相同，有时同厂商同命令的回显也有差异导致要修改模板；同一源IP地址过度使用ssh登陆可能会被安全设备记录异常行为，特别是设备不可达或密码错会被识别为爆破攻击。 采集就由专业的snmp去干就好，速度快。很多公共的OID一轮询就得出结果。实在不济可以弄得专业点写个针对厂商和型号的snmp轮询模板（我不会），再专业点可以去下载设备的MIB文件鼓捣鼓捣（你来），很多厂商的网管平台号称可以纳管友商设备靠的不就是这个 对于批量修改配置，我的看法是慎用，特别是涉及控制层面的配置；如果要使用尽量在风险可控的前提下使用，如改个设备名称，添加描述，设备开局的批量调试等等；如确实要跑脚本建议先验证再验证，先小范围跑一两台设备，重要设备就手敲；随时做好提桶跑路。 现网运行业务的时候不要乱搞，看过一个运维的采购文件，中断一次扣多少钱，多长时间内不能恢复又扣钱，看的胆战心惊的，这很大程度上让我理解了为什么一个看似不大规模的运维项目最终报价高的离谱，可能也许包含了一部分这些风险 欢乐的时光总是特别短，又到时候讲byebye 欢迎“来电”来函探讨。","link":"/posts/9571d5ee.html"},{"title":"H3C自动配置(HTTP Python方式)","text":"一个小测试，实现HCL模拟器下利用python脚本根据交换机的背板MAC地址（真机环境可以换成序列号）自动加载配置。 环境介绍： HCL v5.7.1 Python 3.10.10 Tftpd64 version 4.60 步骤编写python脚本制作一个后缀名为.py的脚本。主要作用是空配置交换机开机执行自动配置，下载到本地并执行文件 由于HCL模拟器里的交换机序列号都一样的，勉为其难改用背板MAC地址；如果是真机设备直接用序列号；脚本中预留了序列号的代码，简单修改一下便可 设备 H3C S6850_1: MAC_ADDRESS:68-bf-6d-ad-01-04 设备 H3C S6850_2: MAC_ADDRESS:68-45-dc-f1-02-04 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#!/usr/bin/python#-*-coding:utf-8-*-import comwareimport platformtoolsdef do_reboot(): # scheduler job reboot platformtools.CLI('system-view ;scheduler job startup_reboot ;command 1 reboot force ;quit') # exec-delay platformtools.CLI('system-view ;scheduler schedule do_reboot ;job startup_reboot ;time once delay 1')def apply_sw1_config(): # Specify system startup platformtools.CLI('restore startup-configuration from 172.31.100.2 sw1_config.cfg') do_reboot()def apply_sw2_config(): # Specify system startup platformtools.CLI('restore startup-configuration from 172.31.100.2 sw2_config.cfg') do_reboot()# more device ...# def apply_sw3_config():# # Specify system startup# platformtools.CLI('restore startup-configuration from 172.31.100.2 sw3_config.cfg')# do_reboot()# find DEVICE_SERIAL_NUMBERres = platformtools.CLI('dis dev man', False)for i in res.get_output(): # if 'DEVICE_SERIAL_NUMBER' in i: if '68-bf-6d-ad-01-04' in i: apply_sw1_config() break if '68-45-dc-f1-02-04' in i: apply_sw2_config() break # more device ... # if 'DEVICE_SERIAL_NUMBER' in i: # apply_sw2_config() # break 准备设备配置文件 sw1_config.cfg sw2_config.cfg 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# sysname sw1_s6850# telnet server enable ssh server enable#vlan 10 to 20#int vlan 1ip add 172.31.100.10 24#int vlan 10ip add 192.168.10.254 24#interface GigabitEthernet 1/0/23 port link-type trunk port trunk permit vlan all undo shutdown #interface GigabitEthernet 1/0/24 port link-type trunk port trunk permit vlan all undo shutdown #local-user adminpassword simple Cisco123!@#authorization-attribute user-role network-adminauthorization-attribute user-role network-operatorservice-type ssh telnetquit#line vty 0 63authentication-mode schemeuser-role network-operator#return 启动HTTP服务端搭建一个简单的http服务端（可以使用网上的各种小工具，安全性自己判断），如果有python环境可以直接启动一个简易的http服务端，搭建完成后使用浏览器打开链接，确保url能正确指向第一步中的python脚本文件。 12PS D:\\TEMP\\tftpd64.460&gt; python -m http.serverServing HTTP on :: port 8000 (http://[::]:8000/) ... 浏览器URL测试 配置TFTP服务端和DHCP服务端参数 TFTP目录选择设备配置文件的目录 如果电脑有多块网卡，选择绑定需要用到的网卡IP地址 DHCP填写的Boot File 是python脚本文件的URL Tips：为了方便使用建议把device.py和设备.cfg配置文件统一放到TFTP的目录下，http服务端的启动命令也在TFTP目录下启动。 启动测试 临时关闭本机环境中的其他DHCP服务端 HCL模拟器里的交换机桥接到本地 模拟器设备开机 TFTP软件观察发现已经分配两个地址 第一台S6850 启动，观察发现下载了device.py文件，并按照py脚本命令执行了一些配置 第二台S6850 启动，观察发现下载了device.py文件，并按照py脚本命令执行了一些配置 按照设定的1分钟后重启设备，观察到出现两次Press ENTER to get started.表示已经重启了；设备名称也按照配置文件里的更改了 使用SSH登陆设备，能通过配置文件里配置的IP地址登陆设备 查看sw1的一些配置 结束 HCL模拟器的序列号一致不能通过序列号操作，实为憾事 这个方法可应用在一定规模的组网，前提条件是安装前要记录安装位置与设备序列号的对应关系 这个方法只能应用在完全空配置的设备，保存过配置的交换机就不能操作了 如果是真实设备使用，注意本机电脑的防火墙设置 前线安装人员要确定设备已加电和设备端口的指示灯状态 方法操作没有问题，但是有时候去实施，甲方看到你老是在电脑面前操作，这个体现不出工作量，需要注意，两天的活你半小时不到干完了 修改一下脚本，还能用在没有console线的环境下应急，同样确保设备是空配置启动 device.py文件里的代码有一个重启设备的定时任务，由于是做实验我设置了1分钟后重启，如果是真实环境这个延时重启建议配置时间大一点","link":"/posts/c69db7e2.html"}],"tags":[{"name":"扯谈","slug":"扯谈","link":"/tags/%E6%89%AF%E8%B0%88/"},{"name":"eNSP","slug":"eNSP","link":"/tags/eNSP/"},{"name":"USG防火墙","slug":"USG防火墙","link":"/tags/USG%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"Methods","slug":"Methods","link":"/tags/Methods/"},{"name":"Feynman","slug":"Feynman","link":"/tags/Feynman/"},{"name":"H3C Cloud Lab","slug":"H3C-Cloud-Lab","link":"/tags/H3C-Cloud-Lab/"},{"name":"汉语语法","slug":"汉语语法","link":"/tags/%E6%B1%89%E8%AF%AD%E8%AF%AD%E6%B3%95/"},{"name":"Notes","slug":"Notes","link":"/tags/Notes/"},{"name":"Update","slug":"Update","link":"/tags/Update/"},{"name":"双出口策略配置","slug":"双出口策略配置","link":"/tags/%E5%8F%8C%E5%87%BA%E5%8F%A3%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE/"},{"name":"Router","slug":"Router","link":"/tags/Router/"},{"name":"巡检脚本","slug":"巡检脚本","link":"/tags/%E5%B7%A1%E6%A3%80%E8%84%9A%E6%9C%AC/"},{"name":"H3C","slug":"H3C","link":"/tags/H3C/"},{"name":"Scripts","slug":"Scripts","link":"/tags/Scripts/"},{"name":"H3C设备","slug":"H3C设备","link":"/tags/H3C%E8%AE%BE%E5%A4%87/"},{"name":"南山南","slug":"南山南","link":"/tags/%E5%8D%97%E5%B1%B1%E5%8D%97/"},{"name":"北秋悲","slug":"北秋悲","link":"/tags/%E5%8C%97%E7%A7%8B%E6%82%B2/"},{"name":"vpn-instance","slug":"vpn-instance","link":"/tags/vpn-instance/"},{"name":"VPN实例","slug":"VPN实例","link":"/tags/VPN%E5%AE%9E%E4%BE%8B/"},{"name":"交换机升级版本","slug":"交换机升级版本","link":"/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%8D%87%E7%BA%A7%E7%89%88%E6%9C%AC/"},{"name":"GiteePages","slug":"GiteePages","link":"/tags/GiteePages/"},{"name":"博客迁移","slug":"博客迁移","link":"/tags/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"},{"name":"为什么","slug":"为什么","link":"/tags/%E4%B8%BA%E4%BB%80%E4%B9%88/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"hexo命令","slug":"hexo命令","link":"/tags/hexo%E5%91%BD%E4%BB%A4/"},{"name":"线路测试","slug":"线路测试","link":"/tags/%E7%BA%BF%E8%B7%AF%E6%B5%8B%E8%AF%95/"},{"name":"割接工作","slug":"割接工作","link":"/tags/%E5%89%B2%E6%8E%A5%E5%B7%A5%E4%BD%9C/"},{"name":"Python脚本","slug":"Python脚本","link":"/tags/Python%E8%84%9A%E6%9C%AC/"},{"name":"DOTA2","slug":"DOTA2","link":"/tags/DOTA2/"},{"name":"LGD","slug":"LGD","link":"/tags/LGD/"},{"name":"马格纳斯","slug":"马格纳斯","link":"/tags/%E9%A9%AC%E6%A0%BC%E7%BA%B3%E6%96%AF/"},{"name":"Dead Game","slug":"Dead-Game","link":"/tags/Dead-Game/"},{"name":"TI10","slug":"TI10","link":"/tags/TI10/"},{"name":"L2TP","slug":"L2TP","link":"/tags/L2TP/"},{"name":"LAC端配置","slug":"LAC端配置","link":"/tags/LAC%E7%AB%AF%E9%85%8D%E7%BD%AE/"},{"name":"iNode客户端","slug":"iNode客户端","link":"/tags/iNode%E5%AE%A2%E6%88%B7%E7%AB%AF/"},{"name":"windows自带","slug":"windows自带","link":"/tags/windows%E8%87%AA%E5%B8%A6/"},{"name":"网络中心添加","slug":"网络中心添加","link":"/tags/%E7%BD%91%E7%BB%9C%E4%B8%AD%E5%BF%83%E6%B7%BB%E5%8A%A0/"},{"name":"Network Emulator","slug":"Network-Emulator","link":"/tags/Network-Emulator/"},{"name":"PNETLab","slug":"PNETLab","link":"/tags/PNETLab/"},{"name":"Cisco","slug":"Cisco","link":"/tags/Cisco/"},{"name":"EVE-NG","slug":"EVE-NG","link":"/tags/EVE-NG/"},{"name":"Computer Case","slug":"Computer-Case","link":"/tags/Computer-Case/"},{"name":"Pin","slug":"Pin","link":"/tags/Pin/"},{"name":"更换机箱","slug":"更换机箱","link":"/tags/%E6%9B%B4%E6%8D%A2%E6%9C%BA%E7%AE%B1/"},{"name":"IPv6","slug":"IPv6","link":"/tags/IPv6/"},{"name":"PD","slug":"PD","link":"/tags/PD/"},{"name":"Manual Tunnel","slug":"Manual-Tunnel","link":"/tags/Manual-Tunnel/"},{"name":"6to4 Tunnel","slug":"6to4-Tunnel","link":"/tags/6to4-Tunnel/"},{"name":"GRE Tunnel","slug":"GRE-Tunnel","link":"/tags/GRE-Tunnel/"},{"name":"6RD Tunnel","slug":"6RD-Tunnel","link":"/tags/6RD-Tunnel/"},{"name":"ISATAP Tunnel","slug":"ISATAP-Tunnel","link":"/tags/ISATAP-Tunnel/"},{"name":"mGRE","slug":"mGRE","link":"/tags/mGRE/"},{"name":"WLAN","slug":"WLAN","link":"/tags/WLAN/"},{"name":"unmanged switch","slug":"unmanged-switch","link":"/tags/unmanged-switch/"},{"name":"PoE","slug":"PoE","link":"/tags/PoE/"},{"name":"BGP","slug":"BGP","link":"/tags/BGP/"},{"name":"jsDelivr","slug":"jsDelivr","link":"/tags/jsDelivr/"},{"name":"CDN_error","slug":"CDN-error","link":"/tags/CDN-error/"},{"name":"CDN disabled","slug":"CDN-disabled","link":"/tags/CDN-disabled/"},{"name":"H3C防火墙","slug":"H3C防火墙","link":"/tags/H3C%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"防火墙堆叠","slug":"防火墙堆叠","link":"/tags/%E9%98%B2%E7%81%AB%E5%A2%99%E5%A0%86%E5%8F%A0/"},{"name":"IRF","slug":"IRF","link":"/tags/IRF/"},{"name":"主备模式","slug":"主备模式","link":"/tags/%E4%B8%BB%E5%A4%87%E6%A8%A1%E5%BC%8F/"},{"name":"模拟测试","slug":"模拟测试","link":"/tags/%E6%A8%A1%E6%8B%9F%E6%B5%8B%E8%AF%95/"},{"name":"冗余组","slug":"冗余组","link":"/tags/%E5%86%97%E4%BD%99%E7%BB%84/"},{"name":"配置文件批量导出","slug":"配置文件批量导出","link":"/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%89%B9%E9%87%8F%E5%AF%BC%E5%87%BA/"},{"name":"配置批量增加","slug":"配置批量增加","link":"/tags/%E9%85%8D%E7%BD%AE%E6%89%B9%E9%87%8F%E5%A2%9E%E5%8A%A0/"},{"name":"SSH登陆","slug":"SSH登陆","link":"/tags/SSH%E7%99%BB%E9%99%86/"},{"name":"netmiko","slug":"netmiko","link":"/tags/netmiko/"},{"name":"log","slug":"log","link":"/tags/log/"},{"name":"MSTP","slug":"MSTP","link":"/tags/MSTP/"},{"name":"MSTP 根桥","slug":"MSTP-根桥","link":"/tags/MSTP-%E6%A0%B9%E6%A1%A5/"},{"name":"MSTP 域","slug":"MSTP-域","link":"/tags/MSTP-%E5%9F%9F/"},{"name":"MSTP 根桥选举","slug":"MSTP-根桥选举","link":"/tags/MSTP-%E6%A0%B9%E6%A1%A5%E9%80%89%E4%B8%BE/"},{"name":"工业交换机","slug":"工业交换机","link":"/tags/%E5%B7%A5%E4%B8%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA/"},{"name":"独立电源安装","slug":"独立电源安装","link":"/tags/%E7%8B%AC%E7%AB%8B%E7%94%B5%E6%BA%90%E5%AE%89%E8%A3%85/"},{"name":"线缆选择","slug":"线缆选择","link":"/tags/%E7%BA%BF%E7%BC%86%E9%80%89%E6%8B%A9/"},{"name":"SSLVPN配置","slug":"SSLVPN配置","link":"/tags/SSLVPN%E9%85%8D%E7%BD%AE/"},{"name":"SSLVPN实验","slug":"SSLVPN实验","link":"/tags/SSLVPN%E5%AE%9E%E9%AA%8C/"},{"name":"iNode","slug":"iNode","link":"/tags/iNode/"},{"name":"CVE 2015-0204","slug":"CVE-2015-0204","link":"/tags/CVE-2015-0204/"},{"name":"CVE 1999-0524","slug":"CVE-1999-0524","link":"/tags/CVE-1999-0524/"},{"name":"SSLVPN","slug":"SSLVPN","link":"/tags/SSLVPN/"},{"name":"SSL SERVER POLICY","slug":"SSL-SERVER-POLICY","link":"/tags/SSL-SERVER-POLICY/"},{"name":"导出安全策略","slug":"导出安全策略","link":"/tags/%E5%AF%BC%E5%87%BA%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5/"},{"name":"安全策略表格","slug":"安全策略表格","link":"/tags/%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E8%A1%A8%E6%A0%BC/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"openpyxl","slug":"openpyxl","link":"/tags/openpyxl/"},{"name":"导出对象组","slug":"导出对象组","link":"/tags/%E5%AF%BC%E5%87%BA%E5%AF%B9%E8%B1%A1%E7%BB%84/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"定制iNode","slug":"定制iNode","link":"/tags/%E5%AE%9A%E5%88%B6iNode/"},{"name":"Linux版iNode","slug":"Linux版iNode","link":"/tags/Linux%E7%89%88iNode/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"SSH Keys","slug":"SSH-Keys","link":"/tags/SSH-Keys/"},{"name":"git方式推送","slug":"git方式推送","link":"/tags/git%E6%96%B9%E5%BC%8F%E6%8E%A8%E9%80%81/"},{"name":"https方式推送","slug":"https方式推送","link":"/tags/https%E6%96%B9%E5%BC%8F%E6%8E%A8%E9%80%81/"},{"name":"Ubuntu server 22.04","slug":"Ubuntu-server-22-04","link":"/tags/Ubuntu-server-22-04/"},{"name":"ubuntu-22.04-live-server","slug":"ubuntu-22-04-live-server","link":"/tags/ubuntu-22-04-live-server/"},{"name":"GitLab","slug":"GitLab","link":"/tags/GitLab/"},{"name":"gitlab-ce_15.8.3","slug":"gitlab-ce-15-8-3","link":"/tags/gitlab-ce-15-8-3/"},{"name":"MPLS VPN","slug":"MPLS-VPN","link":"/tags/MPLS-VPN/"},{"name":"Option C","slug":"Option-C","link":"/tags/Option-C/"},{"name":"跨域","slug":"跨域","link":"/tags/%E8%B7%A8%E5%9F%9F/"},{"name":"nter-AS","slug":"nter-AS","link":"/tags/nter-AS/"},{"name":"Django","slug":"Django","link":"/tags/Django/"},{"name":"SNMP","slug":"SNMP","link":"/tags/SNMP/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"sqlite","slug":"sqlite","link":"/tags/sqlite/"},{"name":"ORM","slug":"ORM","link":"/tags/ORM/"},{"name":"OID","slug":"OID","link":"/tags/OID/"},{"name":"Github","slug":"Github","link":"/tags/Github/"},{"name":"venv","slug":"venv","link":"/tags/venv/"},{"name":"OSPF","slug":"OSPF","link":"/tags/OSPF/"},{"name":"虚链路替代","slug":"虚链路替代","link":"/tags/%E8%99%9A%E9%93%BE%E8%B7%AF%E6%9B%BF%E4%BB%A3/"},{"name":"virtual-link","slug":"virtual-link","link":"/tags/virtual-link/"},{"name":"nornir","slug":"nornir","link":"/tags/nornir/"},{"name":"异步并发","slug":"异步并发","link":"/tags/%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91/"},{"name":"脚本","slug":"脚本","link":"/tags/%E8%84%9A%E6%9C%AC/"},{"name":"批量导出","slug":"批量导出","link":"/tags/%E6%89%B9%E9%87%8F%E5%AF%BC%E5%87%BA/"},{"name":"批量配置","slug":"批量配置","link":"/tags/%E6%89%B9%E9%87%8F%E9%85%8D%E7%BD%AE/"},{"name":"自动配置","slug":"自动配置","link":"/tags/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"},{"name":"http","slug":"http","link":"/tags/http/"},{"name":"DHCP","slug":"DHCP","link":"/tags/DHCP/"},{"name":"TFTP","slug":"TFTP","link":"/tags/TFTP/"}],"categories":[{"name":"扯谈","slug":"扯谈","link":"/categories/%E6%89%AF%E8%B0%88/"},{"name":"eNSP","slug":"eNSP","link":"/categories/eNSP/"},{"name":"Methods","slug":"Methods","link":"/categories/Methods/"},{"name":"H3C Cloud Lab","slug":"H3C-Cloud-Lab","link":"/categories/H3C-Cloud-Lab/"},{"name":"Notes","slug":"Notes","link":"/categories/Notes/"},{"name":"Update","slug":"Update","link":"/categories/Update/"},{"name":"Scripts","slug":"Scripts","link":"/categories/Scripts/"},{"name":"H3C","slug":"H3C","link":"/categories/H3C/"},{"name":"Blog","slug":"Blog","link":"/categories/Blog/"},{"name":"PNETLab","slug":"PNETLab","link":"/categories/PNETLab/"},{"name":"Fantasy","slug":"Fantasy","link":"/categories/Fantasy/"}]}