[{"content":"尽管原生的Stack主题已经已经很好了，但是由于个人的审美和喜好，还是对其进行了一些自认为较合理的修改\n网上的教程很多，搜索引擎遨游一下便有修改方法，以下只列出修改的结果\n首页 左侧 sidebar 设置鼠标移动至头像进行旋转 不显示社交媒体图标 菜单栏图标与文字修改间隔（\u0026ndash;menu-icon-separation: 15px;） 菜单项排序（调整weight值） 中间内容 添加卡片中显示文章\u0026lt;!--more--\u0026gt;摘要 文章正文行距设置（margin-top: 10px;， margin-bottom: 10px;） 首页显示10片文章 右侧 sidebar 添加鼠标移动至元素上放大效果 移除文字说明和修改分类图标 分类和标签右侧显示计数 分类和标签显示数量为10 底部 添加和设置 github，bilibili，mail图标和跳转 归档页 修改分类矩形框大小 显示双栏 添加tags显示 相册 修改Links页面为Gallery 相册使用fliphtml5外部链接展示 文章页 文章正文行距设置（margin-top: 10px;， margin-bottom: 10px;） 添加Fancybox灯箱 右侧目录修改了间距 修改了代码块样式 增加notice短代码 设置选中内容背景色 写作和推送脚本 创建md并用typora打开\n# 项目目录下hugo.yaml文件最后添加 security: exec: allow: - \u0026#39;^(dart-)?sass(-embedded)?$\u0026#39; - \u0026#39;^go$\u0026#39; - \u0026#39;^git$\u0026#39; - \u0026#39;^npx$\u0026#39; - \u0026#39;^postcss$\u0026#39; - \u0026#39;^tailwindcss$\u0026#39; - \u0026#39;^typora$\u0026#39; # 添加 typora 到允许的执行列表 osEnv: - \u0026#39;(?i)^((HTTPS?|NO)_PROXY|PATH(EXT)?|APPDATA|TE?MP|TERM|GO\\w+|(XDG_CONFIG_)?HOME|USERPROFILE|SSH_AUTH_SOCK|DISPLAY|LANG|SYSTEMDRIVE)$\u0026#39; # 添加typora环境变量 系统--高级系统设置--环境变量--选中Path--编辑--新建--添加typora所在路径 typora测试：新开一个cmd窗口，输入typora--回车，能打开typora软件 # 直接用命令创建md并用typora打开 hugo new --editor typora post/xxx.md create_article.bat 脚本，双击运行提示输入md文件名并用typora软件打开该md文件\n@echo off echo 【Create an article, enter the md file name, and the final format will be: YYYYMMDD_mdFileName.md】 set /p input= [mdFileName]: set date=%Date:~0,4%%Date:~5,2%%Date:~8,2% hugo new post/%date%_%input%.md start typora content\\post\\%date%_%input%.md\u0026#34; exit 该脚本同样需要上一步骤中的添加yaml内容和添加环境变量操作\ngit_push_github.bat脚本，双击运行自动执行git相关命令\n@echo off :: 设置当前日期和时间格式 for /f \u0026#34;tokens=2 delims==\u0026#34; %%I in (\u0026#39;\u0026#34;wmic os get localdatetime /value\u0026#34;\u0026#39;) do set datetime=%%I set year=%datetime:~0,4% set month=%datetime:~4,2% set day=%datetime:~6,2% set hour=%datetime:~8,2% set minute=%datetime:~10,2% set second=%datetime:~12,2% :: 创建 commit 消息：格式为 \u0026#34;YYYY-MM-DD HH:MM:SS\u0026#34; set commit_message=%year%-%month%-%day% %hour%:%minute%:%second% :: 显示正在执行的命令 echo Executing git add ... :: 执行 git add . 命令 git add . :: 显示正在执行的命令 echo Executing git commit with message: \u0026#34;Commit on %commit_message%\u0026#34; :: 执行 git commit 命令，使用动态生成的 commit 消息 git commit -m \u0026#34;Commit on %commit_message%\u0026#34; :: 显示正在执行的命令 echo Executing git push ... :: 执行 git push 命令 git push :: 提示完成 echo Git push completed with commit message: \u0026#34;Commit on %commit_message%\u0026#34; echo ---------- OK ---------- echo Automatically close the command prompt window after 60 seconds. :: 等待 60 秒后自动关闭命令行窗口 timeout /t 60 /nobreak \u0026gt;nul exit Github Action 自动部署自行搜索了，不是很复杂的东西\n说明 本人不是搞软件的，纯属瞎鼓捣 修改的使用的方法多来自网络和gpt对话 有些地方改的不如意，将就着用（弄不出来） 古德拜 ","date":"2024-12-15T14:14:51+08:00","permalink":"https://kiraster.github.io/posts/3d1b11f0.html/","title":"当前主题与原版Stack主题不同的地方"},{"content":"2024-12-14 更换博客静态网站生成器，主题为hugo-theme-stack 原因是之前的hexo主题，很多包提示过时（重装操作麻烦） 且主题仓库自2022年已是公开只读 主题设置抄了网上很多代码，不一一致谢了 已经尽量不花里胡哨了 将就着用 2023-05-10 添加发布时间久远文章的提示 添加插件 hexo-tag-mmedia 修改已插入的 bilibili 视频 2023-04-16 更换行内代码字体颜色为 #000(黑色) 禁用代码块行号显示 禁用代码块复制功能 更换部分文章图片尺寸 文章页是有目录的，鼠标向上滚动\u0026ndash;\u0026gt;导航栏最右侧的图标 2022-11-07 更换博客主题为 :Minos 移除 Minos 主题中分享和评论组件 移除 About 页面 发布日期/阅读时间 元素 修改网站字体为 思源黑体 修改归档页和标签页 不分页 添加相册页面（有点简陋） 其它边边角角修改 谢原作者https://github.com/ppoffice/ 2021-11-20 首页导航栏不显示 Category 页面入口链接 分类页 Category 内容侧边栏显示 清除 Jade 无用代码 修正 Jade 部分代码 修正 CSS 样式文件 2021-11-15 修改首页内容展示方式 修改 pagination 样式 2021-11-07 修改网站字体为思源黑体 2021-10-30 修改 Archive 页样式 修改链接样式 2021-10-30 添加本地搜索 2021-10-29 修改 post 文章页和其他页面的 date_format 参数 2021-10-26 修改 archive 页面条目显示数量 添加文章页底部 Published、Tags 2021-10-24 修改样式中的 media query 参数 2021-10-22 修改文章页，移除左侧 sidebar，page_main 添加边框样式 修改 about 页面底部 contact 信息 移除 article-toc 文章目录 移除 sidebar CV 信息标签 2021-10-16 添加文章页版权信息 修改 md 文件信息 2021-10-12 使用 Academic 主题，感谢作者 Le Phower\u0026rsquo;s 博客从 Gitee 迁移到 GitHub 修改主题配置文件 修改 sidebar 的 social 内容 主页 content 修改为显示最近十篇文章 主页 content 添加置顶文章 除 category 页和 about 页外添加 pagination 添加 category 页，添加 tag-cloud 添加 archive 页 添加 about 页 post 页面侧边栏添加 article-toc 文章目录 添加百度统计，谷歌统计，谷歌收录，bing 收录 侧边栏添加 aplayer 播放器，显示效果不美观，已注释代码 page_main 的 div CSS 浮动问题未解决 2021-01-23 添加文章页评论邮件提醒功能 2021-01-14 修改博客网站访问地址不带二级目录 修正修改访问地址后文章阅读次数显示为 0 问题 修正 whoami 页面显示双 footer 栏问题 2021-01-08 修正文章阅读次数显示为 0 问题 添加文章模板 updated 参数 对网站添加百度统计 2021-01-06 制作修改博客 Logo，更改 cover 图片 修改导航栏标签为中文 启用 valine 评论代码 添加文章页 END 结束分割线 添加文章页上一篇下一篇链接 添加 post 文章模板，添加 categories,series,cover,tags 参数 修改网页底部 footer，添加网站运行时间记录 更换图标库链接 添加网站图床 更换文章页播放音乐 更换网站首页 Website slogans 动态文字 文章页和 about 页添加网易云音乐 文章页添加“友情链接” 更换部分页面左上角图标返回链接 添加 abbrlink 插件，修改文章页 url 链接 博客网站本地初始调试工作完成，推送至 Gitee ","date":"2024-12-14T00:02:00Z","permalink":"https://kiraster.github.io/posts/e2a2e564.html/","title":"BLOG CHANGELOG"},{"content":"实现功能：电脑开机启动微信自动登陆进入主窗口\n实现逻辑：微信启动后将窗口置顶，模拟输入回车键\n前提：微信自动登陆已开启，启动微信后显示进入微信按钮\n操作步骤 安装pywinauto库 全局安装或虚拟环境（我使用conda虚拟环境）\nconda create -n wechatautologin python=3.10 pip install pywinauto 编写三个文件和创建快捷方式 wechatautologin.py，python代码文件\nfrom pywinauto.application import Application from pywinauto.keyboard import send_keys # 启动应用程序 app = Application(\u0026#39;uia\u0026#39;).start(r\u0026#34;D:\\Program Files (x86)\\Tencent\\WeChat\\WeChat.exe\u0026#34;) # 查找微信窗口，使用正则表达式匹配标题包含“微信” dlg = app.window(title_re=\u0026#34;微信\u0026#34;) # 增加等待时间，确保窗口加载完成 dlg.wait(\u0026#39;visible\u0026#39;, timeout=30) # 等待窗口可见，最大等待 30 秒 # 将窗口置顶并获取焦点 dlg.set_focus() # 模拟按下 Enter 键 send_keys(\u0026#34;{ENTER}\u0026#34;) wechatautologin.bat，bat文件，用于进入虚拟环境，运行 wechatautologin.py\n@echo off REM 确保脚本运行时的工作目录是批处理文件所在的目录 cd /d %~dp0 REM 激活conda虚拟环境 call D:\\miniconda3\\Scripts\\activate.bat wechatautologin REM 启动应用 python wechatautologin.py wechatautologin.vbs，单独运行bat文件会显示cmd窗口，套一层vbs解决\nSet WshShell = CreateObject(\u0026#34;WScript.Shell\u0026#34;) WshShell.Run \u0026#34;\u0026#34;\u0026#34;F:\\wechatautologin\\wechatautologin.bat\u0026#34;\u0026#34;\u0026#34;, 0, False wechatautologin.lnk，wechatautologin.vbs文件的快捷方式，右键wechatautologin.vbs在菜单中点击创建快捷方式\n添加开机启动 将上一步骤创建的快捷方式复制或剪切到以下路径（两个位置，二选一）\nC:\\Users\\xxx\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp 最后 Pywinauto文档 https://static.kancloud.cn/gnefnuy/pywinauto_doc/1193035 如果出现微信启动后没有自动点击进入微信按钮，可添加一定时间time.sleep等待 注意替换微信安装位置，我这安装在D盘 小玩意儿，省一个点击鼠标或敲回车的时间 ","date":"2024-12-06T10:57:11Z","permalink":"https://kiraster.github.io/posts/fdccc10e.html/","title":"电脑微信自动登陆进入主窗口"},{"content":"惠普440笔记本安装win10后，有线无线自动切换，只能二选一问题\n拔插网线显示如下：\n查看官网社区帖子，提示关闭BIOS的自动切换功能，无效\n需要关闭两个服务才可\n解决方法 去掉BIOS设置里的LAN/WLAN Switch选项\nCtrl+R，输入services.msc找到如下两个服务关闭\n效果 ","date":"2024-11-22T15:17:57Z","permalink":"https://kiraster.github.io/posts/85530671.html/","title":"HP440笔记本有线无线自动切换问题"},{"content":"USB转串口转接线显示非旺玖原装的pl2303请联系供应商问题\n之前也出现过这个问题，解决方法是重装驱动，但是windows自动更新又把驱动升级了，又出现这个问题\n网上的解释是驱动问题，确实也是\n看到一篇文章说驱动文件替换可解决此问题，记录一下\n陪伴多年的\u0026quot;好伙伴\u0026quot; 淘宝买的，刚去查了一下，这么多年了居然还是当时的价格（真保值） 这是转接线，转接线RJ45接口\u0026ndash;\u0026gt;568B标准网线\u0026ndash;\u0026gt;设备console接口（看介绍支持20米连接，我最长也就连接15米左右，正常使用） 远离机柜噪音，远离空调冻西瓜，舒适蹲角落配置设备，无需DB9线 驱动替换 查看显示非旺玖原装的pl2303请联系供应商 查看驱动版本，显示2024/5/29，3.8.43.0，就是这个windows自动更新导致的问题，下一步替换图右侧显示的第一个文件 下载ser2pl64.zip，解压后复制文件粘贴到C:\\Windows\\System32\\drivers，提示替换文件 点击替换会提示文件正在使用，此时拔掉USB转串口转接线，点击重试可替换成功 最后在设备管理器查看，已正常显示com接口 驱动文件 https://aoian.lanzoue.com/b00r6oisj ，（5678） https://www.alipan.com/s/EhKkRT3VcKr ","date":"2024-11-22T14:19:42Z","permalink":"https://kiraster.github.io/posts/a0365ff4.html/","title":"非旺玖原装的pl2303请联系供应商-驱动替换"},{"content":"Van Nav是一个轻量的导航站\nGithub开源仓库：https://github.com/Mereithhh/van-nav\n现在的浏览器地址栏都集成了搜索功能，用不上导航站里的在线搜索，以下列出去除该功能的操作步骤\n我将其定位为半内网使用的一个导航站\n下载源码 git clone 或 Download ZIP\n修改npm为阿里云镜像 国内连接官方的npm时常抽风，替换yarn.lock 里面的resolved为registry.npmmirror.com，从阿里云镜像源下载依赖.\n两个文件的路径为：\nui/admin/yarn.lock ui/website/yarn.lock 修改相应代码 修改代码ui\\website\\src\\components\\Content\\index.tsx文件\nLine：13 （删除此行import）\nimport { generateSearchEngineCard } from \u0026#34;../../utils/serachEngine\u0026#34;; Line：87-116 （替换内容）\nconst filteredData = useMemo(() =\u0026gt; { if (!data.tools) { return null; // 如果没有 tools 属性，直接返回 null } const localResult = data.tools .filter((item: any) =\u0026gt; { const hide = item.hide; if (!hide) return true; // 如果 item 没有 hide 属性，保留该项 if (hide \u0026amp;\u0026amp; isLogin()) return false; // 如果 item 隐藏且用户已登录，丢弃该项 return false; // 默认丢弃该项 }) .filter((item: any) =\u0026gt; { if (currTag === \u0026#34;全部工具\u0026#34;) { return true; // 如果当前标签是“全部工具”，保留该项 } return item.catelog === currTag; // 只保留与当前标签匹配的项 }) .filter((item: any) =\u0026gt; { if (searchString === \u0026#34;\u0026#34;) { return true; // 如果搜索字符串为空，保留该项 } // 保留与搜索字符串匹配的项 return ( mutiSearch(item.name, searchString) || mutiSearch(item.desc, searchString) || mutiSearch(item.url, searchString) ); }); return localResult; // 返回过滤后的结果 }, [data, currTag, searchString]); 构建镜像 将代码文件夹上传至linux，需提前安装号docker（网络上教程多如牛毛，一搜便知）\ndocker build -t my-nav:v0.1 . 创建容器 docker run -d --name my-van-nav --restart always -p 6412:6412 -v /opt/superE/van-nav-data:/app/data my-nav:v0.1 访问Van Nav 地址栏输入访问服务器的IP+端口号（我本地自建了dns+nginx，所以显示如下）\n通过观察发现，输入关键字后，结果中并没有必应谷歌百度的选项列出，效果达成\n最后 自动获取网站logo图标不好使，可F12查看\u0026ndash;网络\u0026ndash;image，将图标的URL地址手动添加 图标会储存到数据库，我也不知道怎么实现的，设置完成后即使网络断开或对应的服务网站没开启导航站也能加载图标 如果将导航站部署在服务器，所有人打开的页面都是一致的，不能做到每个人都自定义其访问链接（适合定位为统一入口） 如果个人使用部署可以下载对应的安装包（各种跨平台的都有），需要设置开机自启，访问地址为：http://localhost:6412 惊叹到Go语言编写的程序占用空间如此之小 ","date":"2024-11-21T17:36:11Z","permalink":"https://kiraster.github.io/posts/ae17cb36.html/","title":"修改Van Nav搜索结果不显示百度谷歌必应搜索"},{"content":"本文为Flask应用进行容器化的笔记\n上传代码至RockyLinux 将代码文件IPA_VIEW_v0.2.zip上传至/opt路径下（可选择其他路径）\n解压在当前目录\nunzip IPA_VIEW_v0.2.zip 或解压到指定目录\nunzip IPA_VIEW_v0.2.zip -d /IPA_VIEW 在项目根目录下创建Dockerfile文件 # 使用官方的 Python 镜像作为基础镜像 FROM python:3.10-slim # 设置工作目录 WORKDIR /app # 将当前目录的内容复制到容器的工作目录中 COPY . . # 设置时区为 Asia/Shanghai RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime RUN echo \u0026#34;Asia/Shanghai\u0026#34; \u0026gt; /etc/timezone # 安装所需的依赖 # RUN pip install --no-cache-dir -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/ # 有时上面这个清华源不好使，可替换阿里云，网络畅通可以直接连接官方源 RUN pip install --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ -r requirements.txt # 运行数据库初始化脚本 RUN flask init # 运行generate_secret_key.py随机生成32 字节的 SECRET_KEY，然后自动写入configs.py文件 RUN python generate_secret_key.py # 暴露应用使用的端口 # 只是一个标记指示，实际操作中使用其他端口并不影响 # 规范使用的话与实际使用的端口一致 EXPOSE 8080 # 运行 Flask 应用 CMD [\u0026#34;waitress-serve\u0026#34;, \u0026#34;--call\u0026#34;, \u0026#34;pear_admin:create_app\u0026#34;] 构建镜像 docker build -t ipa-view:v0.2 . 说明：ipa-view:v0.2 ，{镜像名称}:{TAG}\n创建并运行 Docker 容器 以下创建容器的方式，根据需要选择其中之一即可\n方式一：简易启动 docker run -d --restart always -p 5666:8080 ipa-view:v0.2 方式二：指定name和network # 创建network，用于隔离，属于不同network的容器之间互相隔离不能互访 docker network create ipa-view-net docker run -d --name ipa-view-container --network ipa-view-net --restart always -p 5666:8080 ipa-view:v0.2 参数说明：\n-d，后台运行 \u0026ndash;name ipa-view-container， 设置容器名称，不设置会随机生成 \u0026ndash;network ipa-view-net， 设置network，使用该参数前需要手动创建ipa-view-net，否则提示错误docker: Error response from daemon: network ipa-view-net not found. \u0026ndash;restart always ，无论何种原因导致容器退出，都重启容器 -p 5666:8080，宿主机端口:容器内flask应用端口 ipa-view:v0.2，上一步构建的镜像 方式三：Docker Volumes（持久化） 在默认情况下，Docker Volumes 会被创建在 /var/lib/docker/volumes 目录下\n将容器内日志目录和数据库目录保存至宿主机，便于数据库备份和查看日志\n1、创建目录：在宿主机上，建一个目录作为Volumes的保存位置\nmkdir -p /opt/ipa_view_data/sqlite_db mkdir -p /opt/ipa_view_data/log 2、创建 Docker Volumes：使用 docker volume create 命令创建 Docker Volumes，并指定自定义的位置\ndocker volume create --driver local --opt o=bind --opt type=none --opt device=/opt/ipa_view_data/sqlite_db sqlite_db docker volume create --driver local --opt o=bind --opt type=none --opt device=/opt/ipa_view_data/log log 3、创建容器\ndocker run -d -v sqlite_db:/app/instance -v log:/app/log --name ipa-view-container --network ipa-view-net --restart always -p 5666:8080 ipa-view:v0.2 查看容器 [root@localhost IPA_VIEW_v0.2]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a72fd1a21a30 ipa-view:v0.2 \u0026#34;waitress-serve --ca…\u0026#34; 21 seconds ago Up 19 seconds 0.0.0.0:5666-\u0026gt;8080/tcp, :::5666-\u0026gt;8080/tcp ipa-view-container 进入容器 docker exec -it a72fd1a21a30 /bin/bash or docker exec -it ipa-view-container /bin/bash 访问应用 浏览器输入http://your_ip_address:5666\n常见问题记录 容器内flask应用访问网络 最简单的方法是直接使用宿主机的 IP 地址来访问宿主机所在的网络中的其他主机\n通常情况下，容器可以通过宿主机的 IP 地址来访问外部网络\n容器内IP地址访问外部设备会经过宿主机的NAT转发出去\n外部网络访问flask应用 防火墙放行端口\nfirewall-cmd --permanent --add-port=5666/tcp firewall-cmd --reload 日志查看 直接docker命令查看\n[root@localhost IPA_VIEW_v0.2]# docker logs ipa-view-container [INFO][2024-09-30 06:39:08,049][base.py:181]Scheduler started [DEBUG][2024-09-30 06:39:08,051][base.py:954]Looking for jobs to run [DEBUG][2024-09-30 06:39:08,095][base.py:1030]No jobs; waiting until a job is added [INFO][2024-09-30 06:39:08,169][wasyncore.py:485]Serving on http://0.0.0.0:8080 [INFO][2024-09-30 06:41:14,489][__init__.py:76]172.31.100.2 - - [30/Sep/2024 06:41:14] \u0026#34;GET / HTTP/1.1\u0026#34; 200 - [INFO][2024-09-30 06:41:14,588][__init__.py:76]172.31.100.2 - - [30/Sep/2024 06:41:14] \u0026#34;GET /static/component/pear/css/pear.css HTTP/1.1\u0026#34; 200 - [INFO][2024-09-30 06:41:14,592][__init__.py:76]172.31.100.2 - - [30/Sep/2024 06:41:14] \u0026#34;GET /static/admin/css/admin.css HTTP/1.1\u0026#34; 200 - [INFO][2024-09-30 06:41:14,596][__init__.py:76]172.31.100.2 - - [30/Sep/2024 06:41:14] \u0026#34;GET /static/admin/css/admin.dark.css HTTP/1.1\u0026#34; 200 - [INFO][2024-09-30 06:41:14,603][__init__.py:76]172.31.100.2 - - [30/Sep/2024 06:41:14] \u0026#34;GET /static/admin/css/variables.css HTTP/1.1\u0026#34; 200 - [WARNING][2024-09-30 06:41:14,608][task.py:114]Task queue depth is 1 [WARNING][2024-09-30 06:41:14,613][task.py:114]Task queue depth is 2 [INFO][2024-09-30 06:41:14,634][__init__.py:76]172.31.100.2 - - [30/Sep/2024 06:41:14] \u0026#34;GET /static/admin/css/reset.css HTTP/1.1\u0026#34; 200 - [WARNING][2024-09-30 06:41:14,637][task.py:114]Task queue depth is 2 进入Docker Volumes（持久化）的目录查看\ncd /opt/ipa_view_data/log/ [root@localhost log]# pwd /opt/ipa_view_data/log [root@localhost log]# cat log.log | more [2024-10-09 15:43:55,150][MainThread:140080137403264][task_id:apscheduler.scheduler][base.py:181][INFO][Scheduler started] [2024-10-09 15:43:55,152][APScheduler:140080083592896][task_id:apscheduler.scheduler][base.py:954][DEBUG][Looking for jobs to run] [2024-10-09 15:43:55,193][APScheduler:140080083592896][task_id:apscheduler.scheduler][base.py:1030][DEBUG][No jobs; waiting until a job is added] [2024-10-09 15:43:55,286][MainThread:140080137403264][task_id:waitress][wasyncore.py:485][INFO][Serving on http://0.0.0.0:8080] [2024-10-09 15:43:55,292][waitress-0:140080074151616][task_id:access_log][__init__.py:76][INFO][172.31.100.2 - - [09/Oct/2024 15:43:55] \u0026#34;GET /api/v1/scheduler/jobs HTTP/ 1.1\u0026#34; 200 -] 设置容器自动重启 前面docker run命令已设置，跳过\nDocker 容器的重启策略如下： \u0026ndash;restart具体参数值详细信息： no　// 默认策略,容器退出时不重启容器； on-failure　// 在容器非正常退出时（退出状态非0）才重新启动容器； on-failure:3 // 在容器非正常退出时重启容器，最多重启3次； always　// 无论退出状态是如何，都重启容器；\n修改已有容器restart参数\ndocker update --restart=always a72fd1a21a30 容器时间与宿主机时间问题 前面dockerfile已设置，跳过\n经过测试，容器内的时间能与宿主机同步，但是时区不能\n解决方式一：\n在 Dockerfile 中设置时区。确保在容器构建阶段就设置好时区 在Dockerfile文件内添加如下代码\n# 设置时区为 Asia/Shanghai RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime RUN echo \u0026#34;Asia/Shanghai\u0026#34; \u0026gt; /etc/timezone 解决方式二：\n通过环境变量设置时区，在启动容器时设置环境变量\ndocker run -e TZ=Asia/Shanghai -d --name ipa-view-container-v2.2 --network ipa-view-net --restart always -p 5667:8080 ipa-view:v0.2 ","date":"2024-10-10T22:47:44Z","permalink":"https://kiraster.github.io/posts/297bc3bd.html/","title":"Rocky Linux 8.7 Flask应用docker容器化"},{"content":"本文描述的是在windows系统上配置免密git push至Gogs仓库和Gthub仓库\n之前也弄过类似操作，但是由于那次重装系统给干没了\nGogs为本地使用，设计为不联网\nGithub为在线使用，同时使用的还有Github Pages的博客更新\n前提 本机中已有Github的免密配置，也就是在Github上传了公钥，不变更这部分内容 Github配置的是全局用户，不变更这部分内容，新增的Gogs使用local user进行配置 尽量保持不改动Github部分的配置 生成用于Gogs的密钥对 在任意目录下启动git bash 窗口（gogs@gogs.net邮箱地址为Gogs上的用户邮箱，不是实际互联网上存在的）\n$ ssh-keygen -t ed25519 -C \u0026#34;gogs@gogs.net\u0026#34; Generating public/private ed25519 key pair. Enter file in which to save the key (/c/Users/xxx/.ssh/id_ed25519): gogs_id_ed25519 Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in gogs_id_ed25519 Your public key has been saved in gogs_id_ed25519.pub The key fingerprint is: …… 密钥对拷贝至.ssh目录 由于在创建ssh-key时没有指定保存到.ssh目录，所以手动复制到该目录(C:\\Users\\xxx\\ .ssh)\n也可以在稍后创建的config文件中指定密钥对的路径，但是不妥，还是放在统一的目录\n创建config文件 资源管理器打开目录C:\\Users\\xxx\\.ssh，创建一个config文件（注意没有后缀） gogs_id_ed25519为前面步骤中创建的密钥对名称 id_ed25519为我正在使用的github密钥对名称 注意：gogs使用的是root用户，因为当初没有创建git用户（如果你创建了git用户，则使用git）\n# gogs Host 172.31.100.225 HostName 172.31.100.225 PreferredAuthentications publickey IdentityFile C:/Users/xxx/.ssh/gogs_id_ed25519 User root # github Host github.com HostName github.com PreferredAuthentications publickey IdentityFile C:/Users/xxx/.ssh/id_ed25519 User git 上传ssh公钥和测试 登陆Gogs，头像\u0026ndash;用户设置\u0026ndash;SSH 密钥\u0026ndash;增加密钥\n记事本打开gogs_id_ed25519.pub，复制内容粘贴至密钥内容，填写一个密钥名称，点击增加密钥\n测试\n# Gogs测试 $ ssh -T root@172.31.100.225 Hi there, You\u0026#39;ve successfully authenticated, but Gogs does not provide shell access. If this is unexpected, please log in with password and setup Gogs under another user. # Github测试 $ ssh -T git@github.com Hi kiraster! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. git配置和初始化(懂的跳过) 为了演示操作，需要在Gogs创建一个仓库 在本地创建一个目录test\n打开创建的test目录\n右键git bash here打开窗口，执行git初始化命令和配置local user\ngit init # 使用local配置用户，配置的local user仅对当前本地仓库起作用 # gogs@gogs.net邮箱地址为Gogs上的用户邮箱，不是实际互联网上存在的 git config --local user.name \u0026#34;gogs\u0026#34; git config --local user.email \u0026#34;gogs@gogs.net\u0026#34; $ git init Initialized empty Git repository in D:/test/.git/ $ git config --local user.name \u0026#34;gogs\u0026#34; $ git config --local user.email \u0026#34;gogs@gogs.net\u0026#34; 修改remote仓库地址（由于当时省事没有修改domian）\ngit remote add origin root@172.31.100.225:gogs/test.git 执行剩下命令\ntouch README.md git add README.md git commit -m \u0026#34;first commit\u0026#34; git push -u origin master $ touch README.md $ git add README.md $ git commit -m \u0026#34;first commit\u0026#34; [master (root-commit) 6b281e3] first commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 README.md $ git push -u origin master Enumerating objects: 3, done. Counting objects: 100% (3/3), done. Writing objects: 100% (3/3), 200 bytes | 200.00 KiB/s, done. Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 To 172.31.100.225:gogs/test.git * [new branch] master -\u0026gt; master Branch \u0026#39;master\u0026#39; set up to track remote branch \u0026#39;master\u0026#39; from \u0026#39;origin\u0026#39;. Gogs上查看\n","date":"2024-09-19T14:35:00Z","permalink":"https://kiraster.github.io/posts/fe1c1d91.html/","title":"配置Gogs和Github免密git push"},{"content":"Gogs 是一款极易搭建的自助 Git 服务。\nGogs官网：https://gogs.io/\n以下内容为本次安装过程的一个记录\n准备环境 按照官方文档指示的环境要求处理， https://gogs.io/docs/installation 一台虚拟机 选择你熟悉和中意的linux，不必在意我以下使用的发行版（留了模板）\n此处选用Rocky8.7是因为本机VMware里躺着一个虚拟机模版，果断完整克隆一份（省时）\n传闻消耗资源少？，就分个2核1G内存的丐版（不够再加）\n配置静态IP地址， 配置可连接互联网（基操）\n虚拟机硬件资源配置\n[root@localhost /]# lscpu | grep -E \u0026#39;CPU|Core\u0026#39; CPU op-mode(s): 32-bit, 64-bit CPU(s): 2 On-line CPU(s) list: 0,1 Core(s) per socket: 2 CPU family: 16 CPU MHz: 3013.536 NUMA node0 CPU(s): 0,1 [root@localhost /]# free -h total used free shared buff/cache available Mem: 777Mi 284Mi 78Mi 3.0Mi 413Mi 358Mi Swap: 2.0Gi 8.0Mi 2.0Gi [root@localhost /]# 数据库 跳过此项，使用sqlite\n安装git 检查是否安装Git，如发现已安装，检查版本是否满足环境要求所需版本\n[root@localhost ~]# git -bash: git: command not found 安装git\ndnf update dnf install git -y …… [root@localhost ~]# git --version git version 2.43.5 SSH服务器 该版本已安装ssh服务，可远程ssh登陆（不懂是之前手动安装的还是系统自带的，不重要）\n安装必要工具和依赖 [root@localhost ~]# tar --version tar (GNU tar) 1.30 Copyright (C) 2017 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt;. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Written by John Gilmore and Jay Fenlason. [root@localhost ~]# wget --version GNU Wget 1.19.5 built on linux-gnu. 经过检查，系统已安装tar和wget，如未安装，使用如下命令安装\ndnf install wget tar …… ##　下载Gogs二进制源码\n/opt 路径下创建Gogs目录，用于存放源码文件\ncd /opt mkdir Gogs_0.13.0 …… [root@localhost opt]# ll total 0 drwxr-xr-x. 2 root root 6 Sep 17 05:14 Gogs_0.13.0 [root@localhost opt]# wget下载二进制源码（当前日期20240917最新github release 版本）\nwget https://github.com/gogs/gogs/releases/download/v0.13.0/gogs_0.13.0_linux_amd64.tar.gz # 发现从github下载速度慢，从官网 https://dl.gogs.io/0.13.0/ 下载 wget https://dl.gogs.io/0.13.0/gogs_0.13.0_linux_amd64.tar.gz [root@localhost Gogs_0.13.0]# ll total 29352 -rw-r--r--. 1 root root 30054955 Feb 25 2023 gogs_0.13.0_linux_amd64.tar.gz [root@localhost Gogs_0.13.0]# 解压下载的 tar 包 [root@localhost Gogs_0.13.0]# tar -xzf gogs_0.13.0_linux_amd64.tar.gz [root@localhost Gogs_0.13.0]# ll total 29352 drwxrwxr-x. 3 1000 1000 85 Feb 25 2023 gogs -rw-r--r--. 1 root root 30054955 Feb 25 2023 gogs_0.13.0_linux_amd64.tar.gz [root@localhost Gogs_0.13.0]# 运行Gogs 防火墙设置\n# 确保允许访问 Gogs 使用的端口（默认是 3000）,主要使用物理机访问使用，且我这Rocky8.7没安装图形界面，所以…… firewall-cmd --permanent --add-port=3000/tcp firewall-cmd --reload # 修改实际使用的端口号，下一步骤中修改30000，当然使用3000也是可以的 firewall-cmd --permanent --add-port=30000/tcp firewall-cmd --reload 使用命令 cd 进入到解压后的目录。\n执行命令 ./gogs web。\nGogs 默认会在端口 3000 启动 HTTP 服务，访问 /install 以进行初始配置（例如 http://localhost:3000/install ）。\n[root@localhost gogs]# ./gogs web 2024/09/17 05:44:24 [ WARN] Custom config \u0026#34;/opt/Gogs_0.13.0/gogs/custom/conf/app.ini\u0026#34; not found. Ignore this warning if you\u0026#39;re running for the first time 2024/09/17 05:44:24 [TRACE] Log mode: Console (Trace) 2024/09/17 05:44:24 [ INFO] Gogs 0.13.0 2024/09/17 05:44:24 [TRACE] Work directory: /opt/Gogs_0.13.0/gogs 2024/09/17 05:44:24 [TRACE] Custom path: /opt/Gogs_0.13.0/gogs/custom 2024/09/17 05:44:24 [TRACE] Custom config: /opt/Gogs_0.13.0/gogs/custom/conf/app.ini 2024/09/17 05:44:24 [TRACE] Log path: /opt/Gogs_0.13.0/gogs/log 2024/09/17 05:44:24 [TRACE] Build time: 2023-02-25 02:30:34 UTC 2024/09/17 05:44:24 [TRACE] Build commit: 8c21874c00b6100d46b662f65baeb40647442f42 2024/09/17 05:44:24 [ INFO] Run mode: Development 2024/09/17 05:44:24 [ INFO] Available on http://localhost:3000/ 从外部访问虚拟机中Gogs 访问 /install 以进行初始配置（例如 http://172.31.100.xx:3000/install ）,可以自由发挥（以下是我的配置）\n上面配置中邮件服务留空了，本地没有邮件服务器，也不想联网\n上面配置中的创建管理员用户可以不设置，第一个注册的用户自动成为管理员，我在此处截胡了\n没有邮件服务，引起的问题：用户不能通过邮箱找回密码，需要管理员用户重置\n重启Gogs，进行登陆\n中文显示\n设置 Gogs 服务开机启动 将/opt/Gogs_0.13.0/gogs/scripts/systemd路径下的gogs.service文件复制到/etc/systemd/system [root@localhost systemd]# cp gogs.service /etc/systemd/system 修改/etc/systemd/system路径下的gogs.service文件\n[Unit] Description=Gogs After=syslog.target After=network.target # After=mariadb.service mysql.service mysqld.service postgresql.service memcached.service $ [Service] # Modify these two values and uncomment them if you have # repos with lots of files and get an HTTP error 500 because # of that ### #LimitMEMLOCK=infinity #LimitNOFILE=65535 Type=simple User=root Group=root WorkingDirectory=/opt/Gogs_0.13.0/gogs ExecStart=/opt/Gogs_0.13.0/gogs/gogs web Restart=always # Environment=USER=git HOME=/home/root # Some distributions may not support these hardening directives. If you cannot start the s$ # to an unknown option, comment out the ones not supported by your version of systemd. ProtectSystem=full PrivateDevices=yes PrivateTmp=yes NoNewPrivileges=true [Install] WantedBy=multi-user.target 重新加载 systemd 配置并启动 Gogs 服务\nsystemctl daemon-reload systemctl start gogs systemctl enable gogs 外部仓库克隆测试 以https方式 git clone 一个仓库至本地，（github把https方式克隆仓库给ban了，现在都需要验证，去gitee克隆）\n再次进行初始化 种种原因可能需要再次进行初始化（比如修改数据库，更改管理员等）\n删除/root/gogs-repositories 目录\n[root@localhost ~]# rm -rf gogs-repositories/ 删除/opt/Gogs_0.13.0/gogs 目录\n[root@localhost Gogs_0.13.0]# rm -rf gogs 再次解压，运行Gogs\n[root@localhost gogs]# ./gogs web 2024/09/17 12:12:01 [ WARN] Custom config \u0026#34;/opt/Gogs_0.13.0/gogs/custom/conf/app.ini\u0026#34; not found. Ignore this warning if you\u0026#39;re running for the first time 2024/09/17 12:12:01 [TRACE] Log mode: Console (Trace) 2024/09/17 12:12:01 [ INFO] Gogs 0.13.0 2024/09/17 12:12:01 [TRACE] Work directory: /opt/Gogs_0.13.0/gogs 2024/09/17 12:12:01 [TRACE] Custom path: /opt/Gogs_0.13.0/gogs/custom 2024/09/17 12:12:01 [TRACE] Custom config: /opt/Gogs_0.13.0/gogs/custom/conf/app.ini 2024/09/17 12:12:01 [TRACE] Log path: /opt/Gogs_0.13.0/gogs/log 2024/09/17 12:12:01 [TRACE] Build time: 2023-02-25 02:30:34 UTC 2024/09/17 12:12:01 [TRACE] Build commit: 8c21874c00b6100d46b662f65baeb40647442f42 2024/09/17 12:12:01 [ INFO] Run mode: Development 2024/09/17 12:12:01 [ INFO] Available on http://localhost:3000/ 2024/09/17 12:12:01 [FATAL] [gogs.io/gogs/internal/cmd/web.go:776 runWeb()] Failed to start server: listen tcp 0.0.0.0:3000: bind: address already in use [root@localhost gogs]# 提示端口已经在使用，关闭进程或重启系统解决\n# 查找进程ID，终止进程 [root@localhost gogs]# lsof -i :3000 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME gogs 1543 root 10u IPv6 29519 0t0 TCP *:hbci (LISTEN) [root@localhost gogs]# kill 1543 [root@localhost gogs]# lsof -i :3000 [root@localhost gogs]# ","date":"2024-09-18T11:22:42Z","permalink":"https://kiraster.github.io/posts/5745efe9.html/","title":"在Rocky Linux 8.7虚拟机安装Gogs的记录"},{"content":"上一篇文整了个大阵仗（内容太多，浏览器好像有些受不了）\n经过在搜索引擎遨游，最终发现这些题其实在华为的ICT学院课程网站上有\nhttps://talent.shixizhi.huawei.com \u0026ndash;\u0026raquo; 搜索ICT \u0026ndash;\u0026raquo; 华为ICT大赛 - 网络赛道学习空间（中国区）\n还有其他内容，有兴趣可以点击看看\n本次研究研究，搓一搓的图如标题所示\n文章末尾，附上ensp拓扑文件和配置导出文件\n说明 ensp版本：1.3.00.100 V100R003C00SPC100 电脑：Win10 ltsc （CPU：不配拥有名称，RAM=16GB） 我电脑跑这图是真的卡 遇到FW启动错误代码40，建议先启动FW，再启动其他设备 AR路由器我整不出G0/0/3接口，使用G3/0/0代替 实验拓扑 配置 任务1：VLAN 按照给出的表格数据配置对应设备的vlan、Trunk、Access 路由器接口注意配置子接口dot1q termination vid xx ，arp broadcast enable 防火墙接口注意配置 vlan-type dot1q xx 任务2：IP地址 按照给出的表格数据配置对应设备的IP地址 任务3：MSTP配置 SW1\n# stp mode mstp # stp region-configuration region-name RG1 instance 1 vlan 2 to 9 instance 2 vlan 10 to 20 active region-configuration # interface Ethernet0/0/1 stp edged-port enable # interface Ethernet0/0/2 stp edged-port enable # SW2\n# stp mode mstp # stp region-configuration region-name RG1 instance 1 vlan 2 to 9 instance 2 vlan 10 to 20 active region-configuration # stp instance 1 priority 0 stp instance 2 priority 4096 # interface GigabitEthernet0/0/1 stp root-protection # interface GigabitEthernet0/0/5 stp disable # SW3\n# stp mode mstp # stp region-configuration region-name RG1 instance 1 vlan 2 to 9 instance 2 vlan 10 to 20 active region-configuration # stp instance 1 priority 4096 stp instance 2 priority 0 # interface GigabitEthernet0/0/1 stp edged-port enable # interface GigabitEthernet0/0/2 stp root-protection # interface GigabitEthernet0/0/5 stp disable # 验证: dis stp\n任务4：防火墙安全域配置 FW1\n# firewall zone trust add interface GigabitEthernet1/0/5.1 add interface GigabitEthernet1/0/5.2 # firewall zone untrust add interface GigabitEthernet1/0/3 add interface GigabitEthernet1/0/3.1 # firewall zone dmz add interface GigabitEthernet1/0/1 # FW2\n# firewall zone trust add interface GigabitEthernet1/0/5.1 add interface GigabitEthernet1/0/5.2 # firewall zone untrust add interface GigabitEthernet1/0/3 add interface GigabitEthernet1/0/3.1 # firewall zone dmz add interface GigabitEthernet1/0/1 # FW3\n# firewall zone trust add interface GigabitEthernet1/0/1 # firewall zone untrust add interface GigabitEthernet1/0/2 # 验证：dis zone interface\n任务5：防火墙VRRP、双机热备和安全策略配置 FW1\n# interface GigabitEthernet1/0/5.1 vrrp vrid 1 virtual-ip 192.168.1.254 active # interface GigabitEthernet1/0/5.2 vrrp vrid 2 virtual-ip 192.168.2.254 standby # hrp enable hrp interface GigabitEthernet1/0/1 remote 15.1.1.2 hrp mirror session enable # security-policy rule name web source-zone trust destination-zone untrust source-address 192.168.1.0 mask 255.255.255.0 destination-address 100.1.1.1 mask 255.255.255.255 service protocol tcp destination-port 8080 action permit rule name Wireless source-zone trust destination-zone untrust source-address 192.168.2.0 mask 255.255.255.0 action permit # FW2\n# interface GigabitEthernet1/0/5.1 vrrp vrid 1 virtual-ip 192.168.1.254 standby # interface GigabitEthernet1/0/5.2 vrrp vrid 2 virtual-ip 192.168.2.254 active # hrp enable hrp interface GigabitEthernet1/0/1 remote 15.1.1.1 hrp mirror session enable # # 配置hrp后，安全策略配置从HRP_M[FW1]同步，不能在HRP_S[FW2]配置 # FW3\n# nat server 0 protocol tcp global 100.1.1.1 8080 inside 172.16.1.1 www # security-policy rule name web source-zone untrust destination-zone trust destination-address 172.16.1.0 mask 255.255.255.0 service http action permit # 验证\n任务6：公网静态路由配置 FW1\nip route-static 0.0.0.0 0.0.0.0 10.2.1.2 ip route-static 100.1.1.1 255.255.255.255 10.2.2.2 FW2\nip route-static 0.0.0.0 0.0.0.0 10.3.1.2 ip route-static 100.1.1.1 255.255.255.255 10.3.2.2 FW3\nip route-static 0.0.0.0 0.0.0.0 20.1.3.1 ip route-static 100.1.1.1 255.255.255.255 NULL0 PE1\nip route-static 192.168.2.0 255.255.255.0 10.2.1.1 ip route-static 192.168.2.0 255.255.255.0 10.3.1.1 任务7：公网动态路由配置 PE1\n# isis 1 is-level level-2 network-entity 01.0000.0010.0100.1001.00 domain-authentication-mode md5 cipher ICTEXAM # interface LoopBack0 isis enable 1 # interface GigabitEthernet0/0/2 isis enable 1 # bgp 100 router-id 1.1.1.1 peer 2.2.2.2 as-number 100 peer 2.2.2.2 connect-interface LoopBack0 # PE2\n# isis 1 is-level level-2 network-entity 01.0000.0020.0200.2002.00 domain-authentication-mode md5 cipher ICTEXAM # interface LoopBack0 isis enable 1 # interface GigabitEthernet0/0/1 isis enable 1 # bgp 100 router-id 3.3.3.3 peer 2.2.2.2 as-number 100 peer 2.2.2.2 connect-interface LoopBack0 peer 20.1.4.2 as-number 200 # P\n# isis 1 is-level level-2 network-entity 01.0000.0030.0300.3003.00 domain-authentication-mode md5 cipher ICTEXAM # interface LoopBack0 ip address 2.2.2.2 255.255.255.255 isis enable 1 # interface GigabitEthernet0/0/1 isis enable 1 # interface GigabitEthernet0/0/2 isis enable 1 # bgp 100 router-id 2.2.2.2 group ibgpv4 internal peer ibgpv4 connect-interface LoopBack0 peer 1.1.1.1 as-number 100 peer 1.1.1.1 group ibgpv4 peer 3.3.3.3 as-number 100 peer 3.3.3.3 group ibgpv4 # ipv4-family unicast peer ibgpv4 enable peer ibgpv4 reflect-client peer 1.1.1.1 group ibgpv4 peer 3.3.3.3 group ibgpv4 # Internet\n# bgp 200 router-id 16.16.16.16 peer 20.1.4.1 as-number 100 network 16.16.16.16 255.255.255.255 # FW3\n# ospf 100 default-route-advertise area 0.0.0.0 network 30.1.1.1 0.0.0.0 # interface GigabitEthernet1/0/1 ospf network-type p2p # DC-GW\n# interface GigabitEthernet0/0/1 ospf network-type p2p # ospf 100 router-id 11.11.11.11 area 0.0.0.0 network 11.11.11.11 0.0.0.0 network 30.1.1.2 0.0.0.0 network 30.1.2.1 0.0.0.0 network 30.1.3.1 0.0.0.0 # Leaf1\n# ospf 100 router-id 12.12.12.12 area 0.0.0.0 network 12.12.12.12 0.0.0.0 network 30.1.2.2 0.0.0.0 network 172.16.1.254 0.0.0.0 # Leaf2\n# ospf 100 router-id 13.13.13.13 area 0.0.0.0 network 13.13.13.13 0.0.0.0 network 30.1.3.2 0.0.0.0 # 验证\n任务8：MPLS VPN PE1\n# bgp 100 # ipv4-family unicast import-route static # ipv4-family vpnv4 peer 2.2.2.2 enable # mpls lsr-id 1.1.1.1 mpls # mpls ldp # interface GigabitEthernet0/0/2 mpls mpls ldp # ip vpn-instance ToDC route-distinguisher 100:1 vpn-target 200:1 both # interface GigabitEthernet0/0/1.1 ip binding vpn-instance ToDC ip address 10.2.2.2 255.255.255.252 # interface GigabitEthernet3/0/0.1 ip binding vpn-instance ToDC ip address 10.3.2.2 255.255.255.252 # ip route-static vpn-instance ToDC 192.168.0.0 255.255.0.0 10.2.2.1 ip route-static vpn-instance ToDC 192.168.0.0 255.255.0.0 10.3.2.1 # # bgp 100 # ipv4-family vpn-instance ToDC import-route static # PE2\n# bgp 100 # ipv4-family unicast peer 2.2.2.2 next-hop-local # ipv4-family vpnv4 peer 2.2.2.2 enable # mpls lsr-id 3.3.3.3 mpls # mpls ldp # interface GigabitEthernet0/0/1 mpls mpls ldp # ip vpn-instance ToDC route-distinguisher 100:1 vpn-target 200:1 both # interface GigabitEthernet0/0/2 ip binding vpn-instance ToDC ip address 20.1.3.1 255.255.255.252 # # bgp 100 # ipv4-family vpn-instance ToDC peer 20.1.3.2 as-number 300 # P\n# bgp 100 # ipv4-family vpnv4 undo policy vpn-target peer ibgpv4 enable peer ibgpv4 reflect-client peer 1.1.1.1 group ibgpv4 peer 3.3.3.3 group ibgpv4 # mpls lsr-id 2.2.2.2 mpls # mpls ldp # interface GigabitEthernet0/0/1 mpls mpls ldp # interface GigabitEthernet0/0/2 mpls mpls ldp # FW3\n# bgp 300 peer 20.1.3.1 as-number 100 # ipv4-family unicast import-route static # dis bgp vpnv4 all peer\ndis mpls ldp int\ndis mpls ldp peer\ndis ip vpn-instance verbose\ndis bgp vpnv4 all routing-table\n任务9：GRE Leaf1\n# interface Tunnel0/0/0 ip address 173.1.2.1 255.255.255.252 tunnel-protocol gre source 12.12.12.12 destination 13.13.13.13 # ip route-static 172.16.2.0 255.255.255.0 173.1.2.2 # Leaf2\n# interface Tunnel0/0/0 ip address 173.1.2.2 255.255.255.252 tunnel-protocol gre source 13.13.13.13 destination 12.12.12.12 # ip route-static 172.16.3.0 255.255.255.0 173.1.2.1 # 任务10：WLAN FW1/FW2\n# interface GigabitEthernet1/0/5.1 service-manage ping permit # interface GigabitEthernet1/0/5.2 service-manage ping permit # AC\n# vlan batch 19 to 20 # dhcp enable # ip pool For_AP gateway-list 192.168.19.254 network 192.168.19.0 mask 255.255.255.0 # ip pool STA gateway-list 192.168.2.254 network 192.168.2.0 mask 255.255.255.0 excluded-ip-address 192.168.2.1 192.168.2.3 # interface Vlanif19 ip address 192.168.19.254 255.255.255.0 dhcp select global # interface Vlanif20 ip address 192.168.2.1 255.255.255.0 dhcp select global # # capwap source interface vlanif19 # wlan security-profile name s1 security wpa-wpa2 psk pass-phrase Huawei@123 aes ssid-profile name s1 ssid ICT vap-profile name p1 forward-mode tunnel service-vlan vlan-id 20 ssid-profile s1 security-profile s1 ap-group name default radio 0 vap-profile p1 wlan 1 ap-id 1 type-id 56 ap-mac 00e0-fcef-0250 ap-sn 2102354483100961AE61 ap-group default # 综合测试 Web-Client访问Web-Server\nFW3查看会话\n\u0026lt;FW3\u0026gt;dis firewall session table verbose 2024-07-24 03:54:01.520 Current Total Sessions : 2 http VPN: public --\u0026gt; public ID: c487fdedb993138324f66a07acf Zone: untrust --\u0026gt; trust TTL: 00:00:10 Left: 00:00:05 Recv Interface: GigabitEthernet1/0/2 Interface: GigabitEthernet1/0/1 NextHop: 30.1.1.2 MAC: 00e0-fc45-0d43 \u0026lt;--packets: 5 bytes: 515 --\u0026gt; packets: 6 bytes: 399 192.168.1.1:2050 --\u0026gt; 100.1.1.1:8080[172.16.1.1:80] PolicyName: web TCP State: close bgp VPN: public --\u0026gt; public ID: c487fdedb99d128393566a074da Zone: untrust --\u0026gt; local TTL: 00:20:00 Left: 00:20:00 Recv Interface: GigabitEthernet1/0/2 Interface: InLoopBack0 NextHop: 127.0.0.1 MAC: 0000-0000-0000 \u0026lt;--packets: 64 bytes: 3,158 --\u0026gt; packets: 68 bytes: 3,404 20.1.3.1:49928 --\u0026gt; 20.1.3.2:179 PolicyName: --- TCP State: established \u0026lt;FW3\u0026gt; VM1和VM2互相ping测试\n无线客户端PC1 ping测试\n最后 个人觉得整个拓扑的就必上一篇文的规模小多了，量也没那么大，技术要点也不考察那么细致 貌似模拟器的USG防火墙有bug，拓扑中FW3与PE2建立EBGP，FW3与DC-GW建立OSPF，均不用配置安全策略就能建立起邻居关系 就不过多总结了，都在敲击键盘的过程中了 把文中的配置复制粘贴进对应设备最终就能实现综合测试的结果 …… 可能有更好的实现需求的配置答案（山外有山） 文件存阿里云盘了，这是链接：[分享的文件 ] 欢迎“来电”来函探讨。 ","date":"2024-07-24T16:16:07Z","permalink":"https://kiraster.github.io/posts/8f2ea734.html/","title":"2022-2023华为ICT大赛（全国）实验题研究"},{"content":"在公众号【易联无界】看到文章 [华为2021-2022全球总决赛实验题 ]\n研究研究，搓一搓\n文章很长，建议电脑端网页查看\n文章末尾，附上ensp拓扑文件和配置导出文件\n说明 ensp版本：1.3.00.100 V100R003C00SPC100 电脑：Win10 ltsc （CPU：不配拥有名称，RAM=16GB） FW桥接网卡只是直观查看会话和状态 我电脑跑这图是真的卡 遇到FW启动错误代码40，建议先启动两台FW，再启动其他设备 AR路由器我整不出G0/0/3接口，使用G3/0/0代替 Video server 地址修改为100.1.100.2 PC4手动配置IPv6地址 2001:200:1:200::254/64 实验拓扑 需求分析和配置 4.1 Task 1: Basic Data Configuration 4.1.1 Configuring VLANs 按照给出的表格数据配置对应设备的vlan、Trunk、Access 路由器接口注意配置子接口dot1q termination vid xx ，arp broadcast enable 防火墙接口注意配置 vlan-type dot1q xx 4.1.2 Configuring IP Addresses 按照给出的表格数据配置对应设备的IP地址、IPv6地址 对于vrf接口和防火墙vsys接口，可先配置description描述 配置必要的接口描述（后续配置静态路由时快速查看和检查） 4.2 Task 2: Route Deployment on the MAN 4.2.1 Configuring IGP 配置IS-IS，进程号100，区域ID 86.0010，level-2路由器，系统ID的换算，直连不选举DIS 配置接口cost，（设置cost-style wide） IS-IS收敛参数，spf计算参数，lsp 快速泛洪 IS-IS hello md5认证 IPv6 IS-IS，IPv6的IS-IS cost AR1/AR2/AR3/AR4/CR1/CR2\n# 区域ID + 系统ID换算 AR1: network-entity 86.0010.0010.0100.1001.00 AR2: network-entity 86.0010.0010.0100.1002.00 AR3: network-entity 86.0010.0010.0100.1003.00 AR4: network-entity 86.0010.0010.0100.1004.00 CR1: network-entity 86.0010.0010.0100.1005.00 CR2: network-entity 86.0010.0010.0100.1006.00 # # AR1 bfd # isis 100 # level-2路由器 is-level level-2 # 设置IS-IS设备接收和发送路由的开销类型，默认narro的值范围为1-63，wide的值范围1-16777215 cost-style wide # IS-IS收敛参数 timer lsp-generation 1 50 100 level-2 # lsp 快速泛洪 flash-flood level-2 # bfd bfd all-interfaces enable network-entity 86.0010.0010.0100.1001.00 # spf计算参数 timer spf 1 20 100 # IPv6拓扑类型 ipv6 enable topology ipv6 # # loopback 0 接口运行isis interface LoopBack0 isis enable 100 isis ipv6 enable 100 # AR1\n# interface GigabitEthernet0/0/0 isis enable 100 isis ipv6 enable 100 isis circuit-type p2p isis authentication-mode md5 Huawei@123 isis ipv6 cost 200 level-2 isis cost 200 level-2 # interface GigabitEthernet0/0/1 isis enable 100 isis ipv6 enable 100 isis circuit-type p2p isis authentication-mode md5 Huawei@123 isis ipv6 cost 100 level-2 isis cost 100 level-2 # AR2\n# interface GigabitEthernet0/0/0 isis enable 100 isis ipv6 enable 100 isis circuit-type p2p isis authentication-mode md5 Huawei@123 isis ipv6 cost 200 level-2 isis cost 200 level-2 # interface GigabitEthernet0/0/1 isis enable 100 isis ipv6 enable 100 isis circuit-type p2p isis authentication-mode md5 Huawei@123 isis ipv6 cost 100 level-2 isis cost 100 level-2 # AR3\n# interface GigabitEthernet0/0/0 isis enable 100 isis ipv6 enable 100 isis circuit-type p2p isis authentication-mode md5 Huawei@123 isis ipv6 cost 200 level-2 isis cost 200 level-2 # interface GigabitEthernet0/0/2 isis enable 100 isis ipv6 enable 100 isis circuit-type p2p isis authentication-mode md5 Huawei@123 isis ipv6 cost 100 level-2 isis cost 100 level-2 # AR4\n# interface GigabitEthernet0/0/0 isis enable 100 isis ipv6 enable 100 isis circuit-type p2p isis authentication-mode md5 Huawei@123 isis ipv6 cost 200 level-2 isis cost 200 level-2 # interface GigabitEthernet0/0/2 isis enable 100 isis ipv6 enable 100 isis circuit-type p2p isis authentication-mode md5 Huawei@123 isis ipv6 cost 100 level-2 isis cost 100 level-2 # CR1\n# interface GigabitEthernet0/0/0 isis enable 100 isis ipv6 enable 100 isis circuit-type p2p isis authentication-mode md5 Huawei@123 isis ipv6 cost 300 level-2 isis cost 300 level-2 # interface GigabitEthernet0/0/1 isis enable 100 isis ipv6 enable 100 isis circuit-type p2p isis authentication-mode md5 Huawei@123 isis ipv6 cost 100 level-2 isis cost 100 level-2 # interface GigabitEthernet0/0/2 isis enable 100 isis ipv6 enable 100 isis circuit-type p2p isis authentication-mode md5 Huawei@123 isis ipv6 cost 100 level-2 isis cost 100 level-2 # CR2\n# interface GigabitEthernet0/0/0 isis enable 100 isis ipv6 enable 100 isis circuit-type p2p isis authentication-mode md5 Huawei@123 isis ipv6 cost 300 level-2 isis cost 300 level-2 # interface GigabitEthernet0/0/1 isis enable 100 isis ipv6 enable 100 isis circuit-type p2p isis authentication-mode md5 Huawei@123 isis ipv6 cost 100 level-2 isis cost 100 level-2 # interface GigabitEthernet0/0/2 isis enable 100 isis ipv6 enable 100 isis circuit-type p2p isis authentication-mode md5 Huawei@123 isis ipv6 cost 100 level-2 isis cost 100 level-2 # 验证\ndis ip routing-table protocol isis （配置完成6台路由器，查看路由表学到其他5台路由器的loopback0地址）\n\u0026lt;AR1\u0026gt;dis ip routing-table protocol isis | i 1.1.1. Route Flags: R - relay, D - download to fib ------------------------------------------------------------------------------ Public routing table : ISIS Destinations : 10 Routes : 11 ISIS routing table status : \u0026lt;Active\u0026gt; Destinations : 10 Routes : 11 Destination/Mask Proto Pre Cost Flags NextHop Interface 1.1.1.2/32 ISIS-L2 15 200 D 10.1.2.2 GigabitEthernet0/0/0 1.1.1.3/32 ISIS-L2 15 200 D 10.1.5.1 GigabitEthernet0/0/1 1.1.1.4/32 ISIS-L2 15 400 D 10.1.5.1 GigabitEthernet0/0/1 1.1.1.5/32 ISIS-L2 15 100 D 10.1.5.1 GigabitEthernet0/0/1 1.1.1.6/32 ISIS-L2 15 300 D 10.1.2.2 GigabitEthernet0/0/0 ISIS routing table status : \u0026lt;Inactive\u0026gt; Destinations : 0 Routes : 0 \u0026lt;AR1\u0026gt; dis ipv routing-table protocol isis （IPv6）\n\u0026lt;CR2\u0026gt;dis ipv routing-table protocol isis | i 2022:: Public Routing Table : ISIS Summary Count : 11 ISIS Routing Table\u0026#39;s Status : \u0026lt; Active \u0026gt; Summary Count : 11 Destination : 2022::1 PrefixLength : 128 Destination : 2022::2 PrefixLength : 128 Destination : 2022::3 PrefixLength : 128 Destination : 2022::4 PrefixLength : 128 Destination : 2022::5 PrefixLength : 128 ISIS Routing Table\u0026#39;s Status : \u0026lt; Inactive \u0026gt; Summary Count : 0 \u0026lt;CR2\u0026gt; 4.2.2 Configuring BGP 配置MAN IBGP，AS64812，CR1和CR2为RR反射器（v4,vpnv4,v6），使用对等体组命令，使用loopback0作为源 配置与DataCenter的EBGP，AS62022，使用loopback0（EBGP多跳）（v4,v6），LSW1和LSW2配置指向CR1,CR2的默认路由（后边有配置静态路由的需求） 配置CR1,CR2 的v4 EBGP邻居md5认证 配置CR1,CR2路由阻尼dampening 配置CR1和CR2条件通告默认路由到AR1-AR4 配置AR1,和AR3优选下一跳CR1，AR2和AR4优选下一跳CR2 配置BGP network组播源服务器网段 CR1\n# bgp 64812 router-id 1.1.1.5 group ibgpv4 internal peer ibgpv4 connect-interface LoopBack0 group ibgpv6 internal peer ibgpv6 connect-interface LoopBack0 peer 1.1.1.1 group ibgpv4 peer 1.1.1.2 group ibgpv4 peer 1.1.1.3 group ibgpv4 peer 1.1.1.4 group ibgpv4 peer 1.1.1.6 group ibgpv4 peer 2022::1 group ibgpv6 peer 2022::2 group ibgpv6 peer 2022::3 group ibgpv6 peer 2022::4 group ibgpv6 peer 2022::6 group ibgpv6 peer 1.1.1.8 as-number 62022 peer 1.1.1.8 ebgp-max-hop 2 peer 1.1.1.8 connect-interface LoopBack0 peer 1.1.1.8 password cipher Huawei@123 peer 2022::8 as-number 62022 peer 2022::8 ebgp-max-hop 2 peer 2022::8 connect-interface LoopBack0 # ipv4-family unicast reflector cluster-id 56.56.56.56 dampening 10 2000 3000 10000 network 100.1.100.0 255.255.255.252 peer ibgpv4 reflect-client peer ibgpv4 next-hop-local peer ibgpv4 default-route-advertise conditional-route-match-all 100.1.200.0 255.255.255.0 undo peer 1.1.1.6 default-route-advertise peer 1.1.1.8 enable # ipv6-family unicast reflector cluster-id 56.56.56.56 dampening 10 2000 3000 10000 peer 2022::8 enable peer ibgpv6 enable peer ibgpv6 reflect-client peer ibgpv6 next-hop-local peer 2022::1 group ibgpv6 peer 2022::2 group ibgpv6 peer 2022::3 group ibgpv6 peer 2022::4 group ibgpv6 peer 2022::6 group ibgpv6 # ipv4-family vpnv4 reflector cluster-id 56.56.56.56 undo policy vpn-target peer ibgpv4 enable peer ibgpv4 reflect-client peer 1.1.1.1 group ibgpv4 peer 1.1.1.2 group ibgpv4 peer 1.1.1.3 group ibgpv4 peer 1.1.1.4 group ibgpv4 # # ip route-static 1.1.1.8 255.255.255.255 10.5.8.1 # ipv6 route-static 2022::8 128 2001:5:8::1 # CR2\n# bgp 64812 router-id 1.1.1.6 group ibgpv4 internal peer ibgpv4 connect-interface LoopBack0 group ibgpv6 internal peer ibgpv6 connect-interface LoopBack0 peer 1.1.1.1 group ibgpv4 peer 1.1.1.2 group ibgpv4 peer 1.1.1.3 group ibgpv4 peer 1.1.1.4 group ibgpv4 peer 1.1.1.5 group ibgpv4 peer 2022::1 group ibgpv6 peer 2022::2 group ibgpv6 peer 2022::3 group ibgpv6 peer 2022::4 group ibgpv6 peer 2022::5 group ibgpv6 peer 1.1.1.9 as-number 62022 peer 1.1.1.9 ebgp-max-hop 2 peer 1.1.1.9 connect-interface LoopBack0 peer 1.1.1.9 password cipher Huawei@123 peer 2022::9 as-number 62022 peer 2022::9 ebgp-max-hop 2 peer 2022::9 connect-interface LoopBack0 # ipv4-family unicast reflector cluster-id 56.56.56.56 dampening 10 2000 3000 10000 network 100.1.100.0 255.255.255.252 peer ibgpv4 reflect-client peer ibgpv4 next-hop-local peer ibgpv4 default-route-advertise conditional-route-match-all 100.1.200.0 255.255.255.0 undo peer 1.1.1.5 default-route-advertise peer 1.1.1.9 enable # ipv6-family unicast reflector cluster-id 56.56.56.56 dampening 10 2000 3000 10000 peer 2022::9 enable peer ibgpv6 enable peer ibgpv6 reflect-client peer ibgpv6 next-hop-local peer 2022::1 group ibgpv6 peer 2022::2 group ibgpv6 peer 2022::3 group ibgpv6 peer 2022::4 group ibgpv6 peer 2022::5 group ibgpv6 # ipv4-family vpnv4 reflector cluster-id 56.56.56.56 undo policy vpn-target peer ibgpv4 enable peer ibgpv4 reflect-client peer 1.1.1.1 group ibgpv4 peer 1.1.1.2 group ibgpv4 peer 1.1.1.3 group ibgpv4 peer 1.1.1.4 group ibgpv4 # # ip route-static 1.1.1.9 255.255.255.255 10.6.9.1 # ipv6 route-static 2022::9 128 2001:6:9::1 # AR1/AR2/AR3/AR4/，注意修改各路由器的router-id\n# AR1 bgp 64812 router-id 1.1.1.1 peer 1.1.1.5 as-number 64812 peer 1.1.1.5 connect-interface LoopBack0 peer 1.1.1.6 as-number 64812 peer 1.1.1.6 connect-interface LoopBack0 peer 2022::5 as-number 64812 peer 2022::5 connect-interface LoopBack0 peer 2022::6 as-number 64812 peer 2022::6 connect-interface LoopBack0 # ipv4-family unicast peer 1.1.1.5 next-hop-local peer 1.1.1.6 next-hop-local # ipv6-family unicast peer 2022::5 enable peer 2022::5 next-hop-local peer 2022::6 enable peer 2022::6 next-hop-local # ipv4-family vpnv4 policy vpn-target peer 1.1.1.5 enable peer 1.1.1.6 enable # AR1/AR3\n# bgp 64812 # ipv4-family unicast peer 1.1.1.5 preferred-value 2000 peer 1.1.1.6 preferred-value 1000 # AR2/AR4\n# bgp 64812 # ipv4-family unicast peer 1.1.1.5 preferred-value 1000 peer 1.1.1.6 preferred-value 2000 # LSW1\n# ip route-static 0.0.0.0 0.0.0.0 10.5.8.2 # ipv6 route-static :: 0 2001:5:8::2 # bgp 62022 router-id 1.1.1.8 peer 1.1.1.5 as-number 64812 peer 1.1.1.5 ebgp-max-hop 2 peer 1.1.1.5 connect-interface LoopBack0 peer 1.1.1.5 password cipher Huawei@123 peer 2022::5 as-number 64812 peer 2022::5 ebgp-max-hop 2 peer 2022::5 connect-interface LoopBack0 # ipv4-family unicast peer 1.1.1.5 enable # ipv6-family unicast peer 2022::5 enable # LSW2\n# ip route-static 0.0.0.0 0.0.0.0 10.6.9.2 # ipv6 route-static :: 0 2001:6:9::2 # bgp 62022 router-id 1.1.1.9 peer 1.1.1.6 as-number 64812 peer 1.1.1.6 ebgp-max-hop 2 peer 1.1.1.6 connect-interface LoopBack0 peer 1.1.1.6 password cipher Huawei@123 peer 2022::6 as-number 64812 peer 2022::6 ebgp-max-hop 2 peer 2022::6 connect-interface LoopBack0 # ipv4-family unicast peer 1.1.1.6 enable # ipv6-family unicast peer 2022::6 enable # 验证\ndis bgp peer （IPv4peer）\n\u0026lt;AR1\u0026gt;dis bgp peer BGP local router ID : 1.1.1.1 Local AS number : 64812 Total number of peers : 2 Peers in established state : 2 Peer V AS MsgRcvd MsgSent OutQ Up/Down State PrefRcv 1.1.1.5 4 64812 15 14 0 00:12:14 Established 1 1.1.1.6 4 64812 15 14 0 00:12:14 Established 1 \u0026lt;AR1\u0026gt; dis bgp ipv6 peer （IPv6 peer）\n\u0026lt;AR2\u0026gt;dis bgp ipv6 peer BGP local router ID : 1.1.1.2 Local AS number : 64812 Total number of peers : 2 Peers in established state : 2 Peer V AS MsgRcvd MsgSent OutQ Up/Down State PrefRcv 2022::5 4 64812 12 12 0 00:10:23 Established 0 2022::6 4 64812 12 12 0 00:10:22 Established 0 \u0026lt;AR2\u0026gt; dis bgp vpnv4 all peer （vpnv4 peer）\n\u0026lt;CR1\u0026gt;dis bgp vpnv4 all peer BGP local router ID : 1.1.1.5 Local AS number : 64812 Total number of peers : 4 Peers in established state : 4 Peer V AS MsgRcvd MsgSent OutQ Up/Down State PrefRcv 1.1.1.1 4 64812 21 23 0 00:19:24 Established 0 1.1.1.2 4 64812 19 21 0 00:17:19 Established 0 1.1.1.3 4 64812 19 21 0 00:17:52 Established 0 1.1.1.4 4 64812 18 20 0 00:16:52 Established 0 \u0026lt;CR1\u0026gt; dis bgp routing-table\n\u0026lt;AR4\u0026gt;dis bgp routing-table BGP Local router ID is 1.1.1.4 Status codes: * - valid, \u0026gt; - best, d - damped, h - history, i - internal, s - suppressed, S - Stale Origin : i - IGP, e - EGP, ? - incomplete Total Number of Routes: 2 Network NextHop MED LocPrf PrefVal Path/Ogn *\u0026gt;i 100.1.100.0/30 1.1.1.5 0 100 2000 i * i 1.1.1.5 0 100 1000 i \u0026lt;AR4\u0026gt; dis bgp routing-table 100.1.100.0\n\u0026lt;AR4\u0026gt;dis bgp routing-table 100.1.100.0 BGP local router ID : 1.1.1.4 Local AS number : 64812 Paths: 2 available, 1 best, 1 select BGP routing table entry information of 100.1.100.0/30: From: 1.1.1.6 (1.1.1.6) Route Duration: 00h03m40s Relay IP Nexthop: 10.3.4.1 Relay IP Out-Interface: GigabitEthernet0/0/0 Original nexthop: 1.1.1.5 Qos information : 0x0 AS-path Nil, origin igp, MED 0, localpref 100, pref-val 2000, valid, internal, best, select, active, pre 255, IGP cost 300 Originator: 1.1.1.5 Cluster list: 56.56.56.56 Not advertised to any peer yet BGP routing table entry information of 100.1.100.0/30: From: 1.1.1.5 (1.1.1.5) Route Duration: 00h03m40s Relay IP Nexthop: 10.3.4.1 Relay IP Out-Interface: GigabitEthernet0/0/0 Original nexthop: 1.1.1.5 Qos information : 0x0 AS-path Nil, origin igp, MED 0, localpref 100, pref-val 1000, valid, internal, pre 255, IGP cost 300, not preferred for PreVal Not advertised to any peer yet \u0026lt;AR4\u0026gt; 4.3 Task 3: Data Center Internet Service Deployment 4.3.1 Connecting the Web Server to the Network 配置LSW1,LSW2的eth-trunk 12，静态lacp，src-mac 负载均衡\n创建vrf intvpn，不传vpnv4用不到RD和RT\nvlan200,下配置vrrp，vrid 2，virtual-ip 192.168.200.1/24，LSW2为master，优先级120，抢占延迟20s，track接口G0/0/2状态，失效优先级减21成为backup\n配置nqa探测，LSW1-CR1,LSW2-CR2，类型icmp，5s间隔周期探测时间，\n配置出向静态路由，backup路由优先级90，看示意图，LSW1-CR1，LSW2-CR2 的默认路由track nqa，配置默认路由备份路由指向 LSW1 LSW2\n配置入向静态路由，看示意图\nFW1配置安全策略，看示意图\nFW1配置NAT映射，策略包含80端口，放行icmp\nLSW1和LSW2之间的备份路由在出口全部宕机的情况下的环路处理\nBGP network （web服务器公网映射网段路由）\nLSW1\n# interface GigabitEthernet0/0/4 undo eth-trunk # interface GigabitEthernet0/0/5 undo eth-trunk # interface Eth-Trunk12 mode lacp-static load-balance src-mac # interface GigabitEthernet0/0/4 eth-trunk 12 # interface GigabitEthernet0/0/5 eth-trunk 12 # ip vpn-instance intvpn ipv4-family # interface Vlanif200 description VPN-intvpn ip binding vpn-instance intvpn ip address 192.168.200.8 255.255.255.0 vrrp vrid 2 virtual-ip 192.168.200.1 vrrp vrid 2 preempt-mode timer delay 20 # interface Vlanif30 description VPN-intvpn ip binding vpn-instance intvpn ip address 192.168.3.1 255.255.255.252 # nqa test-instance toCR toCR test-type icmp destination-address ipv4 10.5.8.2 frequency 5 interval seconds 1 timeout 1 probe-count 2 start now # ip route-static 0.0.0.0 0.0.0.0 10.5.8.2 track nqa toCR toCR ip route-static 0.0.0.0 0.0.0.0 192.168.9.2 preference 90 ip route-static 100.1.200.0 255.255.255.0 100.1.4.2 ip route-static vpn-instance intvpn 0.0.0.0 0.0.0.0 192.168.3.2 # # bgp 62022 # ipv4-family unicast network 100.1.200.0 24 # # 阻止LSW1-LSW2备份路由形成的环路 nqa test-instance PREVENT_LOOP PREVENT_LOOP test-type icmp destination-address ipv4 10.6.9.1 frequency 5 interval seconds 1 timeout 1 probe-count 2 start now # ip route-static 10.6.9.1 255.255.255.255 192.168.9.2 ip route-static 0.0.0.0 0.0.0.0 192.168.9.2 preference 90 track nqa PREVENT_LOOP PREVENT_LOOP # LSW2\n# interface GigabitEthernet0/0/4 undo eth-trunk # interface GigabitEthernet0/0/5 undo eth-trunk # interface Eth-Trunk12 port link-type trunk port trunk allow-pass vlan 90 100 200 mode lacp-static load-balance src-mac # interface GigabitEthernet0/0/4 eth-trunk 12 # interface GigabitEthernet0/0/5 eth-trunk 12 # ip vpn-instance intvpn ipv4-family # interface Vlanif200 description VPN-intvpn ip binding vpn-instance intvpn ip address 192.168.200.9 255.255.255.0 vrrp vrid 2 virtual-ip 192.168.200.1 vrrp vrid 2 priority 120 vrrp vrid 2 preempt-mode timer delay 20 vrrp vrid 2 track interface GigabitEthernet0/0/2 reduced 21 # interface Vlanif30 description VPN-intvpn ip binding vpn-instance intvpn ip address 192.168.30.1 255.255.255.252 # nqa test-instance toCR toCR test-type icmp destination-address ipv4 10.6.9.2 frequency 5 interval seconds 1 timeout 1 probe-count 2 start now # ip route-static 0.0.0.0 0.0.0.0 10.6.9.2 track nqa toCR toCR ip route-static 0.0.0.0 0.0.0.0 192.168.9.1 preference 90 ip route-static 100.1.200.0 255.255.255.0 100.1.40.2 ip route-static vpn-instance intvpn 0.0.0.0 0.0.0.0 192.168.30.2 # # bgp 62022 # ipv4-family unicast network 100.1.200.0 24 # # 阻止LSW1-LSW2备份路由形成的环路 nqa test-instance PREVENT_LOOP PREVENT_LOOP test-type icmp destination-address ipv4 10.5.8.1 frequency 5 interval seconds 1 timeout 1 probe-count 2 start now # ip route-static 10.5.8.1 255.255.255.255 192.168.9.1 ip route-static 0.0.0.0 0.0.0.0 192.168.9.1 preference 90 track nqa PREVENT_LOOP PREVENT_LOOP # FW1\n# ip route-static 0.0.0.0 0.0.0.0 100.1.40.1 ip route-static 0.0.0.0 0.0.0.0 100.1.4.1 preference 90 ip route-static 192.168.200.0 255.255.255.0 192.168.30.1 ip route-static 192.168.200.0 255.255.255.0 192.168.3.1 preference 90 # firewall zone untrust add interface GigabitEthernet1/0/1.40 add interface GigabitEthernet1/0/2.40 # firewall zone dmz add interface GigabitEthernet1/0/1.30 add interface GigabitEthernet1/0/2.30 # security-policy rule name untrust2dmz source-zone untrust destination-zone dmz destination-address 192.168.200.0 mask 255.255.255.0 action permit # nat server web_server protocol tcp global 100.1.200.254 www inside 192.168.200.254 www nat server icmp_server protocol icmp global 100.1.200.254 inside 192.168.200.254 # AR4\n# bgp 64812 # ipv4-family unicast network 200.1.200.0 24 # PC4 ping测试和Http Client 测试\n4.3.2 Connecting the Simulated IPv6 Servers to the Network LSW1和LSW2创建loopback1，配置IPv6地址 配置ospfv3，进程号200，vlanif90 建立邻居，改网络类型不选DR BGP 仅 import 两loopback1 IPv6地址，挂上route-map ，prefix配置 配置路由聚合，112掩码 LSW1\n# ospfv3 200 router-id 1.1.1.8 interface LoopBack1 ipv6 enable ipv6 address 2001:100:1:200::8/128 ospfv3 200 area 0.0.0.0 # interface Vlanif90 ospfv3 200 area 0.0.0.0 ospfv3 network-type p2p # ip ipv6-prefix V6_SERVER permit 2001:100:1:200::8 128 ip ipv6-prefix V6_SERVER permit 2001:100:1:200::9 128 # route-policy V6_SERVER permit node 10 if-match ipv6 address prefix-list V6_SERVER # bgp 62022 ipv6-family unicast aggregate 2001:100:1:200:: 112 detail-suppressed import-route ospfv3 200 route-policy V6_SERVER LSW2\n# ospfv3 200 router-id 1.1.1.9 # interface LoopBack1 ipv6 enable ipv6 address 2001:100:1:200::9/128 ospfv3 200 area 0.0.0.0 # interface Vlanif90 ospfv3 200 area 0.0.0.0 ospfv3 network-type p2p # ip ipv6-prefix V6_SERVER permit 2001:100:1:200::8 128 ip ipv6-prefix V6_SERVER permit 2001:100:1:200::9 128 # route-policy V6_SERVER permit node 10 if-match ipv6 address prefix-list V6_SERVER # bgp 62022 ipv6-family unicast aggregate 2001:100:1:200:: 112 detail-suppressed import-route ospfv3 200 route-policy V6_SERVER AR4\nbgp 64812 ipv6-family unicast network 2001:200:1:200:: 64 PC4 配置IPv6地址-2001:200:1:200::254/64； IPv6网关-2001:200:1:200::1\nPC4 ping测试\n4.3.3 Configuring Security Protection on the Firewall 拉黑200.1.200.200地址 FW1\n[FW1]firewall blacklist enable [FW1]firewall blacklist item source-ip 200.1.200.200 4.4 Task 4: Enterprise HQ Network Deployment 4.4.1 Configuring a Layer 2 Network 端口安全，动态安全地址，mac 抖动，最大mac地址2，aging time 1200m 端口学习mac地址的优先级 LSW3\n# interface GigabitEthernet0/0/2 mac-learning priority 3 # interface GigabitEthernet0/0/4 port-security enable port-security protect-action shutdown port-security max-mac-num 2 port-security mac-address sticky port-security aging-time 1200 # LSW4\n# interface GigabitEthernet0/0/2 mac-learning priority 3 # interface GigabitEthernet0/0/3 port-security enable port-security protect-action shutdown port-security max-mac-num 2 port-security mac-address sticky port-security aging-time 1200 # 4.4.2 Configuring Basic Services on the Firewall 配置安全策略，HQ 172.16.100.0/24和Branch172.17.100.0/24上互联网（NAT need） 配置安全策略，HQ 172.16.101.0/24 访问OA 192.168.100.0/24（FW1上做了映射公网） 配置ip-link ,FW2-AR1, FW2-AR2，搭配后续的出向默认路由使用 出向静态路由 入向静态路由，AR1和AR2 （200.1.100.0/24）指向 FW2；FW2配置特定主备路由指向LSW3 LSW4 配置NAT，接入互联网，最终ping通WEB服务器和Video服务器需要这个，转换地址池200.1.100.2 - 200.1.100.10 FW2\n# firewall zone trust add interface GigabitEthernet1/0/3.30 add interface GigabitEthernet1/0/4.40 # firewall zone untrust add interface GigabitEthernet1/0/3.60 add interface GigabitEthernet1/0/4.70 # ip-link check enable ip-link name toar1 destination 200.1.6.1 interface GigabitEthernet1/0/3.60 mode arp ip-link name toar2 destination 200.1.7.1 interface GigabitEthernet1/0/4.70 mode arp # security-policy rule name trust2untrust01 source-zone trust destination-zone untrust source-address 172.16.100.0 mask 255.255.255.0 source-address 172.17.100.0 mask 255.255.255.0 action permit rule name trust2untrust02 source-zone trust destination-zone untrust source-address 172.16.101.0 mask 255.255.255.0 destination-address 192.168.100.0 mask 255.255.255.0 action permit # ip route-static 0.0.0.0 0.0.0.0 200.1.6.1 track ip-link toar1 ip route-static 0.0.0.0 0.0.0.0 200.1.7.1 track ip-link toar2 ip route-static 172.16.100.0 255.255.255.0 172.16.3.1 ip route-static 172.16.100.0 255.255.255.0 172.16.4.1 preference 90 ip route-static 172.16.101.0 255.255.255.0 172.16.4.1 ip route-static 172.16.101.0 255.255.255.0 172.16.3.1 preference 90 ip route-static 172.17.100.0 255.255.255.0 172.16.3.1 ip route-static 172.17.100.0 255.255.255.0 172.16.4.1 # nat address-group addressgroup1 0 mode pat section 0 200.1.100.2 200.1.100.10 # nat-policy rule name policy_nat1 source-zone trust destination-zone untrust source-address 172.16.100.0 mask 255.255.255.0 source-address 172.17.100.0 mask 255.255.255.0 destination-address 100.1.0.0 mask 255.255.0.0 action source-nat address-group addressgroup1 # LSW3\n# ip route-static 0.0.0.0 0.0.0.0 172.16.3.2 # LSW4\n# ip route-static 0.0.0.0 0.0.0.0 172.16.4.2 # AR1\n# ip route-static 200.1.100.0 255.255.255.0 200.1.6.2 # bgp 64812 # ipv4-family unicast import-route static # AR2\n# ip route-static 200.1.100.0 255.255.255.0 200.1.7.2 # bgp 64812 # ipv4-family unicast import-route static # 验证\n4.4.3 Configuring URL Filtering on the Firewall url-filter profile的配置，去网页点点看\n# profile type url-filter name url_profile_deny add blacklist url www.example1.com add blacklist url www.example2.com category pre-defined control-level medium https-filter enable # 4.4.4 Configuring the IPS Function on the Firewall ips profile的配置，去网页点点看\n# profile type ips name Profile_ips_pc collect-attack-evidence enable # 依赖硬盘，ensp不起作用 signature-set name filter_web target client severity high protocol HTTP # security-policy rule name trust2untrust01 profile ips Profile_ips_pc # 4.4.5 Configuring Traffic Management on the Firewall 配置流量管理，去网页点点看\n# time-range work_time period-range 09:00:00 to 18:00:00 working-day # traffic-policy profile profile_p2p bandwidth maximum-bandwidth whole both 50000 bandwidth connection-limit whole both 2000 profile profile_email bandwidth guaranteed-bandwidth whole both 100000 bandwidth priority 7 rule name policy_p2p source-zone trust destination-zone untrust source-address address-set 172.16.100.0\u0026amp;172.17.100.0 application app BT application app YouKu action qos profile profile_p2p rule name policy_email source-zone trust destination-zone untrust source-address 172.16.100.0 mask 255.255.255.0 source-address 172.17.100.0 mask 255.255.255.0 application app LotusNotes application app OWA application category Business_Systems sub-category Email action qos profile profile_email # 4.5 Task 5: Enterprise Branch Network Deployment 4.5.1 Configuring DHCP LSW5配置DHCP，此DHCP Server后续的无线sta获取地址也需要用到 DHCP参数，vlanif100接口，dns 8.8.8.8，lease 2d LSW6，配置DHCP snooping，上联dhcp server接口trusted 可能的bug（PC3和STA1获取不到IP地址，在LSW5去掉DHCP配置再重新刷入配置解决） LSW5\n# dhcp enable # interface Vlanif100 dhcp select interface dhcp server lease day 2 dhcp server dns-list 8.8.8.8 # LSW6\n# dhcp enable # dhcp snooping enable arp dhcp-snooping-detect enable # interface Ethernet0/0/1 dhcp snooping check dhcp-rate enable dhcp snooping check dhcp-rate 80 # interface GigabitEthernet0/0/1 port trunk pvid vlan 200 dhcp snooping check dhcp-rate enable dhcp snooping check dhcp-rate 80 # interface GigabitEthernet0/0/2 dhcp snooping enable dhcp snooping trusted # 4.5.2 Configuring a WLAN 配置旁挂二层直接转发+ vrrp热备冗余+hsb状态同步 黑名单拉黑sta2接入 动态拉黑攻击者mac 流量模板限速 ensp要是支持配置同步功能就厉害了 AC1\n# dhcp enable # 下面这行说dhcp信息可以从文件恢复，很重要么这点信息？ # dhcp server database enable # interface Vlanif200 ip address 172.17.200.2 255.255.255.0 vrrp vrid 1 virtual-ip 172.17.200.1 admin-vrrp vrid 1 vrrp vrid 1 priority 200 dhcp select interface dhcp server excluded-ip-address 172.17.200.1 172.17.200.3 # capwap source ip-address 172.17.200.1 # wlan # 流量模板 traffic-profile name wlan-traffic rate-limit client up 5000 rate-limit vap up 100000 rate-limit client down 10000 rate-limit vap down 500000 # 安全模板 security-profile name wlan-security security wpa-wpa2 psk pass-phrase Huawei@123 aes # 黑名单拉黑sta2 sta-blacklist-profile name sta-blacklist sta-mac 5489-988a-0449 # 空白的白名单 sta-whitelist-profile name sta-whitelist # SSID模板 ssid-profile name wlan-ssid ssid ICT2022 # VAP模板 vap-profile name wlan-vap service-vlan vlan-id 100 sta-access-mode whitelist sta-whitelist ssid-profile wlan-ssid security-profile wlan-security traffic-profile wlan-traffic # WIDS模板 wids-profile name wlan-wids brute-force-detect interval 80 brute-force-detect threshold 5 brute-force-detect quiet-time 800 dynamic-blacklist enable # AP系统模板 ap-system-profile name wlan-system dynamic-blacklist aging-time 300 sta-access-mode blacklist sta-blacklist # AP组 ap-group name ap-group ap-system-profile wlan-system wids-profile wlan-wids radio 0 vap-profile wlan-vap wlan 1 ap-id 0 type-id 61 ap-mac 00e0-fcf8-2fb0 ap-sn 2102354483106349735D ap-name AP1 ap-group ap-group # hsb-service 0 service-ip-port local-ip 172.17.200.2 peer-ip 172.17.200.3 local-data-port 10241 peer-data-port 10241 # hsb-group 0 track vrrp vrid 1 interface Vlanif200 bind-service 0 hsb enable # 配置完成其他配置再启用查看状态 # hsb-service-type access-user hsb-group 0 # hsb-service-type dhcp hsb-group 0 # hsb-service-type ap hsb-group 0 # AC2 ，修改参数即可，wlan配置与AC 1 一致，粘贴注意有时需要输入 Y 确认\n# dhcp enable # interface Vlanif200 ip address 172.17.200.3 255.255.255.0 vrrp vrid 1 virtual-ip 172.17.200.1 admin-vrrp vrid 1 dhcp select interface dhcp server excluded-ip-address 172.17.200.1 172.17.200.3 # capwap source ip-address 172.17.200.1 # wlan # 流量模板 traffic-profile name wlan-traffic rate-limit client up 5000 rate-limit vap up 100000 rate-limit client down 10000 rate-limit vap down 500000 # 安全模板 security-profile name wlan-security security wpa-wpa2 psk pass-phrase Huawei@123 aes # 黑名单拉黑sta2 sta-blacklist-profile name sta-blacklist sta-mac 5489-988a-0449 # 空白的白名单 sta-whitelist-profile name sta-whitelist # SSID模板 ssid-profile name wlan-ssid ssid ICT2022 # VAP模板 vap-profile name wlan-vap service-vlan vlan-id 100 sta-access-mode whitelist sta-whitelist ssid-profile wlan-ssid security-profile wlan-security traffic-profile wlan-traffic # WIDS模板 wids-profile name wlan-wids brute-force-detect interval 80 brute-force-detect threshold 5 brute-force-detect quiet-time 800 dynamic-blacklist enable # AP系统模板 ap-system-profile name wlan-system dynamic-blacklist aging-time 300 sta-access-mode blacklist sta-blacklist # AP组 ap-group name ap-group ap-system-profile wlan-system wids-profile wlan-wids radio 0 vap-profile wlan-vap wlan 1 ap-id 0 type-id 61 ap-mac 00e0-fcf8-2fb0 ap-sn 2102354483106349735D ap-name AP1 ap-group ap-group # hsb-service 0 service-ip-port local-ip 172.17.200.3 peer-ip 172.17.200.2 local-data-port 10241 peer-data-port 10241 # hsb-group 0 track vrrp vrid 1 interface Vlanif200 bind-service 0 hsb enable # hsb-service-type access-user hsb-group 0 # hsb-service-type dhcp hsb-group 0 # hsb-service-type ap hsb-group 0 # 校验\ndis vrrp\n[AC1]dis vrrp Vlanif200 | Virtual Router 1 State : Master Virtual IP : 172.17.200.1 Master IP : 172.17.200.2 PriorityRun : 222 PriorityConfig : 222 MasterPriority : 222 Preempt : YES Delay Time : 0 s TimerRun : 1 s TimerConfig : 1 s Auth type : NONE Virtual MAC : 0000-5e00-0101 Check TTL : YES Config type : admin-vrrp Backup-forward : disabled Create time : 2024-07-16 21:14:14 UTC-05:13 Last change time : 2024-07-16 21:14:27 UTC-05:13 [AC1] [AC2]dis vrrp Vlanif200 | Virtual Router 1 State : Backup Virtual IP : 172.17.200.1 Master IP : 172.17.200.2 PriorityRun : 111 PriorityConfig : 111 MasterPriority : 222 Preempt : YES Delay Time : 0 s TimerRun : 1 s TimerConfig : 1 s Auth type : NONE Virtual MAC : 0000-5e00-0101 Check TTL : YES Config type : admin-vrrp Backup-forward : disabled Create time : 2024-07-16 20:19:15 UTC-05:13 Last change time : 2024-07-16 21:14:58 UTC-05:13 dis hsb-group 0\n[AC1]dis hsb-group 0 Hot Standby Group Information: ---------------------------------------------------------- HSB-group ID : 0 Vrrp Group ID : 1 Vrrp Interface : Vlanif200 Service Index : 0 Group Vrrp Status : Master Group Status : Active Group Backup Process : Realtime Peer Group Device Name : AC6005 Peer Group Software Version : V200R007C10SPC300B220 Group Backup Modules : Access-user DHCP AP ---------------------------------------------------------- [AC1] [AC2]dis hsb-group 0 Hot Standby Group Information: ---------------------------------------------------------- HSB-group ID : 0 Vrrp Group ID : 1 Vrrp Interface : Vlanif200 Service Index : 0 Group Vrrp Status : Backup Group Status : Inactive Group Backup Process : Realtime Peer Group Device Name : AC6005 Peer Group Software Version : V200R007C10SPC300B220 Group Backup Modules : Access-user DHCP AP ---------------------------------------------------------- [AC2] dis hsb-service 0\n[AC1]dis hsb-service 0 Hot Standby Service Information: ---------------------------------------------------------- Local IP Address : 172.17.200.2 Peer IP Address : 172.17.200.3 Source Port : 10241 Destination Port : 10241 Keep Alive Times : 5 Keep Alive Interval : 3 Service State : Connected Service Batch Modules : ---------------------------------------------------------- [AC1] [AC2]dis hsb-service 0 Hot Standby Service Information: ---------------------------------------------------------- Local IP Address : 172.17.200.3 Peer IP Address : 172.17.200.2 Source Port : 10241 Destination Port : 10241 Keep Alive Times : 5 Keep Alive Interval : 3 Service State : Connected Service Batch Modules : ---------------------------------------------------------- [AC2] dis ap all\n[AC1]dis ap all Info: This operation may take a few seconds. Please wait for a moment.done. Total AP information: nor : normal [1] --------------------------------------------------------------------------------------------- ID MAC Name Group IP Type State STA Uptime --------------------------------------------------------------------------------------------- 0 00e0-fcf8-2fb0 AP1 ap-group 172.17.200.132 AP4050DN-E nor 1 22M:17S --------------------------------------------------------------------------------------------- Total: 1 [AC1] [AC2]dis ap all Info: This operation may take a few seconds. Please wait for a moment.done. Total AP information: stdby: standby [1] -------------------------------------------------------------------------------------------- ID MAC Name Group IP Type State STA Uptime -------------------------------------------------------------------------------------------- 0 00e0-fcf8-2fb0 AP1 ap-group 172.17.200.132 AP4050DN-E stdby 0 - -------------------------------------------------------------------------------------------- Total: 1 [AC2] dis station all\n[AC1]dis station all Rf/WLAN: Radio ID/WLAN ID Rx/Tx: link receive rate/link transmit rate(Mbps) ----------------------------------------------------------------------------------------------------- STA MAC AP ID Ap name Rf/WLAN Band Type Rx/Tx RSSI VLAN IP address SSID ----------------------------------------------------------------------------------------------------- 5489-9811-592c 0 AP1 0/1 2.4G - -/- - 100 172.17.100.254 ICT2022 ----------------------------------------------------------------------------------------------------- Total: 1 2.4G: 1 5G: 0 [AC1] [AC2]dis station all Rf/WLAN: Radio ID/WLAN ID Rx/Tx: link receive rate/link transmit rate(Mbps) -------------------------------------------------------------------------------------------------- STA MAC AP ID Ap name Rf/WLAN Band Type Rx/Tx RSSI VLAN IP address SSID -------------------------------------------------------------------------------------------------- -------------------------------------------------------------------------------------------------- Total: 0 2.4G: 0 5G: 0 [AC2] dis station online-fail-record all\n[AC1]dis station online-fail-record all Rf/WLAN: Radio ID/WLAN ID ------------------------------------------------------------------------------ STA MAC AP ID Ap name Rf/WLAN Last record time Reason ------------------------------------------------------------------------------ 5489-988a-0449 0 AP1 0/1 2024-07-19/10:35:02 The STA is in the global blacklist. ------------------------------------------------------------------------------ Total stations: 1 Total records: 1 [AC1] 4.6 Task 6: Service Deployment for Communication Between the Enterprise HQ and Branch 4.6.1 Configuring an MPLSVPN 配置ldp，loopback0接口地址为lsr-id， AR1/AR2/AR3/AR4，配置vrf entvpn，需要配置RD，RT AR1/AR2/LSW3/LSW4配置ospf，进程号100，area0，LSW3/LSW4下发默认路由，面向PC的vlanif接口配置passive被动接口 LSW5/AR3/AR4/配置EBGP，AS62012，branch使用network起源宣告网段 vpnv4的反射器，AR1/AR2重分布默认路由进BGP vpn地址族 配置AS-PATH添加，route-map，对收到的路由进行选路干预 LSW5收到的默认路由负载均衡，最大优选路径设置2 当HQ两条出口链路中断，LSW3/LSW4的去往branch 172.17.100.0/24的不走FW2的默认路由 ，track默认路由检测互联AR1/AR2的链路 AR路由器的故障快速切换，在VPN路由收敛前切换 AR1\n# mpls lsr-id 1.1.1.1 mpls # mpls ldp # interface GigabitEthernet0/0/0 mpls mpls ldp # interface GigabitEthernet0/0/1 mpls mpls ldp # ip vpn-instance entvpn ipv4-family route-distinguisher 64812:1 vpn frr route-policy VPN-FRR vpn-target 64812:345 both # interface GigabitEthernet0/0/2.10 ip binding vpn-instance entvpn ip address 172.16.1.1 255.255.255.252 # ospf 100 router-id 1.1.1.1 vpn-instance entvpn import-route bgp area 0.0.0.0 network 172.16.1.1 0.0.0.0 # bgp 64812 # ipv4-family vpn-instance entvpn default-route imported import-route ospf 100 # route-policy VPN-FRR permit node 10 apply backup-nexthop auto # AR2\n# mpls lsr-id 1.1.1.2 mpls # mpls ldp # interface GigabitEthernet0/0/0 mpls mpls ldp # interface GigabitEthernet0/0/1 mpls mpls ldp # # ip vpn-instance entvpn ipv4-family route-distinguisher 64812:1 vpn frr route-policy VPN-FRR vpn-target 64812:345 both # interface GigabitEthernet0/0/2.20 ip binding vpn-instance entvpn ip address 172.16.2.1 255.255.255.252 # ospf 100 router-id 1.1.1.2 vpn-instance entvpn import-route bgp area 0.0.0.0 network 172.16.2.1 0.0.0.0 # bgp 64812 # ipv4-family vpn-instance entvpn default-route imported import-route ospf 100 # route-policy VPN-FRR permit node 10 apply backup-nexthop auto # AR3\n# mpls lsr-id 1.1.1.3 mpls # mpls ldp # interface GigabitEthernet0/0/0 mpls mpls ldp # interface GigabitEthernet0/0/2 pim sm mpls mpls ldp # # ip vpn-instance entvpn ipv4-family route-distinguisher 64812:1 vpn frr route-policy VPN-FRR vpn-target 64812:345 both # interface GigabitEthernet0/0/1.10 ip binding vpn-instance entvpn ip address 172.17.1.1 255.255.255.252 # bgp 64812 # ipv4-family vpn-instance entvpn peer 172.17.1.2 as-number 62012 # route-policy VPN-FRR permit node 10 apply backup-nexthop auto # AR4\n# mpls lsr-id 1.1.1.4 mpls # mpls ldp # interface GigabitEthernet0/0/0 mpls mpls ldp # interface GigabitEthernet0/0/2 pim sm mpls mpls ldp # # ip vpn-instance entvpn ipv4-family route-distinguisher 64812:1 vpn frr route-policy VPN-FRR vpn-target 64812:345 both # interface GigabitEthernet3/0/0.20 ip binding vpn-instance entvpn ip address 172.17.2.1 255.255.255.252 # bgp 64812 # ipv4-family vpn-instance entvpn peer 172.17.2.2 as-number 62012 # route-policy VPN-FRR permit node 10 apply backup-nexthop auto # CR1\n# mpls lsr-id 1.1.1.5 mpls # mpls ldp # interface GigabitEthernet0/0/0 mpls mpls ldp # interface GigabitEthernet0/0/1 mpls mpls ldp # interface GigabitEthernet0/0/2 mpls mpls ldp # CR2\n# mpls lsr-id 1.1.1.6 mpls # mpls ldp # interface GigabitEthernet0/0/0 mpls mpls ldp # interface GigabitEthernet0/0/1 mpls mpls ldp # interface GigabitEthernet0/0/2 mpls mpls ldp # LSW3\n# ospf 100 default-route-advertise silent-interface Vlanif100 area 0.0.0.0 network 172.16.1.2 0.0.0.0 network 172.16.5.1 0.0.0.0 network 172.16.100.1 0.0.0.0 # nqa test-instance toAR1 toAR1 test-type icmp destination-address ipv4 172.16.1.1 frequency 5 interval seconds 1 timeout 1 probe-count 2 start now # ip route-static 0.0.0.0 0.0.0.0 172.16.3.2 track nqa toAR1 toAR1 LSW4\n# ospf 100 default-route-advertise silent-interface Vlanif101 area 0.0.0.0 network 172.16.2.2 0.0.0.0 network 172.16.5.2 0.0.0.0 network 172.16.101.1 0.0.0.0 # nqa test-instance toAR2 toAR2 test-type icmp destination-address ipv4 172.16.2.1 frequency 5 interval seconds 1 timeout 1 probe-count 2 start now # ip route-static 0.0.0.0 0.0.0.0 172.16.4.2 track nqa toAR2 toAR2 LSW5\n# bgp 62012 peer 172.17.1.1 as-number 64812 peer 172.17.2.1 as-number 64812 # ipv4-family unicast network 172.17.100.0 255.255.255.0 maximum load-balancing 2 peer 172.17.1.1 route-policy AS_PATH_ODD import peer 172.17.2.1 route-policy AS_PATH_EVEN import # # route-policy AS_PATH_EVEN permit node 10 if-match acl 2010 apply as-path 100 additive # route-policy AS_PATH_EVEN permit node 20 # route-policy AS_PATH_ODD permit node 10 if-match acl 2020 apply as-path 100 additive # route-policy AS_PATH_ODD permit node 20 # acl number 2010 rule 5 permit source 172.16.0.0 0.0.254.255 # acl number 2020 rule 5 permit source 172.16.1.0 0.0.254.255 # 验证\nPC3 172.17.100.0/24 去往HQ的流量路径\nPC3 172.17.100.0/24 访问internet\nAR3查看FRR\n[AR3]dis ip rou vpn-instance entvpn 172.16.100.0 v Route Flags: R - relay, D - download to fib ------------------------------------------------------------------------------ Routing Table : entvpn Summary Count : 1 Destination: 172.16.100.0/24 Protocol: IBGP Process ID: 0 Preference: 255 Cost: 3 NextHop: 1.1.1.1 Neighbour: 1.1.1.5 State: Active Adv Relied Age: 00h01m41s Tag: 0 Priority: low Label: 1054 QoSInfo: 0x0 IndirectID: 0x10 RelayNextHop: 10.3.5.1 Interface: GigabitEthernet0/0/2 TunnelID: 0x1 Flags: RD BkNextHop: 1.1.1.2 BkInterface: GigabitEthernet0/0/2 BkLabel: 1053 SecTunnelID: 0x0 BkPETunnelID: 0x3 BkPESecTunnelID: 0x0 BkIndirectID: 0x14 [AR3] 4.7 Task 7: Service Deployment for Communication Between the Enterprise and Data Center Servers 4.7.1 Configuring a Virtual System on the Firewall FW1配置vsys，服务OA server，鼠标点点也挺快\n# vsys enable resource-class ent_resource resource-item-limit session reserved-number 1000 maximum 5000 resource-item-limit bandwidth 8 outbound resource-item-limit policy reserved-number 200 resource-item-limit user reserved-number 100 resource-item-limit l2tp-tunnel reserved-number 10 resource-item-limit ipsec-tunnel reserved-number 10 # # 绑定vpn-instance，重新配置IP地址 vsys name entvsys assign interface LoopBack0 assign interface GigabitEthernet1/0/1.50 assign interface GigabitEthernet1/0/1.60 assign interface GigabitEthernet1/0/2.50 assign interface GigabitEthernet1/0/2.60 assign resource-class ent_resource # firewall zone trust add interface GigabitEthernet1/0/1.50 add interface GigabitEthernet1/0/2.50 # firewall zone untrust add interface GigabitEthernet1/0/1.60 add interface GigabitEthernet1/0/2.60 # 4.7.2 Connecting the OA Server to the Network LSW1/LSW2配置vrf entvpn，vlanif100 划入entvpn vrrp配置，virtual-ip 192.168.100.1/24，LSW1 master，优先级120，抢占延迟20s LSW1 track G0/0/1 接口，中断后优先级减21，LSW2抢占为master 配置出向路由，交换机默认路由指向FW1；FW1的vsys entvsys，配置出向的主备份路由 配置入向路由，交换机配置指向100.1.1.10/32 的静态路由指向FW1；FW1配置去往OA192.168.100.0/24的主备路由 LSW1\n# ip vpn-instance entvpn ipv4-family # interface Vlanif100 description VPN-entvpn ip binding vpn-instance entvpn ip address 192.168.100.8 255.255.255.0 vrrp vrid 1 virtual-ip 192.168.100.1 vrrp vrid 1 priority 120 vrrp vrid 1 preempt-mode timer delay 20 vrrp vrid 1 track interface GigabitEthernet0/0/1 reduced 21 # interface Vlanif50 description VPN-entvpn ip binding vpn-instance entvpn ip address 192.168.5.1 255.255.255.252 # ip route-static 100.1.1.10 255.255.255.255 100.1.6.2 ip route-static vpn-instance entvpn 0.0.0.0 0.0.0.0 192.168.5.2 # LSW2\n# ip vpn-instance entvpn ipv4-family # interface Vlanif100 description VPN-entvpn ip binding vpn-instance entvpn ip address 192.168.100.9 255.255.255.0 vrrp vrid 1 virtual-ip 192.168.100.1 vrrp vrid 1 preempt-mode timer delay 20 # interface Vlanif50 description VPN-entvpn ip binding vpn-instance entvpn ip address 192.168.50.1 255.255.255.252 # ip route-static 100.1.1.10 255.255.255.255 100.1.60.2 ip route-static vpn-instance entvpn 0.0.0.0 0.0.0.0 192.168.50.2 # FW1\n# switch vsys entvsys # ip route-static 0.0.0.0 0.0.0.0 100.1.6.1 ip route-static 0.0.0.0 0.0.0.0 100.1.60.1 preference 90 ip route-static 192.168.100.0 255.255.255.0 192.168.5.1 ip route-static 192.168.100.0 255.255.255.0 192.168.50.1 preference 90 4.7.3 Configuring IPsec Tunnels 配置172.16.100.0/24和172.17.100.0/24 走ipsec访问OA 192.168.100.0/24 使用IKE 协商模式 自动触发建立隧道 看图表设置参数 AR1\n# bgp 64812 # ipv4-family unicast network 200.1.6.0 255.255.255.252 AR2\n# bgp 64812 # ipv4-family unicast network 200.1.7.0 255.255.255.252 LSW1\n# bgp 62022 # ipv4-family unicast network 100.1.6.0 255.255.255.252 LSW2\n# bgp 62022 # ipv4-family unicast network 100.1.60.0 255.255.255.252 FW1\n# acl number 3000 rule 5 permit ip source 192.168.100.0 0.0.0.255 destination 172.16.100.0 0.0.0.255 rule 10 permit ip source 192.168.100.0 0.0.0.255 destination 172.17.100.0 0.0.0.255 # ipsec proposal ipsec_proposal esp authentication-algorithm sha2-256 esp encryption-algorithm aes-256 # ike proposal 10 encryption-algorithm aes-256 dh group14 authentication-algorithm sha2-256 authentication-method pre-share integrity-algorithm hmac-sha2-256 prf hmac-sha2-256 # ike peer fw0201 pre-shared-key Huawei@123 ike-proposal 10 remote-id-type any remote-address 200.1.6.2 ike peer fw0202 pre-shared-key Huawei@123 ike-proposal 10 remote-id-type any remote-address 200.1.7.2 # ipsec policy ipsec01 10 isakmp security acl 3000 ike-peer fw0201 proposal ipsec_proposal ipsec policy ipsec02 10 isakmp security acl 3000 ike-peer fw0202 proposal ipsec_proposal # undo policy enable # 策略禁用命令 # interface GigabitEthernet1/0/1.60 ipsec policy ipsec01 # interface GigabitEthernet1/0/2.60 ipsec policy ipsec02 # security-policy rule name ipsec_in_sp source-zone untrust destination-zone local source-address 200.1.6.0 mask 255.255.255.0 source-address 200.1.7.0 mask 255.255.255.0 action permit rule name ipsec_out_sp source-zone local destination-zone untrust destination-address 200.1.6.2 mask 255.255.255.255 destination-address 200.1.7.2 mask 255.255.255.255 action permit rule name trust2untrust source-zone trust destination-zone untrust source-address 192.168.100.0 mask 255.255.255.0 destination-address 172.16.100.0 mask 255.255.255.0 destination-address 172.17.100.0 mask 255.255.255.0 action permit rule name untrust2trust source-zone untrust destination-zone trust source-address 172.16.100.0 mask 255.255.255.0 source-address 172.17.100.0 mask 255.255.255.0 destination-address 192.168.100.0 mask 255.255.255.0 action permit # FW2\n# acl number 3000 rule 5 permit ip source 172.16.100.0 0.0.0.255 destination 192.168.100.0 0.0.0.255 rule 10 permit ip source 172.17.100.0 0.0.0.255 destination 192.168.100.0 0.0.0.255 # ipsec proposal ipsec_proposal # 使用默认值，不用敲以下2行命令 esp authentication-algorithm sha2-256 esp encryption-algorithm aes-256 # ike proposal 10 # 使用默认值，不用敲以下6行命令 encryption-algorithm aes-256 dh group14 authentication-algorithm sha2-256 authentication-method pre-share integrity-algorithm hmac-sha2-256 prf hmac-sha2-256 # ike peer fw0101 pre-shared-key Huawei@123 ike-proposal 10 remote-id-type any remote-address 100.1.6.2 ike peer fw0102 pre-shared-key Huawei@123 ike-proposal 10 remote-id-type any remote-address 100.1.60.2 # ipsec policy ipsec01 10 isakmp security acl 3000 ike-peer fw0101 proposal ipsec_proposal ipsec policy ipsec02 10 isakmp security acl 3000 ike-peer fw0102 proposal ipsec_proposal # interface GigabitEthernet1/0/3.60 ipsec policy ipsec01 # interface GigabitEthernet1/0/4.70 ipsec policy ipsec02 # security-policy rule name trust2untrust01 source-zone trust destination-zone untrust source-address 172.16.100.0 mask 255.255.255.0 source-address 172.17.100.0 mask 255.255.255.0 profile ips Profile_ips_pc action permit rule name trust2untrust02 source-zone trust destination-zone untrust source-address 172.16.101.0 mask 255.255.255.0 destination-address 192.168.100.0 mask 255.255.255.0 action permit rule name ipsec_out_sp source-zone local destination-zone untrust destination-address 100.1.6.2 mask 255.255.255.255 destination-address 100.1.60.2 mask 255.255.255.255 action permit rule name ipsec_in_sp source-zone untrust destination-zone local source-address 100.1.6.2 mask 255.255.255.255 source-address 100.1.60.2 mask 255.255.255.255 action permit rule name untrust2trust source-zone untrust destination-zone trust source-address 192.168.100.0 mask 255.255.255.0 destination-address 172.16.100.0 mask 255.255.255.0 destination-address 172.17.100.0 mask 255.255.255.0 action permit # 校验\ndis ipsec sa\n[FW1-entvsys]dis ipsec sa 2024-07-17 09:00:34.530 ipsec sa information: =============================== Interface: GigabitEthernet1/0/1.60 =============================== ----------------------------- IPSec policy name: \u0026#34;ipsec01\u0026#34; Sequence number : 10 Acl group : 3000 Acl rule : 5 Mode : ISAKMP ----------------------------- Connection ID : 7 Encapsulation mode: Tunnel Holding time : 0d 1h 12m 55s Tunnel local : 100.1.6.2:500 Tunnel remote : 200.1.6.2:500 Flow source : 192.168.100.0/255.255.255.0 0/0-65535 Flow destination : 172.16.100.0/255.255.255.0 0/0-65535 [Outbound ESP SAs] SPI: 199477355 (0xbe3c86b) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485721/2324 Max sent sequence-number: 665 UDP encapsulation used for NAT traversal: N SA encrypted packets (number/bytes): 664/39936 [Inbound ESP SAs] SPI: 187864131 (0xb329443) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485760/2324 Max received sequence-number: 1 UDP encapsulation used for NAT traversal: N SA decrypted packets (number/bytes): 0/0 Anti-replay : Enable Anti-replay window size: 1024 ----------------------------- IPSec policy name: \u0026#34;ipsec01\u0026#34; Sequence number : 10 Acl group : 3000 Acl rule : 10 Mode : ISAKMP ----------------------------- Connection ID : 6 Encapsulation mode: Tunnel Holding time : 0d 0h 39m 25s Tunnel local : 100.1.6.2:500 Tunnel remote : 200.1.6.2:500 Flow source : 192.168.100.0/255.255.255.0 0/0-65535 Flow destination : 172.17.100.0/255.255.255.0 0/0-65535 [Outbound ESP SAs] SPI: 192541812 (0xb79f474) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485722/1237 Max sent sequence-number: 666 UDP encapsulation used for NAT traversal: N SA encrypted packets (number/bytes): 665/39900 [Inbound ESP SAs] SPI: 186945386 (0xb248f6a) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485754/1237 Max received sequence-number: 64 UDP encapsulation used for NAT traversal: N SA decrypted packets (number/bytes): 106/6360 Anti-replay : Enable Anti-replay window size: 1024 =============================== Interface: GigabitEthernet1/0/2.60 =============================== ----------------------------- IPSec policy name: \u0026#34;ipsec02\u0026#34; Sequence number : 10 Acl group : 3000 Acl rule : 5 Mode : ISAKMP ----------------------------- Connection ID : 8 Encapsulation mode: Tunnel Holding time : 0d 0h 53m 39s Tunnel local : 100.1.60.2:500 Tunnel remote : 200.1.7.2:500 Flow source : 192.168.100.0/255.255.255.0 0/0-65535 Flow destination : 172.16.100.0/255.255.255.0 0/0-65535 [Outbound ESP SAs] SPI: 195126685 (0xba1659d) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485760/3407 Max sent sequence-number: 1 UDP encapsulation used for NAT traversal: N SA encrypted packets (number/bytes): 0/0 [Inbound ESP SAs] SPI: 195412318 (0xba5c15e) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485753/3407 Max received sequence-number: 128 UDP encapsulation used for NAT traversal: N SA decrypted packets (number/bytes): 133/7980 Anti-replay : Enable Anti-replay window size: 1024 ----------------------------- IPSec policy name: \u0026#34;ipsec02\u0026#34; Sequence number : 10 Acl group : 3000 Acl rule : 10 Mode : ISAKMP ----------------------------- Connection ID : 5 Encapsulation mode: Tunnel Holding time : 0d 0h 42m 10s Tunnel local : 100.1.60.2:500 Tunnel remote : 200.1.7.2:500 Flow source : 192.168.100.0/255.255.255.0 0/0-65535 Flow destination : 172.17.100.0/255.255.255.0 0/0-65535 [Outbound ESP SAs] SPI: 184686406 (0xb021746) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485760/1071 Max sent sequence-number: 1 UDP encapsulation used for NAT traversal: N SA encrypted packets (number/bytes): 0/0 [Inbound ESP SAs] SPI: 187927920 (0xb338d70) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485699/1071 Max received sequence-number: 1216 UDP encapsulation used for NAT traversal: N SA decrypted packets (number/bytes): 1044/63024 Anti-replay : Enable Anti-replay window size: 1024 [FW1-entvsys] dis ipsec sa\n[FW2]dis ipsec sa 2024-07-17 09:01:41.270 ipsec sa information: =============================== Interface: GigabitEthernet1/0/3.60 =============================== ----------------------------- IPSec policy name: \u0026#34;ipsec01\u0026#34; Sequence number : 10 Acl group : 3000 Acl rule : 5 Mode : ISAKMP ----------------------------- Connection ID : 47 Encapsulation mode: Tunnel Holding time : 0d 1h 14m 2s Tunnel local : 200.1.6.2:500 Tunnel remote : 100.1.6.2:500 Flow source : 172.16.100.0/255.255.255.0 0/0-65535 Flow destination : 192.168.100.0/255.255.255.0 0/0-65535 [Outbound ESP SAs] SPI: 187864131 (0xb329443) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485760/2257 Max sent sequence-number: 1 UDP encapsulation used for NAT traversal: N SA encrypted packets (number/bytes): 0/0 [Inbound ESP SAs] SPI: 199477355 (0xbe3c86b) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485719/2257 Max received sequence-number: 704 UDP encapsulation used for NAT traversal: N SA decrypted packets (number/bytes): 708/42576 Anti-replay : Enable Anti-replay window size: 1024 ----------------------------- IPSec policy name: \u0026#34;ipsec01\u0026#34; Sequence number : 10 Acl group : 3000 Acl rule : 10 Mode : ISAKMP ----------------------------- Connection ID : 45 Encapsulation mode: Tunnel Holding time : 0d 0h 40m 31s Tunnel local : 200.1.6.2:500 Tunnel remote : 100.1.6.2:500 Flow source : 172.17.100.0/255.255.255.0 0/0-65535 Flow destination : 192.168.100.0/255.255.255.0 0/0-65535 [Outbound ESP SAs] SPI: 186945386 (0xb248f6a) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485754/1170 Max sent sequence-number: 107 UDP encapsulation used for NAT traversal: N SA encrypted packets (number/bytes): 106/6360 [Inbound ESP SAs] SPI: 192541812 (0xb79f474) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485719/1170 Max received sequence-number: 704 UDP encapsulation used for NAT traversal: N SA decrypted packets (number/bytes): 707/42420 Anti-replay : Enable Anti-replay window size: 1024 =============================== Interface: GigabitEthernet1/0/4.70 =============================== ----------------------------- IPSec policy name: \u0026#34;ipsec02\u0026#34; Sequence number : 10 Acl group : 3000 Acl rule : 5 Mode : ISAKMP ----------------------------- Connection ID : 48 Encapsulation mode: Tunnel Holding time : 0d 0h 54m 40s Tunnel local : 200.1.7.2:500 Tunnel remote : 100.1.60.2:500 Flow source : 172.16.100.0/255.255.255.0 0/0-65535 Flow destination : 192.168.100.0/255.255.255.0 0/0-65535 [Outbound ESP SAs] SPI: 195412318 (0xba5c15e) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485750/3347 Max sent sequence-number: 178 UDP encapsulation used for NAT traversal: N SA encrypted packets (number/bytes): 177/10620 [Inbound ESP SAs] SPI: 195126685 (0xba1659d) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485760/3347 Max received sequence-number: 1 UDP encapsulation used for NAT traversal: N SA decrypted packets (number/bytes): 0/0 Anti-replay : Enable Anti-replay window size: 1024 ----------------------------- IPSec policy name: \u0026#34;ipsec02\u0026#34; Sequence number : 10 Acl group : 3000 Acl rule : 10 Mode : ISAKMP ----------------------------- Connection ID : 44 Encapsulation mode: Tunnel Holding time : 0d 0h 43m 11s Tunnel local : 200.1.7.2:500 Tunnel remote : 100.1.60.2:500 Flow source : 172.17.100.0/255.255.255.0 0/0-65535 Flow destination : 192.168.100.0/255.255.255.0 0/0-65535 [Outbound ESP SAs] SPI: 187927920 (0xb338d70) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485683/1011 Max sent sequence-number: 1317 UDP encapsulation used for NAT traversal: N SA encrypted packets (number/bytes): 1316/79344 [Inbound ESP SAs] SPI: 184686406 (0xb021746) Proposal: ESP-ENCRYPT-AES-256 ESP-AUTH-SHA2-256-128 SA remaining key duration (kilobytes/sec): 10485760/1011 Max received sequence-number: 1 UDP encapsulation used for NAT traversal: N SA decrypted packets (number/bytes): 0/0 Anti-replay : Enable Anti-replay window size: 1024 [FW2] PC1 ping OA\nPC3 ping OA\n4.7.4 Configuring an L2TP over IPsec Tunnel 配置l2tp over ipsec FW1\n# 切换虚拟系统，以下配置都在entvsys下配置 switch vsys entvsys # 创建user001，每次启动都需要操作一次，产品手册中指示存于数据库中，而模拟器没硬盘没这货 user-manage user user0001 password Huawei@123 # interface Virtual-Template0 ppp authentication-mode chap remote address 30.30.30.2 ip address 30.30.30.1 255.255.255.252 # firewall zone dmz add interface Virtual-Template0 # l2tp enable l2tp-group 1 tunnel password cipher Huawei@123 tunnel name lns allow l2tp virtual-template 0 remote lac # acl number 3000 rule 15 permit udp source-port eq 1701 # security-policy rule name trust2dmz source-zone trust destination-zone dmz source-address 192.168.100.0 mask 255.255.255.0 destination-address 30.30.30.0 mask 255.255.255.252 action permit rule name dmz2trust source-zone dmz destination-zone trust source-address 30.30.30.0 mask 255.255.255.252 destination-address 192.168.100.0 mask 255.255.255.0 action permit rule name untrust2local source-zone untrust destination-zone local source-address 200.1.1.11 mask 255.255.255.255 destination-address 100.1.1.10 mask 255.255.255.255 action permit rule name any action permit # FW2\n# l2tp enable # l2tp-group 1 tunnel password cipher Huawei@123 tunnel name lac tunnel source LoopBack0 start l2tp ip 100.1.1.10 fullusername user001 # interface Virtual-Template0 ppp authentication-mode chap ppp chap user user001 ppp chap password cipher Huawei@123 ip address ppp-negotiate call-lns local-user user001 # policy-based-route rule name l2tp 1 source-zone trust source-address 172.16.101.0 mask 255.255.255.0 destination-address 192.168.100.0 mask 255.255.255.0 action pbr egress-interface Virtual-Template0 # nat-policy rule name l2tp source-zone trust egress-interface Virtual-Template0 source-address 172.16.101.0 mask 255.255.255.0 destination-address 192.168.100.0 mask 255.255.255.0 action source-nat easy-ip # acl number 3000 rule 15 permit udp destination-port eq 1701 # security-policy rule name trust2dmz source-zone trust destination-zone dmz source-address 172.16.101.0 mask 255.255.255.0 destination-address 192.168.100.0 mask 255.255.255.0 action permit rule name dmz2trust source-zone dmz destination-zone trust source-address 30.30.30.2 mask 255.255.255.255 destination-address 172.16.101.0 mask 255.255.255.0 action permit rule name local2untrust source-zone local destination-zone untrust source-address 200.1.1.11 mask 255.255.255.255 destination-address 100.1.1.10 mask 255.255.255.255 action permit # 验证\nPC1 PC2 PC3 ping OA 192.168.100.254\nFW2查看l2tp隧道\n[FW2]dis l2tp tunnel 2024-07-18 20:01:48.860 L2TP::Total Tunnel: 1 LocalTID RemoteTID RemoteAddress Port Sessions RemoteName VpnInstance ------------------------------------------------------------------------------ 1 1 100.1.1.10 1701 1 lns ------------------------------------------------------------------------------ Total 1, 1 printed [FW2]dis l2tp session 2024-07-18 20:01:51.360 L2TP::Total Session: 1 LocalSID RemoteSID LocalTID RemoteTID UserID UserName VpnInstance ------------------------------------------------------------------------------ 69 41 1 1 user001 ------------------------------------------------------------------------------ Total 1, 1 printed [FW2] FW2查看加密计数\n[FW2]dis ipsec statistics 2024-07-18 20:21:08.960 IPSec statistics information: Number of IPSec tunnels: 5 Number of standby IPSec tunnels: 0 the security packet statistics: input/output security packets: 5082/5457 input/output security bytes: 335843/362318 input/output dropped security packets: 4/7 the encrypt packet statistics: send chip: 5457, recv chip: 5457, send err: 2 local cpu: 5457, other cpu: 0, recv other cpu: 0 intact packet: 5457, first slice: 0, after slice: 0 the decrypt packet statistics: send chip: 5082, recv chip: 5082, send err: 0 local cpu: 5082, other cpu: 0, recv other cpu: 0 reass first slice: 0, after slice: 0 dropped security packet detail: can not find SA: 0, wrong SA: 0 authentication: 0, replay: 0 front recheck: 0, after recheck: 4 change cpu enc: 0, dec change cpu: 0 fib search: 0, output l3: 2 flow err: 5, slice err: 0, byte limit: 0 slave drop: 0 negotiate about packet statistics: IKE fwd packet ok: 46, err: 0 IKE ctrl packet inbound ok: 46, outbound ok: 68 SoftExpr: 0, HardExpr: 0, DPDOper: 0 trigger ok: 29, switch sa: 12, sync sa: 0 recv IKE nat keepalive: 0, IKE input: 0 [FW2] FW查看ipsec状态\n4.8 Task 8: Multicast Service Deployment on the MAN 4.8.1 Configuring the Multicast Service 配置MAN网络的组播网络，AR4 igmpv2， CR1/CR2的loopback0接口选举bsr，配置优先级确保CR1成为bsr 配置anycast RP，创建loopback10 0100.100.100./32，loopback10地址为c-rp 配置msdp组播源发现协议 AR4的g0/0/01.100，限制组播地址 igmp加速离组 AR1\n# multicast routing-enable # interface GigabitEthernet0/0/0 pim sm # interface GigabitEthernet0/0/1\tpim sm # AR2\n# multicast routing-enable # interface GigabitEthernet0/0/0 pim sm # interface GigabitEthernet0/0/1\tpim sm # AR3\n# multicast routing-enable # interface GigabitEthernet0/0/0 pim sm # interface GigabitEthernet0/0/2\tpim sm # AR4\n# multicast routing-enable # interface GigabitEthernet0/0/0 pim sm # interface GigabitEthernet0/0/2\tpim sm # acl number 2000 rule 5 permit source 224.1.1.0 0.0.0.255 # interface GigabitEthernet0/0/1.100 pim sm igmp enable igmp group-policy 2000 2 igmp prompt-leave group-policy 2000 # CR1\n# multicast routing-enable # interface GigabitEthernet0/0/0 pim sm # interface GigabitEthernet0/0/1 pim sm # interface GigabitEthernet0/0/2\tpim sm # interface Ethernet1/0/1 pim sm # interface LoopBack0 pim sm # interface LoopBack10 ip address 100.100.100.100 255.255.255.255 pim sm # bgp 64812 # ipv4-family unicast network 100.100.100.100 255.255.255.255 # pim c-bsr hash-length 0 c-bsr priority 255 c-bsr LoopBack0 c-rp LoopBack10 # msdp originating-rp LoopBack0 peer 1.1.1.6 connect-interface LoopBack0 # CR2\n# multicast routing-enable # interface GigabitEthernet0/0/0 pim sm # interface GigabitEthernet0/0/1 pim sm # interface GigabitEthernet0/0/2\tpim sm # interface LoopBack0 pim sm # interface LoopBack10 ip address 100.100.100.100 255.255.255.255 pim sm # bgp 64812 # ipv4-family unicast network 100.100.100.100 255.255.255.255 # pim c-bsr hash-length 0 c-bsr LoopBack0 c-rp LoopBack10 # msdp originating-rp LoopBack0 peer 1.1.1.5 connect-interface LoopBack0 # 验证\ndis pim rp-info\n[AR4]dis pim bsr-info VPN-Instance: public net Elected AdminScoped BSR Count: 0 Elected BSR Address: 1.1.1.5 Priority: 255 Hash mask length: 0 State: Accept Preferred Scope: Not scoped Uptime: 00:00:50 Expires: 00:01:20 C-RP Count: 1 [AR4] [AR4]dis pim rp-info VPN-Instance: public net PIM-SM BSR RP Number:1 Group/MaskLen: 224.0.0.0/4 RP: 100.100.100.100 Priority: 0 Uptime: 00:00:56 Expires: 00:01:34 [AR4] dis pim routing-table\n[CR1]dis pim routing-table VPN-Instance: public net Total 0 (*, G) entry; 1 (S, G) entry (100.1.100.2, 224.1.1.1) RP: 100.100.100.100 (local) Protocol: pim-sm, Flag: SPT 2MSDP LOC ACT UpTime: 00:03:16 Upstream interface: Ethernet1/0/1 Upstream neighbor: NULL RPF prime neighbor: NULL Downstream interface(s) information: Total number of downstreams: 1 1: GigabitEthernet0/0/0 Protocol: pim-sm, UpTime: 00:03:16, Expires: 00:03:14 [CR1] [CR2]dis pim routing-table VPN-Instance: public net Total 1 (*, G) entry; 1 (S, G) entry (*, 224.1.1.1) RP: 100.100.100.100 (local) Protocol: pim-sm, Flag: WC UpTime: 00:17:28 Upstream interface: Register Upstream neighbor: NULL RPF prime neighbor: NULL Downstream interface(s) information: Total number of downstreams: 1 1: GigabitEthernet0/0/2 Protocol: pim-sm, UpTime: 00:17:28, Expires: 00:03:02 (100.1.100.2, 224.1.1.1) RP: 100.100.100.100 (local) Protocol: pim-sm, Flag: SPT MSDP ACT UpTime: 00:03:41 Upstream interface: GigabitEthernet0/0/0 Upstream neighbor: 10.5.6.1 RPF prime neighbor: 10.5.6.1 Downstream interface(s) information: Total number of downstreams: 1 1: GigabitEthernet0/0/2 Protocol: pim-sm, UpTime: 00:03:41, Expires: 00:02:49 [CR2] [AR4]dis pim routing-table VPN-Instance: public net Total 1 (*, G) entry; 1 (S, G) entry (*, 224.1.1.1) RP: 100.100.100.100 Protocol: pim-sm, Flag: WC UpTime: 00:17:42 Upstream interface: GigabitEthernet0/0/2 Upstream neighbor: 10.4.6.1 RPF prime neighbor: 10.4.6.1 Downstream interface(s) information: Total number of downstreams: 1 1: GigabitEthernet0/0/1.100 Protocol: igmp, UpTime: 00:17:42, Expires: - (100.1.100.2, 224.1.1.1) RP: 100.100.100.100 Protocol: pim-sm, Flag: SPT ACT UpTime: 00:03:55 Upstream interface: GigabitEthernet0/0/2 Upstream neighbor: 10.4.6.1 RPF prime neighbor: 10.4.6.1 Downstream interface(s) information: Total number of downstreams: 1 1: GigabitEthernet0/0/1.100 Protocol: pim-sm, UpTime: 00:03:55, Expires: - [AR4] 电脑安装vlc，ensp选择vlc安装路径，启动组播源服务器和PC4接收视频\n最后 个人觉得整个拓扑的配置项还是挺多的，涉及的协议、框架、模型也挺多，有一定挑战 现场8个小时给我整，我是整不出来，在没有做充足准备的前提下 毕竟是实验，没有整防火墙双机热备 毕竟是实验，RR还能跑数据和接入EBGP对等体 毕竟是实验，AC与AC之间没有物理连线做状态监测 毕竟是实验，单线路多逻辑互联 …… 可能有更好的实现需求的配置答案（山外有山） 文件存阿里云盘了，这是链接：[分享的文件 ] 欢迎“来电”来函探讨。 ","date":"2024-07-19T15:54:31Z","permalink":"https://kiraster.github.io/posts/e6429fe7.html/","title":"2021-2022华为ICT大赛（全球）实验题研究"},{"content":"在玩PNETLab模拟器实验遇到的小问题，从登陆PNETLab到能登陆拓扑里的设备这一段时间是很无聊且每次都是重复动作\n以前做测试就点点点没觉得是什么问题，但是设备数量多的大型拓扑，那是一个超长等待时间\n想过的方法是查查API，无功而返，而且也不熟\n最后使用Selenium实现功能\n环境说明 Selenium==4.22.0 Python==Python 3.10.13 PNETLab== 5.3.13 ChromeDriver==126.0.6478.126 PNETLab关闭验证码验证 效果展示 显示窗口执行（控制台同时输出）\n无显示窗口执行（控制台输出）\n脚本代码 就不过多文字描述了，代码里的注释有说明\nNote1：PNETLab的打开速度和拓扑文件的载入速度有很多影响因素（电脑硬件，拓扑文件大小，镜像等）\nNote2：如果你在本地运行代码后提示错误，大概率可以通过调整显式等待时间和隐式等待时间解决（PNETLab的版本也要考虑，有可能定位元素有变动）\nfrom selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.chrome.options import Options from selenium.webdriver.chrome.service import Service from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC from selenium.webdriver.common.action_chains import ActionChains import time import random # 创建 ChromeOptions 对象 options = webdriver.ChromeOptions() # 添加参数headless后不显示窗口 options.add_argument(\u0026#39;--headless\u0026#39;) # 控制台不显示INFO:CONSOLE，默认0，显示与服务端的的交互内容 options.add_argument(\u0026#39;--log-level=3\u0026#39;) # 4.6版本前需要指定路径，使用本地驱动 # 其实前后版本都可以使用本地驱动（本地好使，加载快，无须联网下载ChromeDriver） # 指定浏览器驱动路径，以Chrome为例（与电脑安装的谷歌浏览器版本大版本号一致即可或添加参数忽略（自己查）） # 当前日期（20240704）使用最新版本selenium==4.22.0 # chromedriver_bin = \u0026#39;D:/Plugs/ChromeDriver/126.0.6478.126/chrome-win64/chromedriver.exe\u0026#39; chromedriver_bin = r\u0026#39;D:\\Plugs\\ChromeDriver\\126.0.6478.126\\chrome-win64\\chromedriver.exe\u0026#39; service = webdriver.ChromeService(executable_path=chromedriver_bin) driver = webdriver.Chrome(service=service, options=options) # 4.6版本之后使用默认的实例，使用如下代码（自动联网下载ChromeDriver） # 当前日期（20240704）使用最新版本selenium==4.22.0 # service = Service() # driver = webdriver.Chrome(options=options, service=service) # selenium参数定义 # 显式等待设置，等待最多10秒钟，每0.5秒检查一次条件是否满足 # 该参数对需要控制的元素定位起作用 wait = WebDriverWait(driver, 10) # 设置一个隐式等待时间，因为点击open后的loading时间不可预计 # 可能的因素有拓扑unl文件大小，电脑硬件配置 # 设置隐式等待时间为6秒，该参数全局作用，按需调整数值 driver.implicitly_wait(6) # 本地PNETLab登陆参数定义 login_url = \u0026#39;http://x.x.x.x/\u0026#39; username = \u0026#39;admin\u0026#39; password = \u0026#39;pnet\u0026#39; # 自动登陆操作 def pnetlab_login(): # 打开PNETLab登陆页面登陆 driver.get(login_url) # 定位用户名输入框并输入用户名 username_input = wait.until(EC.visibility_of_element_located((By.XPATH, \u0026#39;//input[@placeholder=\u0026#34;Username\u0026#34;]\u0026#39;))) username_input.clear() username_input.send_keys(username) # 定位密码输入框并输入密码 password_input = wait.until(EC.visibility_of_element_located((By.XPATH, \u0026#39;//input[@placeholder=\u0026#34;Password\u0026#34;]\u0026#39;))) password_input.clear() password_input.send_keys(password) # 定位登录按钮并点击 login_button = driver.find_element(By.XPATH, \u0026#39;//div[@class=\u0026#34;button btn btn-info\u0026#34; and text()=\u0026#34;Login\u0026#34;]\u0026#39;) login_button.click() try: # 使用显式等待来等待搜索框元素出现 search_element = wait.until(EC.visibility_of_element_located((By.XPATH, \u0026#39;//input[@placeholder=\u0026#34;Search Labs\u0026#34;]\u0026#39;))) print(\u0026#34;登录成功!\u0026#34;) return True except Exception as e: print(\u0026#34;登录失败或者无法找到搜索框元素.\\n\u0026#34;, str(e)) return False # 随机抽一个lab文件 def random_lab(): lab_names = (\u0026#39;H1 CFG SPOTO Ver_1.unl\u0026#39;, \u0026#39;H1 Plus CFG SPOTO Ver_1.unl\u0026#39;, \u0026#39;H2 CFG SPOTO CCIE RS Ver_1.unl\u0026#39;, \u0026#39;H2 Plus CFG SPOTO Ver_1.unl\u0026#39;, \u0026#34;H3 SPOTO CCIE RS Ver_1.unl\u0026#34;) chosen_lab = random.choice(lab_names) return chosen_lab def main(): try: # 登陆 sign_in = pnetlab_login() if not sign_in: print(\u0026#39;\u0026gt;\u0026gt;\u0026gt;登陆有问题\u0026#39;) return # 随机抽 chosen_lab = random_lab() print(\u0026#39;-\u0026#39; * 50 + f\u0026#39;\\n本次抽中的lab是:{chosen_lab[:-4]}\u0026#39;) # 搜索框输入lab文件名 search_element = wait.until(EC.visibility_of_element_located((By.XPATH, \u0026#39;//input[@placeholder=\u0026#34;Search Labs\u0026#34;]\u0026#39;))) search_element.clear() search_element.send_keys(chosen_lab) # 等待第一个搜索结果可见并点击 time.sleep(1) first_button = wait.until( EC.visibility_of_element_located((By.XPATH, \u0026#34;//div[@id=\u0026#39;search_lab_suggest\u0026#39;]/div[@class=\u0026#39;button\u0026#39;][1]\u0026#34;))) first_button.click() # 等待第二个搜索结果可见并点击 # second_button = wait.until( # EC.visibility_of_element_located((By.XPATH, \u0026#34;//div[@id=\u0026#39;search_lab_suggest\u0026#39;]/div[@class=\u0026#39;button\u0026#39;][2]\u0026#34;))) # second_button.click() # 点击open按钮 open_button = driver.find_element(By.CSS_SELECTOR, \u0026#34;div.box_flex \u0026gt; div.btn-info:nth-child(1)\u0026#34;) open_button.click() # 等不到加载完成页面报错，调大隐式等待时间 # 触发左侧菜单的元素，左下角log图片class类 leftmenu_trigger = driver.find_element(By.CLASS_NAME, \u0026#34;logo_img\u0026#34;) # 创建 ActionChains 对象 actions = ActionChains(driver) # 移动鼠标到左侧菜单触发元素上，触发菜单显示 actions.move_to_element(leftmenu_trigger).perform() # 点击Setup Nodes setup_nodes = driver.find_element(By.XPATH, \u0026#39;//span[text()=\u0026#34;Setup Nodes\u0026#34;]\u0026#39;) setup_nodes.click() # Start All Nodes start_all = driver.find_element(By.CLASS_NAME,\u0026#34;action-nodesstart\u0026#34;) start_all.click() # 查看已启动的IOL Nodes 的数值 # 移动鼠标到左侧菜单触发元素上，触发菜单显示 actions.move_to_element(leftmenu_trigger).perform() # 点击System status system_status = driver.find_element(By.XPATH, \u0026#39;//span[text()=\u0026#34;System Status\u0026#34;]\u0026#39;) system_status.click() print(\u0026#39;-\u0026#39; * 50 + \u0026#39;\\n正在启动设备\\n\u0026#39;) # 30秒后获取已启动设备数值 # time.sleep(30) # 循环获取启动的设备数值，间隔10秒获取一次，共5分钟 x = 1 while x \u0026lt; 30: time.sleep(10) started = wait.until(EC.presence_of_element_located((By.XPATH, \u0026#34;//td/strong[@style=\u0026#39;color: red;\u0026#39;]\u0026#34;))) # 打印已启动设备数值 print(\u0026#34;已启动设备数:\u0026#34;, started.text) if int(started.text) \u0026gt;= 40: break x += 1 time.sleep(5) print(f\u0026#39;设备启动完成，打开链接{login_url},开始实验\\n\u0026#39; * 3 + \u0026#39;-\u0026#39; * 50) # ////////////////////////////////////////////////////////////////////////////////// # # destroy lab 退出 # # 测试用，随后可能用不到 # # time.sleep(10) # print(\u0026#39;正在关闭设备\\n\u0026#39;) # # 移动鼠标到左侧菜单触发元素上，触发菜单显示 # actions.move_to_element(leftmenu_trigger).perform() # # 点击Destroy Lab # destroy_lab = driver.find_element(By.XPATH, \u0026#39;//span[text()=\u0026#34;Destroy Lab\u0026#34;]\u0026#39;) # destroy_lab.click() # # # 定位弹窗的 Destroy 按钮 # destroy_button = driver.find_element(By.CLASS_NAME, \u0026#34;swal2-confirm\u0026#34;) # # # 定位弹窗的 Cancel 按钮 # # cancel_button = driver.find_element(By.CLASS_NAME, \u0026#34;swal2-cancel\u0026#34;) # # # 二次确认点击 # destroy_button.click() # # # 循环获取启用的设备数值，间隔10秒获取一次，共5分钟 # x = 600 # while x \u0026gt; 0: # time.sleep(10) # started = WebDriverWait(driver, 10).until( # EC.presence_of_element_located((By.XPATH, \u0026#34;//td/strong[@style=\u0026#39;color: red;\u0026#39;]\u0026#34;)) # ) # # # 打印剩余启动设备数值 # print(\u0026#34;剩余启动设备数:\u0026#34;, started.text) # if int(started.text) \u0026lt; 10: # break # x -= 1 # # print(\u0026#39;设备已关闭\\n\u0026#39; * 3 + \u0026#39;-\u0026#39; * 50) # time.sleep(10) # ////////////////////////////////////////////////////////////////////////////////// except Exception as e: print(e) print(\u0026#39;\u0026gt;\u0026gt;\u0026gt;OPS,FUCKED UP\u0026#39;) finally: # 关闭浏览器驱动 driver.quit() if __name__ == \u0026#39;__main__\u0026#39;: main() 最后 忽略代码中变量名的命名拼写错误，词汇量紧张 部分代码来自GPT，官网示例（注意看版本对应的示例） 大部分时间都耗在定位元素了，pnet为了玩花样或是抄来不想改这html前端也是无限套壳 有些是前端渲染代码是通过java函数生成的，这就有点不好玩了 欢迎“来电”来函探讨。 ","date":"2024-07-05T12:37:38Z","permalink":"https://kiraster.github.io/posts/ccacf283.html/","title":"使用Selenium打开PNETLab拓扑并开启所有节点"},{"content":"以前了解过DMVPN组网，没发现还有这么个分层组网的模型，于是玩一玩做个记录\nCisco网站文档链接： https://www.cisco.com/c/zh_cn/support/docs/security/dynamic-multipoint-vpn-dmvpn/211292-Configure-Phase-3-Hierarchical-DMVPN-wit.html 华为的说法是Hub级联网络部署DSVPN\n华为网站文档链接： https://support.huawei.com/enterprise/zh/doc/EDOC1100271739/baf3c434 一段蹩脚的Cisco网站机器翻译原文\n分层设置（大于一级）允许更复杂的基于树的DMVPN网络拓扑。基于树的拓扑允许使用区域集线器构建DMVPN网络，区域集线器是中心集线器的分支。此体系结构允许区域中心处理其区域分支的数据和下一跳解析协议(NHRP)控制流量。但是，它仍允许在DMVPN网络内的任何分支之间构建分支到分支隧道，无论它们是否位于同一区域。此架构还允许DMVPN网络布局更紧密地匹配区域或分层数据流模式。\nDMVPN的组成 多GRE隧道 NHRP 动态路由协议 IPSec加密 配置思路也是分这四个步骤，本人觉得DMVPN的精髓在于NHRP协议，这个协议可以使Spoke站点之间动态建立隧道，新增Spoke站点无须改动Hub端配置，看上去很智能哦\n实验逻辑拓扑 实验物理拓扑 最终的效果（例如：R4的192.168.4.0/24网段去往R6的192.168.6.0/24网段一跳可达）\n配置过程 基础配置 包括IP地址，去往ISP的默认路由等\n基础配置完成后各Hub路由器和Spoke路由器可以ping通各个公网IP地址\nR1#ping 100.28.28.2 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 100.28.28.2, timeout is 2 seconds: ..!!! Success rate is 60 percent (3/5), round-trip min/avg/max = 4/5/7 ms R1#ping 200.28.28.2 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 200.28.28.2, timeout is 2 seconds: !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 2/2/3 ms R1#ping 100.38.38.3 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 100.38.38.3, timeout is 2 seconds: !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 2/2/4 ms R1#ping 200.38.38.3 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 200.38.38.3, timeout is 2 seconds: !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 2/2/4 ms R1#ping 100.48.48.4 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 100.48.48.4, timeout is 2 seconds: !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 2/3/5 ms R1#ping 100.58.58.5 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 100.58.58.5, timeout is 2 seconds: !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 2/3/4 ms R1#ping 100.68.68.6 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 100.68.68.6, timeout is 2 seconds: !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 2/2/4 ms R1#ping 100.78.78.7 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 100.78.78.7, timeout is 2 seconds: !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 2/3/4 ms R1#ping 8.8.8.8 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 8.8.8.8, timeout is 2 seconds: !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 1/1/2 ms R1# 多GRE隧道 Central Hub 与 Hub1，Hub2 配置tunnel\nmGRE与单GRE的配置区别在于隧道模式 multipoint 和填写远端destination地址\n！配置R1,R2,R3的tunnel，注意修改tunnel的IP地址，R2，R3 如法炮制 ！R1 Tunnel0 （R1) interface Tunnel0 ip address 10.0.0.1 255.255.255.0 tunnel source Ethernet0/0 tunnel mode gre multipoint tunnel key 12345 Hub1，Hub2 ，Spoke配置tunnel\n在Hub1，Hub2上配置tunnel 1（与Spoke建立隧道使用）\n！ Hub1 Tunnel1 （R2) interface Tunnel1 ip address 10.0.1.2 255.255.255.0 no ip redirects tunnel source Ethernet0/1 tunnel mode gre multipoint tunnel key 12345 ！ Hub2 Tunnel1 （R3) interface Tunnel1 ip address 10.0.2.3 255.255.255.0 no ip redirects tunnel source Ethernet0/1 tunnel mode gre multipoint tunnel key 12345 ！ Spoke1 （R4) interface Tunnel1 ip address 10.0.1.4 255.255.255.0 no ip redirects tunnel source Ethernet0/0 tunnel mode gre multipoint tunnel key 12345 ！ 其他Spoke站点如法炮制 NHRP Central Hub的配置（R1)\n！Central Hub （R1) interface Tunnel0 ip nhrp authentication cisco # 配置nhrp认证(可选) ip nhrp map multicast dynamic # 动态接受组播映射，(Version 15.7(3)M2 版本默认开启) ip nhrp network-id 123 # network-id，很重要，当前这个拓扑需要同一配置，原因是影响nhrp解析请求的发送 ip nhrp redirect # nhrp的重定向，Hub向spoke发送重定向消息 Hub1和Hub2的配置（以Hub1为例（R2)）\n！ Hub 1 （R2) interface Tunnel0 ip nhrp authentication cisco ip nhrp map 10.0.0.1 100.18.18.1 # 隧道地址对应的公网地址映射 ip nhrp map multicast 100.18.18.1 # 组播对应的公网地址映射 ip nhrp network-id 123 # network-id，很重要，当前这个拓扑需要同一配置，原因是影响nhrp解析请求的发送 ip nhrp nhs 10.0.0.1 # 配置nhs，spoke向nhs注册 ip nhrp shorcut # Hub1和Hub2是Central Hub的Spoke (Version 15.7(3)M2 版本默认开启) ip nhrp redirect # 当前这个拓扑，需要配置这一项，因为在配置动态路由协议后，R3去往R4和R5业务网段的下一跳是R2 interface Tunnel1 ip nhrp authentication cisco ip nhrp network-id 123 ip nhrp redirect Spoke1,2,3,4的配置（以Spoke1和Spoke3为例）\n！Spoke 1 （R4) interface Tunnel1 ip nhrp authentication cisco ip nhrp map 10.0.1.2 200.28.28.2 ip nhrp map multicast 200.28.28.2 ip nhrp network-id 123 ip nhrp nhs 10.0.1.2 ！Spoke 3 （R6) interface Tunnel1 ip nhrp authentication cisco ip nhrp network-id 123 ip nhrp nhs 10.0.2.3 nbma 200.38.38.3 multicast # 一次性配置nhs,映射地址 在配置完成mGRE和NHRP之后，产生流量之后（ping测试）应该可以观察到以下现象\nHub1(R2)到Hub2(R3)的tunnel地址形成动态映射和动态隧道，跟踪路径查看到一跳可达\nSpoke1(R4)到Spoke2(R5)的tunnel地址形成动态映射和动态隧道，跟踪路径查看到一跳可达\nSpoke3(R6)到Spoke4(R7)的tunnel地址形成动态映射和动态隧道，跟踪路径查看到一跳可达\n动态路由协议 可选的协议RIP、EIGRP、OSPF、BGP、ODR\n本实验业务网络选用OSPF，Central Hub，Hub1和Hub2设计在Area0；Hub1和Spoke1，Spoke2设计在Area1；Hub2和Spoke3，Spoke4设计在Area2；\n根据组网情况分析，OSPF的网络类型可选的有广播、点到多点；\n本实验选用广播，因为在配置tunnel 的ospf网络类型为广播后，同一个hub下的spoke站点能学习到优化下一跳后的路由，注意修改Spoke的ospf优先级为0不参与DR选举；\n（配置tunnel 的ospf网络类型为点到多点后，spoke站点在产生分支站点流量后会对路由进行override， % - next hop override ，O之后有%符号）\nCentral Hub，Hub1和Hub2的OSPF配置\n！Central Hub （R1) router ospf 110 router-id 1.1.1.1 network 10.0.0.1 0.0.0.0 area 0 network 172.16.1.1 0.0.0.0 area 0 interface Tunnel0 ip ospf network broadcast # 修改tunnel0接口ospf网络类型为广播 interface Loopback1 ip ospf network point-to-point # 修改环回接口网络类型为点到点 ！ Hub 1 （R2) router ospf 110 router-id 2.2.2.2 network 10.0.0.2 0.0.0.0 area 0 network 172.16.2.1 0.0.0.0 area 0 interface Tunnel0 ip ospf network broadcast # 修改tunnel0接口ospf网络类型为广播 ip ospf priority 0 # 修改ospf 优先级为0 interface Loopback1 ip ospf network point-to-point # 修改环回接口网络类型为点到点 ！Hub 2 （R3) router ospf 110 router-id 3.3.3.3 network 10.0.0.3 0.0.0.0 area 0 network 172.16.3.1 0.0.0.0 area 0 interface Tunnel0 ip ospf network broadcast ip ospf priority 0 interface Loopback1 ip ospf network point-to-point Hub1和Spoke1，Spoke2的配置；Hub2和Spoke3，Spoke4的配置如法炮制即可\n！ Hub 1 （R2) router ospf 110 network 10.0.1.2 0.0.0.0 area 1 interface Tunnel1 ip ospf network broadcast ！Spoke 1 （R4) router-id 4.4.4.4 network 10.0.1.4 0.0.0.0 area 1 network 192.168.4.1 0.0.0.0 area 1 interface Tunnel1 ip ospf network broadcast ip ospf priority 0 interface Loopback1 ip ospf network point-to-point ！Spoke 2 （R5) router ospf 110 router-id 5.5.5.5 network 10.0.1.5 0.0.0.0 area 1 network 192.168.5.1 0.0.0.0 area 1 interface Tunnel1 ip ospf network broadcast ip ospf priority 0 interface Loopback1 ip ospf network point-to-point 配置完成以上内容后，可以观察到的现象（例如：R5的192.168.5.0/24网段去往R7的192.168.7.0/24网段一跳可达）\nIPSec加密 配置ISAKMP第一阶段策略\ncrypto isakmp policy 10 encr 3des hash md5 authentication pre-share group 2 配置ISAKMP预共享密码\ncrypto isakmp key Cisco@123 address 0.0.0.0 配置IPSec策略（转换集）\ncrypto ipsec transform-set DMVPN esp-3des esp-md5-hmac mode transport 配置IPSec profile\ncrypto ipsec profile DMVPN set transform-set DMVPN 调用IPSec profile\ninterface Tunnel0 tunnel protection ipsec profile DMVPN 以上命令配置完成后，使用命令sh run | s crypto 查看配置，复制粘贴到其他设备上，然后在在tunnel接口调用\nR1#sh run | s crypto crypto isakmp policy 10 encr 3des hash md5 authentication pre-share group 2 crypto isakmp key Cisco@123 address 0.0.0.0 crypto ipsec transform-set DMVPN esp-3des esp-md5-hmac mode transport crypto ipsec profile DMVPN set transform-set DMVPN R1# Hub1和Hub2接口调用时后边添加share可能遇到只有一个隧道起来的情况（不懂是模拟器bug还是怎么滴），按照思科官网配置两个不同名称的ipsec profile再次进行调用，可以解决\nR2#sh run | s crypto crypto isakmp policy 10 encr 3des hash md5 authentication pre-share group 2 crypto isakmp key Cisco@123 address 0.0.0.0 crypto ipsec transform-set DMVPN esp-3des esp-md5-hmac mode transport crypto ipsec profile DMVPN-0 set transform-set DMVPN crypto ipsec profile DMVPN-1 set transform-set DMVPN R2# 验证加密\n在R4上清空会话\nR4#clea crypto session R4#sh crypto engine connections active Crypto Engine Connections ID Type Algorithm Encrypt Decrypt LastSeqN IP-Address 45 IPsec 3DES+MD5 0 2 2 100.48.48.4 46 IPsec 3DES+MD5 2 0 0 100.48.48.4 1016 IKE MD5+3DES 0 0 0 100.48.48.4 使用ping命令产生数据\nR4#ping 192.168.7.1 source 192.168.4.1 repeat 100 Type escape sequence to abort. Sending 100, 100-byte ICMP Echos to 192.168.7.1, timeout is 2 seconds: Packet sent with a source address of 192.168.4.1 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Success rate is 100 percent (100/100), round-trip min/avg/max = 4/10/27 ms 查看加解密数据包计数\nR4#sh crypto engine connections active Crypto Engine Connections ID Type Algorithm Encrypt Decrypt LastSeqN IP-Address 45 IPsec 3DES+MD5 0 13 13 100.48.48.4 46 IPsec 3DES+MD5 13 0 0 100.48.48.4 47 IPsec 3DES+MD5 0 0 0 100.48.48.4 48 IPsec 3DES+MD5 92 0 0 100.48.48.4 49 IPsec 3DES+MD5 0 93 93 100.48.48.4 50 IPsec 3DES+MD5 0 0 0 100.48.48.4 1016 IKE MD5+3DES 0 0 0 100.48.48.4 1017 IKE MD5+3DES 0 0 0 100.48.48.4 1018 IKE MD5+3DES 0 0 0 100.48.48.4 R4# 结果显示，加密或解密的数量分别超过100\nNHRP工作流程 详细的可以去思科网站看看，这里贴个图\n大致单向流程（以Spoke1（192.168.4.1）到Spoke4（192.168.7.1）为例）：\n当Spoke1首次与Spoke4进行通信（第一个数据包流，比如ping）或动态隧道已过期，icmp request 到达Hub1，查询nhrp缓存，发现没有192.168.7.1的缓存记录，icmp request 根据路由表和nhrp迭代转发到Hub1 Hub1收到icmp request ，由于Hub1不是192.168.7.1的终点，于是向Spoke1发送nhrp 重定向（指示Spoke1发nhrp request），同时icmp request 根据路由表和nhrp迭代转发到Central Hub Central Hub收到icmp request，由于Central Hub不是192.168.7.1的终点，于是向Spoke1发送nhrp 重定向（往tunnel0发送，Hub1收到后再转发到tunnel1上，指示Spoke1发nhrp request，），同时icmp request 根据路由表和nhrp迭代转发到Hub2 Hub2收到icmp request，由于Hub2不是192.168.7.1的终点，于是向Spoke1发送nhrp 重定向（往tunnel0发送，再转发到tunnel1，指示Spoke1发nhrp request），同时icmp request 根据路由表和nhrp迭代转发到Spoke4 Spoke4收到icmp request，由于Spoke4是192.168.7.1的终点，在收到Spoke1的nhrp request于是向Spoke1发送Resolution Reply（沿着来的的路径逐条转发回去） ，icmp request 到达目的地 返回流程也是经过一轮重定向的操作，因为当icmp request 到达目的地后，Spoke4的nhrp缓存也没有192.168.4.1的条目或者说没有形成动态的tunnel\n通过debug nhrp packet观察，nhrp的重定向、 request 消息在几十毫秒内全部完成\nR2和R3之间也会发送重定向和request，因为运行了ospf协议，R2和R3之间有Spoke的路由（例如R2去往R6，R7的下一跳是R3的tunnel接口地址）\n假设R2和R3直接已经形成动态隧道（R2ping通R3的tunnel0接口）那么Spoke1（192.168.4.1）到Spoke4（192.168.7.1）的首次通信跟踪路径如下\nR4#tra 192.168.6.1 sou 192.168.4.1 Type escape sequence to abort. Tracing the route to 192.168.6.1 VRF info: (vrf in name/id, vrf out name/id) 1 10.0.1.2 9 msec 8 msec 8 msec 2 10.0.0.3 11 msec 11 msec 15 msec 3 10.0.2.6 19 msec * 14 msec R4# 在路由器上使用命令清空nhrp缓存，再次使用trace可以看到数据包经过了R1 R1#clea ip nhrp R2#clea ip nhrp R3#clea ip nhrp R4#clea ip nhrp R6#clea ip nhrp R4#tra 192.168.6.1 sou 192.168.4.1 Type escape sequence to abort. Tracing the route to 192.168.6.1 VRF info: (vrf in name/id, vrf out name/id) 1 10.0.1.2 11 msec 11 msec 9 msec 2 10.0.0.1 11 msec 11 msec 17 msec 3 10.0.0.3 19 msec 13 msec 12 msec 4 10.0.2.6 18 msec * 14 msec R4# Spoke站点外网地址 Spoke站点是静态或动态的公网IP不影响\n但是如果Spoke站点的出口地址是私网地址呢？不要惊奇，十几年前就发现有这种现象了，或者说Spoke站点上一级有NAT设备，这种情况下DMVPN仍然可用（前提是运营商没把UDP500给干掉）\n在上面的拓扑R7和R8之间添加R9，配置NAT，R7和R9之间配置10.79.79.0网段，完成配置后发现R7学习路由和连通性测试没有问题，R3上观察nhrp缓存如下：\nR3#sh ip nhrp 10.0.0.1/32 via 10.0.0.1 Tunnel0 created 00:12:47, never expire Type: static, Flags: used NBMA address: 100.18.18.1 10.0.2.6/32 via 10.0.2.6 Tunnel1 created 00:12:35, expire 00:09:08 Type: dynamic, Flags: registered used nhop NBMA address: 100.68.68.6 10.0.2.7/32 via 10.0.2.7 Tunnel1 created 00:00:25, expire 00:09:35 Type: dynamic, Flags: registered used nhop NBMA address: 100.89.89.9 (Claimed NBMA address: 10.79.79.7) 比正常的显示多了一行 (Claimed NBMA address: 10.79.79.7) R9上查看NAT转换，是不是很熟悉哈，在IPSec VPN穿越NAT的时候也出现过这种情况，所以我想说DMVPN是IPSec VPN 的PLUS+PRO+MAX升级版\nR9#sh ip nat translations Pro Inside global Inside local Outside local Outside global udp 100.89.89.9:500 10.79.79.7:500 100.58.58.5:500 100.58.58.5:500 udp 100.89.89.9:500 10.79.79.7:500 200.38.38.3:500 200.38.38.3:500 udp 100.89.89.9:4500 10.79.79.7:4500 100.58.58.5:4500 100.58.58.5:4500 udp 100.89.89.9:4500 10.79.79.7:4500 200.38.38.3:4500 200.38.38.3:4500 R9# 经典结尾扯蛋 整了这么个实验，精华部分也就是nhrp的重定向和Spoke站点之间的动态隧道 在本人接触过的Hub和Spoke组网的项目中，也就接触过IPSec VPN，分支站点向中心传数据的情况，至于站点和站点互通的少见 其实使用DMVPN组网也能完成分支站点仅向中心传数据；在实际的项目中怀疑是参杂了一些利益因素导致这种组网少见，可能是我见识短浅；因为这种技术也不会向友商设备提供对接，跟你对接了我岂不是少赚钱了 而IPSec VPN则不同，它是一个安全框架，遵守框架开发理论上都能对接，本人提到的第二点的项目中对接的设备有深信服，华三，华为，迈普，绿盟，都组网正常运行了 做完这个实验去瞄了一眼华为的DSVPN，配置项差不多，命令表现形式不一样 配置存阿里云盘了，这是链接：[分享的文件 ] 欢迎“来电”来函探讨。 ","date":"2024-05-17T16:13:59Z","permalink":"https://kiraster.github.io/posts/638be305.html/","title":"多子网分支的第3阶段分层DMVPN实验"},{"content":"因为之前重装了系统，很多软件设置需要恢复，特别是Python环境。最近小玩了一下Pyqt，接触到了Anaconda这个巨无霸软件\n看了官网介绍它的用途，觉得完全用不到这么多功能，安装Anaconda后文件已经到达10G\n再翻了翻发现还有个类似精简版的Miniconda，觉得可以用来管理虚拟环境\n这篇文记录安装和使用过程\n下载Miniconda 官网下载链接：https://docs.anaconda.com/free/miniconda/miniconda-other-installer-links/\n本着稳定能用的优先原则，并考虑到之前编写的代码一直使用Python3.10版本，我选择这个版本\n注意：使用这个版本只是为了全局使用Python3.10，仍然可以通过指定高版本的Python创建虚拟环境，安装完成后可以通过命令conda search python 查看虚拟环境支持的版本\n安装Miniconda 基本一路Next按钮，以下几个步骤需注意\n安装类型，由于我的电脑叫PC，我选Just Me\n虽然是Mini版本，但是安装完成后占用的磁盘空间还是挺大，选其他盘\n高级选项\n第一个复选框是创建开始菜单（觉得用处不大，保持默认） 第二个复选框是添加软件的环境变量，红字已经提示不推荐并列明了原因，也可以不勾后面自己手动去添加环境变量 第三个复选框是指定Python3.10为默认版本，相当于给电脑安装Python，所以如果在安装Miniconda前安装了Python，原先安装的就用不到了，可删；安装完成后Python的路径在minicoda3路径下；如果你不是这重装系统的情况，建议先把原来使用的全局环境或虚拟环境导出requirements.txt（pip freeze \u0026gt; requirements.txt），以便于恢复全局环境或虚拟环境 设置Miniconda 这是清华开源软件镜像站的一个网页，Anaconda 镜像使用帮助https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\n我看了一下目前用不到这些内容，conda软件自带包管理（它本身就是管理），例如\n安装包： conda install package_name 安装满足依赖关系的最新版本的包 conda install package_name=x.x 安装指定版本的包 pip install netmiko==3.4.0 安装指定版本的包 pip install netmiko\u0026gt;=3.4.0 安装指定版本及以上的包 卸载包： conda uninstall xxx，conda remove xxx pip uninstall SomePackage 我还是习惯用pip命令，但是还是照着网页的说明操作了，也不知道为什么\n基本使用 查看全局的Python版本和Python路径\nD:\\\u0026gt;python -V Python 3.10.13 D:\\\u0026gt;where python D:\\miniconda3\\python.exe 结果显示当前的Python版本是3.10.13，安装路径是D:\\miniconda3\\python.exe，以上输出表明安装完成\n查看conda信息，命令：conda info\n结果显示 package cache和 envs directories的路径在 D:\\miniconda3\\， package cache是缓存已下载的包文件，envs directories是存放虚拟环境文件\n创建一个名称为pyqt-base的虚拟环境（指定Python版本3.8，默认安装3.8的最高版本，也可以指定具体的版本如python=3.8.8）\nD:\\\u0026gt;conda create -n pyqt-base python=3.8 Channels: - defaults Platform: win-64 Collecting package metadata (repodata.json): done Solving environment: done ## Package Plan ## environment location: D:\\miniconda3\\envs\\pyqt-base added / updated specs: - python=3.8 The following packages will be downloaded: package | build ---------------------------|----------------- ca-certificates-2023.12.12 | haa95532_0 127 KB defaults pip-23.3.1 | py38haa95532_0 2.8 MB defaults python-3.8.18 | h1aa4202_0 20.5 MB defaults setuptools-68.2.2 | py38haa95532_0 933 KB defaults sqlite-3.41.2 | h2bbff1b_0 894 KB defaults vc-14.2 | h21ff451_1 8 KB defaults wheel-0.41.2 | py38haa95532_0 126 KB defaults ------------------------------------------------------------ Total: 25.3 MB The following NEW packages will be INSTALLED: ca-certificates anaconda/pkgs/main/win-64::ca-certificates-2023.12.12-haa95532_0 libffi anaconda/pkgs/main/win-64::libffi-3.4.4-hd77b12b_0 openssl anaconda/pkgs/main/win-64::openssl-3.0.13-h2bbff1b_0 pip anaconda/pkgs/main/win-64::pip-23.3.1-py38haa95532_0 python anaconda/pkgs/main/win-64::python-3.8.18-h1aa4202_0 setuptools anaconda/pkgs/main/win-64::setuptools-68.2.2-py38haa95532_0 sqlite anaconda/pkgs/main/win-64::sqlite-3.41.2-h2bbff1b_0 vc anaconda/pkgs/main/win-64::vc-14.2-h21ff451_1 vs2015_runtime anaconda/pkgs/main/win-64::vs2015_runtime-14.27.29016-h5e58377_2 wheel anaconda/pkgs/main/win-64::wheel-0.41.2-py38haa95532_0 Proceed ([y]/n)? y Downloading and Extracting Packages: Preparing transaction: done Verifying transaction: done Executing transaction: done # # To activate this environment, use # # $ conda activate pyqt-base # # To deactivate an active environment, use # # $ conda deactivate D:\\\u0026gt; 命令：conda create -n pyqt-base python=3.8\n虚拟环境查看\nD:\\\u0026gt;conda activate pyqt-base (pyqt-base) D:\\\u0026gt;python -V Python 3.8.18 (pyqt-base) D:\\\u0026gt;pip list Package Version ---------- ------- pip 23.3.1 setuptools 68.2.2 wheel 0.41.2 (pyqt-base) D:\\\u0026gt; 结果显示Python版本为Python 3.8.18，已安装的包有三个，窗口的提示符行前面多了虚拟环境的名称。\nconda设置全局pip国内源\n(pyqt-base) D:\\\u0026gt;pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple Writing to C:\\Users\\xxx\\AppData\\Roaming\\pip\\pip.ini (pyqt-base) D:\\\u0026gt;pip config list global.index-url=\u0026#39;https://pypi.tuna.tsinghua.edu.cn/simple\u0026#39; (pyqt-base) D:\\\u0026gt; 结果显示，在C盘的C:\\Users\\xxx\\AppData\\Roaming\\pip\\创建了一个pip.ini文件，查看配置可以看到对应配置\n在虚拟环境下安装pyqt5\n(pyqt-base) D:\\\u0026gt;pip install pyqt5 Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple Collecting pyqt5 Downloading https://pypi.tuna.tsinghua.edu.cn/packages/ca/ac/596e8ca16fd0634542d874c0d79219fc527ea7de73a5000092f60ecbf6e9/PyQt5-5.15.10-cp37-abi3-win_amd64.whl (6.8 MB) ---------------------------------------- 6.8/6.8 MB 3.3 MB/s eta 0:00:00 Collecting PyQt5-sip\u0026lt;13,\u0026gt;=12.13 (from pyqt5) Downloading https://pypi.tuna.tsinghua.edu.cn/packages/88/cd/dd21cdb92d053ca71c02c75ab7bd32874b82b33bef61d6d70b5d898e684b/PyQt5_sip-12.13.0-cp38-cp38-win_amd64.whl (78 kB) ---------------------------------------- 78.3/78.3 kB 189.0 kB/s eta 0:00:00 Collecting PyQt5-Qt5\u0026gt;=5.15.2 (from pyqt5) Downloading https://pypi.tuna.tsinghua.edu.cn/packages/37/97/5d3b222b924fa2ed4c2488925155cd0b03fd5d09ee1cfcf7c553c11c9f66/PyQt5_Qt5-5.15.2-py3-none-win_amd64.whl (50.1 MB) ---------------------------------------- 50.1/50.1 MB 7.8 MB/s eta 0:00:00 Installing collected packages: PyQt5-Qt5, PyQt5-sip, pyqt5 Successfully installed PyQt5-Qt5-5.15.2 PyQt5-sip-12.13.0 pyqt5-5.15.10 (pyqt-base) D:\\\u0026gt;pip list Package Version ---------- ------- pip 23.3.1 PyQt5 5.15.10 PyQt5-Qt5 5.15.2 PyQt5-sip 12.13.0 setuptools 68.2.2 wheel 0.41.2 (pyqt-base) D:\\\u0026gt; 一些conda命令 Command Useage conda create -n myenv sqlite | python=x.x Create an environment containing the package sqlite or python conda remove -n myenv \u0026ndash;all Remove all packages from environment myenv and the environment itself conda env list List the Conda environments conda clean \u0026ndash;all Remove index cache, lock files, unused cache packages, tarballs, and logfiles conda clean \u0026ndash;i Remove index cache conda clean \u0026ndash;p Remove unused packages from writable package caches. WARNING: This does not check for packages installed using symlinks back to the package cache. conda search xxx Search for packages and display conda activate myenv To activate this environment conda deactivate To deactivate an active environment conda create -n env2 \u0026ndash;clone path/to/file/env1 Create an environment (env2) as a clone of an existing environment (env1) ","date":"2024-03-08T21:43:10Z","permalink":"https://kiraster.github.io/posts/f2cfb11.html/","title":"Miniconda安装使用（简单版）"},{"content":"谷歌浏览器由于特殊地区原因无法使用原生同步功能，之前也一直使用这个插件实现书签同步，本来用着也就没什么事\n重装系统后想着能从云端把书签恢复回来，奈何忘记备份floccus插件里面的加密密码了，而且是两台电脑都重装了，至此原先的书签彻底沦陷无法恢复，wc\n错误造成的后果已经无法挽回\n就写篇文记录一下floccus插件的安装使用过程\n下载安装插件 网址：https://floccus.org/download/\ngithub：https://github.com/floccusaddon/floccus/releases\n从网站中可以看到支持三大浏览器，我只用到谷歌的，其他两浏览器使用自带的同步功能\n如果不能从页面跳转后下载，自行想想办法（比如github,gitee）\n设置WebDAV 从你使用的各种网盘中找一个支持WebDAV协议的，我使用坚果云\n登陆坚果云网页版，导航栏右侧点击用户名称，点击账户信息\n选择安全选项，点击添加应用\n输入应用名称，生产密码\n创建.xbel文件上传坚果云 电脑本地创建一个.xbel后缀的文件，文件命名没硬性要求，建议使用英文且标明文件用途的文件名，我使用bookmarks.xbel。打开方式选记事本，输入以下内容后保存文件\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE xbel PUBLIC \u0026#34;+//IDN python.org//DTD XML Bookmark Exchange Language 1.0//EN//XML\u0026#34; \u0026#34;http://pyxml.sourceforge.net/topics/dtds/xbel.dtd\u0026#34;\u0026gt; \u0026lt;xbel version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;/xbel\u0026gt; 坚果云网页版新建一个文件夹Floccus_2024，把bookmarks.xbel文件上传至该文件夹\n设置floccus参数 谷歌浏览器找到已经安装好的floccus插件，点击图标，点击新建账户\n在要如何同步中选择WebDAV分享\n在要同步到哪个服务器中填写参数，参数在坚果云网页版-安全选项，两个密码，第一个是坚果云的应用密码，第二个加密密码，我搞忘记的就第二个\n填写书签路径，坚果云网页版中上传的.xbel文件路径，本地文件夹选书签栏\n设置同步间隔，同步策略，没特殊喜好保持默认即可\n创建完成\n点击floccus插件图标，查看有无报错信息，至此已完成所有设置\n测试同步功能 在谷歌浏览器手动添加书签，然后点击floccus的同步按钮\n再到坚果云网页版查看文件变化，从结果看已经添加了一个文件版本，由于使用了加密，将文件下载回本地打开查看会发现是类似乱码文件\n其它电脑同步 由于我还有另外的设备也使用谷歌浏览器，需要一并操作，可以手动操作重复上一步骤\n机智如我使用导入/导出 账户功能，在另外一台电脑的操作就不演示了，过程：安装插件\u0026ndash;导入\n","date":"2024-02-27T15:18:08Z","permalink":"https://kiraster.github.io/posts/1e210a39.html/","title":"使用floccus插件同步谷歌浏览器书签"},{"content":"在51cto博客https://blog.51cto.com/dashu666/2163481 看到达叔的这份MPLS排错练习题分享文章，心痒痒决定手搓玩一玩\nMPLS 环境如下图，现由于前面负责实施的工程师离职，留下烂尾工程，请按下面截图找出目前配置存在的错误并修复，要求项目部署完毕之后所有检查命令输出要和下面截图一致。 要求R7 和R8两个站点通信必须经过R6的全局处理、要求R6 的 vrfA 和 R7、R8能够直接通信\n同时要求交一份排除故障的文档。 要求在文档中指出配置错误的地方，以及产生的影响，解决的方案。 不能使用任何静态路由、不允许修改 R4、R5 的 VRF 配置、不允许修改 R6的BGP配置\n排查R1到10.1.1.2/32的MPLS标签转发问题 在R1上输入命令ping mpls ipv4 10.1.1.2/32 source 10.1.1.1，验证R1到10.1.1.2/32的MPLS标签转发过程问题存在\nR1#ping mpls ipv4 10.1.1.2/32 source 10.1.1.1 Sending 5, 100-byte MPLS Echos to 10.1.1.2/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. ..... Success rate is 0 percent (0/5) R1# 在R1上使用命令show mpls forwarding-table 查看LFIB\nR1#show mpls forwarding-table Local Outgoing Prefix Bytes Label Outgoing Next Hop Label Label or Tunnel Id Switched interface 102 Pop Label 10.1.1.3/32 0 Et0/0 13.1.1.3 103 304 10.1.1.2/32 0 Et0/0 13.1.1.3 104 307 10.1.1.5/32 0 Et0/0 13.1.1.3 105 306 10.1.1.4/32 0 Et0/0 13.1.1.3 106 No Label 10.6.6.6/32[V] 0 Et0/1.1 16.1.1.6 107 No Label 0.0.0.0/0[V] 0 Et0/1.2 16.1.2.6 108 No Label 10.6.6.6/32[V] 0 Et0/1.2 16.1.2.6 R1# 结果显示R1去往R2的10.1.1.2有出方向标签，下一步检查R3设备的LFIB\n在R3上使用命令show mpls forwarding-table 查看LFIB\nR3#sh mpls forwarding-table Local Outgoing Prefix Bytes Label Outgoing Next Hop Label Label or Tunnel Id Switched interface 300 No Label 13.1.1.0/24 0 drop 301 No Label 23.1.1.0/24 0 drop 302 No Label 34.1.1.0/24 0 drop 303 No Label 35.1.1.0/24 0 drop 304 No Label 10.1.1.2/32 0 drop 305 No Label 10.1.1.1/32 0 drop 306 No Label 10.1.1.4/32 0 drop 307 No Label 10.1.1.5/32 0 drop R3# 结果显示R3没有去往10.1.1.1/32和10.1.1.2/32的出方向标签，下一步检查R3上的LDP邻居关系\n在R3上使用命令show mpls ldp neighbor 查看LDP邻居\nR3#show mpls ldp neighbor Peer LDP Ident: 10.1.1.1:0; Local LDP Ident 10.1.1.3:0 TCP connection: 10.1.1.1.646 - 10.1.1.3.59329 State: Oper; Msgs sent/rcvd: 56/52; Downstream Up time: 00:37:37 LDP discovery sources: Ethernet0/0, Src IP addr: 13.1.1.1 Addresses bound to peer LDP Ident: 13.1.1.1 10.1.1.1 16.1.3.1 结果显示R3上有与R1的LDP邻居，没有与R2建立LDP邻居，下一步检查R3上LDP进程\n在R3上使用命令show mpls ldp discovery 查看LDP进程信息\nR3#show mpls ldp discovery Local LDP Identifier: 10.1.1.3:0 Discovery Sources: Interfaces: Ethernet0/0 (ldp): xmit/recv LDP Id: 10.1.1.1:0 Ethernet0/1 (ldp): xmit/recv LDP Id: 10.22.22.22:0; no route Ethernet0/2 (ldp): xmit Ethernet0/3 (ldp): xmit 结果显示R3使用10.1.1.3为LDP router-id与对端建立LDP邻居，在Ethernet0/1收到 LDP ID为10.22.22.22的LDP报文且提示没有路由到达，而Ethernet0/1连接的是R2，怀疑R2上手动指定了10.22.22.22为LDP的router-id或LDP自动选举了该地址作为router-id，且该地址没有宣告底层IGP协议；R3与R1能建立LDP邻居，下一步检查R3的cef特性是否启用\n在R3上使用用命令show ip cef 查看cef是否启用\nR3#show ip cef %IPv4 CEF not running R3# 结果显示R3没有启用cef特性，而FIB的形成依赖cef特性，因此需要启用设备的cef特性\n在R3上使用命令ip cef 启用cef\nR3(config)#ip cef 在R3上使用命令show mpls forwarding-table 查看LFIB\nR3#sh mpls forwarding-table Local Outgoing Prefix Bytes Label Outgoing Next Hop Label Label or Tunnel Id Switched interface 304 No Label 10.1.1.2/32 0 Et0/1 23.1.1.2 305 Pop Label 10.1.1.1/32 0 Et0/0 13.1.1.1 306 No Label 10.1.1.5/32 0 Et0/3 35.1.1.5 307 No Label 10.1.1.4/32 0 Et0/2 34.1.1.4 R3# 结果显示R3上已经有去往10.1.1.1/32的出方向标签，下一步检查R2的LDP配置\n在R上使用命令show mpls ldp discovery 查看LDP进程信息\nR2#show mpls ldp discovery Local LDP Identifier: 10.22.22.22:0 Discovery Sources: Interfaces: Ethernet0/1 (ldp): xmit/recv LDP Id: 10.1.1.3:0 R2# 结果显示R2使用10.22.22.22作为LDP的router-id，下一步检查R2上是否手动指定了10.22.22.22为LDP的router-id或LDP自动选举了该地址作为router-id\n在R2上使用命令show run | include router-id查看是否手动指定了LDP的router-id\nR2#show run | include router-id mpls ldp router-id Loopback1 force R2# 结果显示R2上手动指定了Loopback1接口地址为router-id，下一步查看R2的所有环回接口地址配置\n在R2上使用命令show ip interface brief | include Loopback 查看环回接口地址配置\nR2#show ip interface brief | include Loopback Loopback0 10.1.1.2 YES TFTP up up Loopback1 10.22.22.22 YES TFTP up up R2# 继续使用命令show running-config interface loopback 0 和 show running-config interface loopback 1 查看两个环回接口的配置\nR2#show running-config interface loopback 0 Building configuration... Current configuration : 82 bytes ! interface Loopback0 ip address 10.1.1.2 255.255.255.0 ip ospf 110 area 0 end R2#show running-config interface loopback 1 Building configuration... Current configuration : 67 bytes ! interface Loopback1 ip address 10.22.22.22 255.255.255.255 end R2# 综合以上结果显示，R2使用了手动设置LDP的router-id，这样手动指定router-id的配置本身没有问题，然而Loopback1并没有宣告进OSPF 110 进程，导致R3上没有10.22.22.22/32的路由，双方不能形成LDP邻居关系；\nLDP邻居关系的建立是标签相互学习的的前提，需要解决R2和R3的LDP邻居建立问题\n解决方案：\n在R3使用命令手动指定Loopback0接口为LDP的router-id\nR2(config)#mpls ldp router-id Loopback0 force 从命令show running-config interface loopback 0查看到的结果显示Loopback0配置24位掩码的地址，在ospf网络中思科路由器会默认认为环回接口的ospf网络类型为LOOPBACK，无论环回接口是否配置32位掩码地址都会以32位掩码地址宣告进ospf进程中\nR2本地LDP标签分配会为10.1.1.0/24分配标签，并不会为R2上不存在的10.1.1.2/32分配标签，R3虽然本地为10.1.1.2/32分配的本地标签，但是没有从R2上学习到10.1.1.2/32的标签\n解决方案如下\nR2上修改Loopback0的地址掩码为32位掩码\nR2(config)#interface loopback 0 R2(config-if)# ip address 10.1.1.2 255.255.255.255 R2(config-if)# 在R1上输入命令ping mpls ipv4 10.1.1.2/32 source 10.1.1.1，验证R1到10.1.1.2/32的MPLS标签转发过程问题是否存在\nR1#ping mpls ipv4 10.1.1.2/32 source 10.1.1.1 Sending 5, 100-byte MPLS Echos to 10.1.1.2/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 38/138/181 ms R1# 结果显示R1到10.1.1.2/32的MPLS标签转发过程问题已经解决\n排查MPLS网络中其他设备标签转发问题 在上一步骤中在R3查看到没有R4和R5的LDP邻居，MPLS网络中IGP网络的标签转发出现问题，客户CE设备流量进入MPLS网络将不能转发到远端目的地。\n检查R4的LDP配置\nR4上使用show mpls ldp discovery 检查LDP进程\nR4#show mpls ldp discovery R4# 结果显示没有信息，下一步检查接口是否启用mpls ip和是否全局启用mpls ip\nR4上使用show mpls interfaces 检查LDP接口信息\nR4#show mpls interfaces Interface IP Tunnel BGP Static Operational R4# 结果显示R4的Ethernet0/2接口没有启用mpls ip，下一步在R4将接口启用mpls ip\n在R4上使用命令mpls ip将ethernet 0/2启用LDP\nR4(config)#interface ethernet 0/2 R4(config-if)#mpls ip R4(config-if)# *Jan 30 17:52:31.200: %LDP-5-NBRCHG: LDP Neighbor 10.1.1.3:0 (1) is UP R4(config-if)# 结果显示R4与10.1.1.3建立LDP邻居，下一步检查R4是否学习到MPLS网络中其他设备的出接口标签\n在R4上使用命令show mpls forwarding-table 查看FLIB\nR4#show mpls forwarding-table Local Outgoing Prefix Bytes Label Outgoing Next Hop Label Label or Tunnel Id Switched interface 400 305 10.1.1.1/32 0 Et0/2 34.1.1.3 401 302 10.1.1.2/32 0 Et0/2 34.1.1.3 402 Pop Label 10.1.1.3/32 0 Et0/2 34.1.1.3 403 306 10.1.1.5/32 0 Et0/2 34.1.1.3 R4# 结果显示R4上有到MPLS网络中其他设备的出接口标签\n检查R5的LDP配置\n在R5上使用命令show mpls ldp discovery 检查LDP进程\nR5#show mpls ldp discovery Local LDP Identifier: 10.1.1.5:0 Discovery Sources: Interfaces: Ethernet0/3 (tdp): xmit R5# 结果显示R5的Ethernet0/3使用标签协议为tdp，而R3上使用的是LDP协议，下一步修改R5使用LDP协议\n在R5上使用命令mpls label protocol ldp 修改标签协议为LDP\nR5(config)#mpls label protocol ldp R5(config)# *Jan 30 18:07:49.748: %LDP-5-NBRCHG: LDP Neighbor 10.1.1.3:0 (1) is UP R5(config)# 结果显示在R5上修改标签协议后已经和10.1.1.3建立了邻居，下一步检查R5是否学习到MPLS网络中其他设备的出接口标签\n在R5上使用命令show mpls forwarding-table 查看LFIB\nR5#show mpls forwarding-table Local Outgoing Prefix Bytes Label Outgoing Next Hop Label Label or Tunnel Id Switched interface 501 307 10.1.1.4/32 0 Et0/3 35.1.1.3 502 Pop Label 10.1.1.3/32 0 Et0/3 35.1.1.3 503 302 10.1.1.2/32 0 Et0/3 35.1.1.3 504 305 10.1.1.1/32 0 Et0/3 35.1.1.3 R5# 结果显示R5上有到MPLS网络中其他设备的出接口标签\n检查各PE设备环回接口之间的标签转发是否正常\nR1#ping mpls ipv4 10.1.1.2/32 source 10.1.1.1 Sending 5, 100-byte MPLS Echos to 10.1.1.2/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 113/170/211 ms R1#ping mpls ipv4 10.1.1.3/32 source 10.1.1.1 Sending 5, 100-byte MPLS Echos to 10.1.1.3/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 53/214/497 ms R1#ping mpls ipv4 10.1.1.4/32 source 10.1.1.1 Sending 5, 100-byte MPLS Echos to 10.1.1.4/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 144/193/312 ms R1#ping mpls ipv4 10.1.1.5/32 source 10.1.1.1 Sending 5, 100-byte MPLS Echos to 10.1.1.5/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 166/227/293 ms R1# R2#ping mpls ipv4 10.1.1.1/32 source 10.1.1.2 Sending 5, 100-byte MPLS Echos to 10.1.1.1/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 81/167/201 ms R2#ping mpls ipv4 10.1.1.3/32 source 10.1.1.2 Sending 5, 100-byte MPLS Echos to 10.1.1.3/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 69/144/169 ms R2#ping mpls ipv4 10.1.1.4/32 source 10.1.1.2 Sending 5, 100-byte MPLS Echos to 10.1.1.4/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 47/205/442 ms R2#ping mpls ipv4 10.1.1.5/32 source 10.1.1.2 Sending 5, 100-byte MPLS Echos to 10.1.1.5/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 26/146/196 ms R2# R3#ping mpls ipv4 10.1.1.1/32 source 10.1.1.3 Sending 5, 100-byte MPLS Echos to 10.1.1.1/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 186/201/231 ms R3#ping mpls ipv4 10.1.1.2/32 source 10.1.1.3 Sending 5, 100-byte MPLS Echos to 10.1.1.2/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 191/218/281 ms R3#ping mpls ipv4 10.1.1.4/32 source 10.1.1.3 Sending 5, 100-byte MPLS Echos to 10.1.1.4/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 192/201/213 ms R3#ping mpls ipv4 10.1.1.5/32 source 10.1.1.3 Sending 5, 100-byte MPLS Echos to 10.1.1.5/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 189/224/314 ms R3# R4#ping mpls ip 10.1.1.1/32 source 10.1.1.4 Sending 5, 100-byte MPLS Echos to 10.1.1.1/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 187/221/309 ms R4#ping mpls ip 10.1.1.2/32 source 10.1.1.4 Sending 5, 100-byte MPLS Echos to 10.1.1.2/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 187/224/273 ms R4#ping mpls ip 10.1.1.3/32 source 10.1.1.4 Sending 5, 100-byte MPLS Echos to 10.1.1.3/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 193/201/210 ms R4#ping mpls ip 10.1.1.5/32 source 10.1.1.4 Sending 5, 100-byte MPLS Echos to 10.1.1.5/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 193/216/230 ms R4# R5#ping mpls ip 10.1.1.1/32 source 10.1.1.5 Sending 5, 100-byte MPLS Echos to 10.1.1.1/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 64/177/230 ms R5#ping mpls ip 10.1.1.2/32 source 10.1.1.5 Sending 5, 100-byte MPLS Echos to 10.1.1.2/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 103/213/464 ms R5#ping mpls ip 10.1.1.3/32 source 10.1.1.5 Sending 5, 100-byte MPLS Echos to 10.1.1.3/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 62/154/187 ms R5#ping mpls ip 10.1.1.4/32 source 10.1.1.5 Sending 5, 100-byte MPLS Echos to 10.1.1.4/32, timeout is 2 seconds, send interval is 0 msec: Codes: \u0026#39;!\u0026#39; - success, \u0026#39;Q\u0026#39; - request not sent, \u0026#39;.\u0026#39; - timeout, \u0026#39;L\u0026#39; - labeled output interface, \u0026#39;B\u0026#39; - unlabeled output interface, \u0026#39;D\u0026#39; - DS Map mismatch, \u0026#39;F\u0026#39; - no FEC mapping, \u0026#39;f\u0026#39; - FEC mismatch, \u0026#39;M\u0026#39; - malformed request, \u0026#39;m\u0026#39; - unsupported tlvs, \u0026#39;N\u0026#39; - no label entry, \u0026#39;P\u0026#39; - no rx intf label prot, \u0026#39;p\u0026#39; - premature termination of LSP, \u0026#39;R\u0026#39; - transit router, \u0026#39;I\u0026#39; - unknown upstream index, \u0026#39;X\u0026#39; - unknown return code, \u0026#39;x\u0026#39; - return code 0 Type escape sequence to abort. !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 173/278/642 ms R5# 结果显示R1，R2，R3，R4，R5的标签转发为正常状态\nMPLS优化\n手动指定LDP的router-id\nR1，R3，R4，R5的LDP router-id为自动选举，当后续在这些路由器上创建的IP地址比loopback 0地址大时，LDP进程重启或设备重启，这些设备将自动选举地址大的环回接口为router-id，而这些环回接口地址很可能没有宣告进OSPF 100 ，这会导致LDP邻居不能建立从而产生MPLS标签断裂问题\n在R1，R3，R4，R5上使用命令mpls ldp router-id Loopback0 force手动指定LDP的router-id\nR1(config)#mpls ldp router-id loopback 0 force R3(config)#mpls ldp router-id loopback 0 force R4(config)#mpls ldp router-id loopback 0 force R5(config)#mpls ldp router-id loopback 0 force R5上使用命令show running-config interface e 0/3查看Ethernet0/3接口配置\nR5#show running-config interface e 0/3 Building configuration... Current configuration : 182 bytes ! interface Ethernet0/3 ip address 35.1.1.5 255.255.255.0 ip ospf network point-to-point ip ospf demand-circuit ip ospf 110 area 0 duplex auto mpls propagate-cos mpls ip end R5# 结果显示该接口下配置了mpls propagate-cos，该命令用于在PE-CE接口的出口处启用，此命令从MPLS报头中的EXP值派生IP DSCP值，然后在IP报头中重写此值。由于拓扑中的MPLS网络没有配置QoS内容，删除该命令不会对现有网络造成影响\n在R5上使用命令no mpls propagate-cos 删除该配置\nR5(config)#interface ethernet 0/3 R5(config-if)#no mpls propagate-cos R5(config-if)# 排查R6，R7和R8的路由问题 要求R7 和R8两个站点通信必须经过R6的全局处理、要求R6 的 vrfA 和 R7、R8能够直接通信\n不能使用任何静态路由、不允许修改 R4、R5 的 VRF 配置、不允许修改 R6的BGP配置\n流量模型分析 要求R7 和R8两个站点通信必须经过R6的全局处理\n根据需求可以判断出这是一个HUB-SPOKE组网结构，R6为HUB，R7和R8为SPOKE PE学习到总部CE和分支CE的路由，然后通过MPLS VPNV4传递到对端PE，总部CE和分支CE再从PE学习路由 总部和分支同时使用BGP 200 AS号码，根据as-path防环原则，总部不会学习到分支路由，分支也不会学习到总部路由，需要在PE上设置as-override或在CE设备配置 allowas-in R7和R8处于BGP 200，且同时接入相同BGP 100 的不同PE，需要考虑R7和R8之间的不合理次优路径问题 排查步骤 排查R1，R4和R5是否学习到客户CE上的路由 排查R1，R4和R5是否能学习对应PE的路由 排查R7和R8是否存在次优路径 排查R1，R4和R5是否学习到客户CE上的路由 在R1上使用命令show bgp vpnv4 unicast all 查看VPNV4路由\nR1#show bgp vpnv4 unicast all BGP table version is 4, local router ID is 10.1.1.1 Status codes: s suppressed, d damped, h history, * valid, \u0026gt; best, i - internal, r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, x best-external, a additional-path, c RIB-compressed, t secondary path, Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path Route Distinguisher: 100:200 (default for vrf SPOKE) *\u0026gt; 0.0.0.0 16.1.2.6 0 200 i *\u0026gt; 10.6.6.6/32 16.1.2.6 0 0 200 i Route Distinguisher: 200:100 (default for vrf HUB) *\u0026gt; 10.6.6.6/32 16.1.1.6 0 0 200 i R1# 结果显示R1学习到了R6上的10.6.6.6/32路由，下一步检查R4和R5\n在R4上使用命令show bgp vpnv4 unicast all 查看VPNV4路由\nR4#show bgp vpnv4 unicast all BGP table version is 4, local router ID is 10.1.1.4 Status codes: s suppressed, d damped, h history, * valid, \u0026gt; best, i - internal, r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, x best-external, a additional-path, c RIB-compressed, t secondary path, Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path Route Distinguisher: 100:200 (default for vrf A) *\u0026gt; 10.7.7.7/32 47.1.1.7 0 0 200 i *\u0026gt;i 10.8.8.8/32 10.1.1.5 0 100 0 200 i R4# 结果显示R4上学习到R7和R8上的路由，下一步检查R3上的VPNV4路由\n在R3上使用命令show bgp vpnv4 unicast all 查看VPNV4路由\nR3#show bgp vpnv4 unicast all BGP table version is 18, local router ID is 10.1.1.3 Status codes: s suppressed, d damped, h history, * valid, \u0026gt; best, i - internal, r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, x best-external, a additional-path, c RIB-compressed, t secondary path, Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path Route Distinguisher: 100:200 *\u0026gt;i 0.0.0.0 10.1.1.1 0 100 0 200 i *\u0026gt;i 10.6.6.6/32 10.1.1.1 0 100 0 200 i *\u0026gt;i 10.7.7.7/32 10.1.1.4 0 100 0 200 i *\u0026gt;i 10.8.8.8/32 10.1.1.5 0 100 0 200 i Route Distinguisher: 200:100 *\u0026gt;i 10.6.6.6/32 10.1.1.1 0 100 0 200 i R3# 结果显示R3上能学习到R6，R7和R8的路由，这说明R3与R1，R4和R5的VPNV4邻居关系正常，怀疑是R1，R4和R5上的VRF RT配置有问题，下一步检查R1，R4和R5上的VRF RT配置\n在R1上使用命令\nR1#show running-config | section vrf ip vrf HUB rd 200:100 ip vrf SPOKE rd 100:200 ip vrf forwarding HUB ip vrf forwarding SPOKE address-family ipv4 vrf HUB neighbor 16.1.1.6 remote-as 200 neighbor 16.1.1.6 activate address-family ipv4 vrf SPOKE neighbor 16.1.2.6 remote-as 200 neighbor 16.1.2.6 activate R1# 结果显示R1上没有没有配置export RT和import RT，下一步查看R4和R5上的RT，然后在R1上配置RT\n在R4和R5上分别使用命令show running-config | section vrf 查看VRF配置\nR4#show running-config | section vrf vrf definition A rd 100:200 ! address-family ipv4 route-target export 47:47 route-target import 16:16 route-target import 26:26 route-target import 58:58 exit-address-family vrf forwarding A address-family ipv4 vrf A neighbor 47.1.1.7 remote-as 200 neighbor 47.1.1.7 activate R4# R5#show running-config | section vrf ip vrf A rd 100:200 route-target export 58:58 route-target import 16:16 route-target import 26:26 route-target import 47:47 ip vrf forwarding A address-family ipv4 vrf A neighbor 58.1.1.8 remote-as 200 neighbor 58.1.1.8 activate R5# 结果显示R4和R5上配置了RT，下一步需要在R1上添加RT配置\n在R1上使用命令route-target export/import ASN:nn配置RT\nR1(config)#ip vrf HUB R1(config-vrf)#route-target import 47:47 R1(config-vrf)#route-target import 58:58 R1(config)#ip vrf SPOKE R1(config-vrf)#route-target export 16:16 R1(config-vrf)# 在R1上使用命令show bgp vpnv4 unicast all查看VPNV4路由\nR1#show bgp vpnv4 unicast all BGP table version is 10, local router ID is 10.1.1.1 Status codes: s suppressed, d damped, h history, * valid, \u0026gt; best, i - internal, r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, x best-external, a additional-path, c RIB-compressed, t secondary path, Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path Route Distinguisher: 100:200 (default for vrf SPOKE) *\u0026gt; 0.0.0.0 16.1.2.6 0 200 i *\u0026gt; 10.6.6.6/32 16.1.2.6 0 0 200 i *\u0026gt;i 10.7.7.7/32 10.1.1.4 0 100 0 200 i *\u0026gt;i 10.8.8.8/32 10.1.1.5 0 100 0 200 i Route Distinguisher: 200:100 (default for vrf HUB) *\u0026gt; 10.6.6.6/32 16.1.1.6 0 0 200 i *\u0026gt;i 10.7.7.7/32 10.1.1.4 0 100 0 200 i *\u0026gt;i 10.8.8.8/32 10.1.1.5 0 100 0 200 i R1# 结果显示在配置RT后，R1可以学习到R4和R5传递过来的路由\n在R4和R5上分别使用命令show bgp vpnv4 unicast all查看VPNV4路由\nR4#show bgp vpnv4 unicast all BGP table version is 8, local router ID is 10.1.1.4 Status codes: s suppressed, d damped, h history, * valid, \u0026gt; best, i - internal, r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, x best-external, a additional-path, c RIB-compressed, t secondary path, Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path Route Distinguisher: 100:200 (default for vrf A) *\u0026gt;i 0.0.0.0 10.1.1.1 0 100 0 200 i *\u0026gt;i 10.6.6.6/32 10.1.1.1 0 100 0 200 i *\u0026gt; 10.7.7.7/32 47.1.1.7 0 0 200 i *\u0026gt;i 10.8.8.8/32 10.1.1.5 0 100 0 200 i R4# R5#show bgp vpnv4 unicast all BGP table version is 8, local router ID is 10.1.1.5 Status codes: s suppressed, d damped, h history, * valid, \u0026gt; best, i - internal, r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, x best-external, a additional-path, c RIB-compressed, t secondary path, Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path Route Distinguisher: 100:200 (default for vrf A) *\u0026gt;i 0.0.0.0 10.1.1.1 0 100 0 200 i *\u0026gt;i 10.6.6.6/32 10.1.1.1 0 100 0 200 i *\u0026gt;i 10.7.7.7/32 10.1.1.4 0 100 0 200 i *\u0026gt; 10.8.8.8/32 58.1.1.8 0 0 200 i R5# 结果显示R1，R4和R5上都学习到了PE传递过来的VPNV4路由，下一步检查R6，R7和R8上的路由学习情况\n在R6，R7和R8上分布使用命令show ip route bgp 查看bgp路由学习情况\nR6#show ip route bgp Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is not set 6.0.0.0/32 is subnetted, 1 subnets B 6.6.6.6 [20/0] via 16.1.3.1, 00:31:13 R6# R7#sh ip route bgp Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is not set R7# R8#sh ip route b Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is not set R8# 结果显示，R6，R7和R8上没有从PE上学习的路由不符合要求，下一步检查PE和CE上是否配置as-override和 allowas-in\n在PE和CE设备上使用命令show running-config | include as-override和show running-config | include allowas-in 检查设备是否设置了as-override和 allowas-in\nR1#show running-config | include as-override R1#show running-config | include allowas-in R1# 结果显示R上没有配置as-override和 allowas-in，经检查R1，R4，R5，R7，R8均没有设置这两项参数\n在当前组网情况下，有两种解决方案\n方案一：在R1，R4和R5上针对CE的BGP邻居设置as-override\n方案二：在R1上针对CE的BGP邻居设置as-override，在R7和R8上针对PE的BGP邻居设置allowas-in\n结合组网情况，本次使用方案一，下一步在R1，R4和R5上针对CE的BGP邻居设置as-override\n在R1，R4和R5上使用命令neighbor x.x.x.x as-override\nR1(config)#router bgp 100 R1(config-router)# address-family ipv4 vrf HUB R1(config-router-af)# neighbor 16.1.1.6 as-override R1(config-router-af)#exit R1(config-router)# address-family ipv4 vrf SPOKE R1(config-router-af)# neighbor 16.1.2.6 as-override R1(config-router-af)# R4(config)#router bgp 100 R4(config-router)# address-family ipv4 vrf A R4(config-router-af)# neighbor 47.1.1.7 as-override R4(config-router-af)# R5(config)#router bgp 100 R5(config-router)# address-family ipv4 vrf A R5(config-router-af)# neighbor 58.1.1.8 as-override R5(config-router-af)# 在R6，R7和R8上分布使用命令show ip route bgp 查看bgp路由学习情况\nR6#show ip route bgp Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is not set 6.0.0.0/32 is subnetted, 1 subnets B 6.6.6.6 [20/0] via 16.1.3.1, 00:47:49 10.0.0.0/32 is subnetted, 3 subnets B 10.7.7.7 [20/0] via 16.1.1.1, 00:02:31 B 10.8.8.8 [20/0] via 16.1.1.1, 00:02:31 R6# R7#sh ip route bgp Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is 47.1.1.4 to network 0.0.0.0 B* 0.0.0.0/0 [20/0] via 47.1.1.4, 00:00:54 10.0.0.0/32 is subnetted, 3 subnets B 10.6.6.6 [20/0] via 47.1.1.4, 00:00:54 B 10.8.8.8 [20/0] via 47.1.1.4, 00:00:54 R7# R8#show ip route bgp Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is 58.1.1.5 to network 0.0.0.0 B* 0.0.0.0/0 [20/0] via 58.1.1.5, 00:00:51 10.0.0.0/32 is subnetted, 3 subnets B 10.6.6.6 [20/0] via 58.1.1.5, 00:00:51 B 10.7.7.7 [20/0] via 58.1.1.5, 00:00:51 R8# 结果显示R6，R7和R8已经从对应PE学习到路由，下一步traceroute测试R7到R8的10.8.8.8\nR7#traceroute 10.8.8.8 source loopback 0 numeric Type escape sequence to abort. Tracing the route to 10.8.8.8 VRF info: (vrf in name/id, vrf out name/id) 1 47.1.1.4 [AS 100] 1 msec 3 msec 1 msec 2 34.1.1.3 [AS 100] [MPLS: Labels 307/500 Exp 0] 5 msec 5 msec 6 msec 3 58.1.1.5 [AS 100] [MPLS: Label 500 Exp 0] 3 msec 3 msec 3 msec 4 58.1.1.8 [AS 100] 5 msec * 11 msec R7# 结果显示R7到R8的10.8.8.8连通性正常，但是不符合R7 和R8两个站点通信必须经过R6的全局处理设计要求\n按照拓扑图显示R7和R8应该建立IBGP邻居关系，给出的预配缺少配置，我猜这里考察的客户双CE接入同一AS不同PE的SOO防环知识点\n而添加IBGP配置后R7和R8互相通信又会走IBGP或IGP，又要配置策略阻止R7和R8的互相学习，我就不自己加戏了\n如果按照提供的预配来解决方案，只能在R4和R5编写route-map将R7和R8上的路由进行过滤，经过过滤后R4上不能学习到R8上的路由，R5上不能学习到R7的路由，最后结果符合设计要求\n下一步在R4和R5上配置route-map对路由进行过滤的解决方案\n在R4和R5上配置route-map对路由进行过滤\nR4(config)#ip prefix-list DENY-R8 permit 10.8.8.8/32 R4(config)#route-map DENY-R8 deny 10 R4(config-route-map)#match ip address prefix-list DENY-R8 R4(config-route-map)#route-map DENY-R8 permit 20 R4(config-route-map)#exit R4(config)#router bgp 100 R4(config-router)#address-family vpnv4 unicast R4(config-router-af)#neighbor 10.1.1.3 route-map DENY-R8 in R4(config-router-af)# R5(config)#ip prefix-list DENY-R7 permit 10.7.7.7/32 R5(config)#route-map DENY-R7 deny 10 R5(config-route-map)#match ip address prefix-list DENY-R7 R5(config-route-map)#route-map DENY-R7 permit 20 R5(config-route-map)#exit R5(config)#router bgp 100 R5(config-router)#address-family vpnv4 unicast R5(config-router-af)#nei 10.1.1.3 route-map DENY-R7 in R5(config-router-af)# 在R4和R5上分别使用命令show bgp vpnv4 unicast all查看VPNV4路由\nR4#show bgp vpnv4 unicast all BGP table version is 10, local router ID is 10.1.1.4 Status codes: s suppressed, d damped, h history, * valid, \u0026gt; best, i - internal, r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, x best-external, a additional-path, c RIB-compressed, t secondary path, Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path Route Distinguisher: 100:200 (default for vrf A) *\u0026gt;i 0.0.0.0 10.1.1.1 0 100 0 200 i *\u0026gt;i 10.6.6.6/32 10.1.1.1 0 100 0 200 i *\u0026gt; 10.7.7.7/32 47.1.1.7 0 0 200 i R4# R5#sh run | s route-m neighbor 10.1.1.3 route-map DENY-R7 in route-map DENY-R7 deny 10 match ip address prefix-list DENY-R7 route-map DENY-R7 permit 20 R5#show bgp vpnv4 unicast all BGP table version is 10, local router ID is 10.1.1.5 Status codes: s suppressed, d damped, h history, * valid, \u0026gt; best, i - internal, r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, x best-external, a additional-path, c RIB-compressed, t secondary path, Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path Route Distinguisher: 100:200 (default for vrf A) *\u0026gt;i 0.0.0.0 10.1.1.1 0 100 0 200 i *\u0026gt;i 10.6.6.6/32 10.1.1.1 0 100 0 200 i *\u0026gt; 10.8.8.8/32 58.1.1.8 0 0 200 i R5# 结果显示经过过滤后R4上不能学习到R8上的路由，R5上不能学习到R7的路由\n在R7和R8上分布使用命令show ip route bgp 查看bgp路由学习情况\nR7#show ip route bgp Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is 47.1.1.4 to network 0.0.0.0 B* 0.0.0.0/0 [20/0] via 47.1.1.4, 00:19:47 10.0.0.0/32 is subnetted, 2 subnets B 10.6.6.6 [20/0] via 47.1.1.4, 00:19:47 R7# R8#show ip route bgp Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is 58.1.1.5 to network 0.0.0.0 B* 0.0.0.0/0 [20/0] via 58.1.1.5, 00:19:20 10.0.0.0/32 is subnetted, 2 subnets B 10.6.6.6 [20/0] via 58.1.1.5, 00:19:20 R8# 结果显示R7和R8不再通过PE学习到对端的路由，下一步traceroute测试R7到R8的10.8.8.8\n在R7上使用命令traceroute 10.8.8.8 source loopback 0 numeric 进行traceroute测试\nR7#traceroute 10.8.8.8 source loopback 0 numeric Type escape sequence to abort. Tracing the route to 10.8.8.8 VRF info: (vrf in name/id, vrf out name/id) 1 47.1.1.4 [AS 100] 1 msec 2 msec 1 msec 2 34.1.1.3 [AS 100] [MPLS: Labels 306/106 Exp 0] 18 msec 5 msec 5 msec 3 16.1.2.1 [AS 100] [MPLS: Label 106 Exp 0] 5 msec 6 msec 5 msec 4 16.1.2.6 [AS 100] 6 msec 5 msec 5 msec 5 16.1.1.1 [AS 100] 5 msec 5 msec 6 msec 6 13.1.1.3 [AS 100] [MPLS: Labels 307/500 Exp 0] 10 msec 14 msec 11 msec 7 58.1.1.5 [AS 100] [MPLS: Label 500 Exp 0] 10 msec 9 msec 10 msec 8 58.1.1.8 [AS 100] 10 msec * 14 msec R7# 结果显示符合设计要求，R7以loopback 0 测试到10.8.8.8 的路径从R4进入MPLS网络到达R6再穿过MPLS网络到底R8，数据流量穿越MPLS网络中的标签值不符合截图输出没有影响,这是由于设备本地自主分配然后LDP邻居学习到的\n排查CE路由表未完全学习R6上路由 经过前面步骤的排查，R1，R3，R4，R5，R6，R7和R8并没有学习到10.66.66.66和26.1.1.0的路由，下一步在R2上检查是否通过S1/1接口学习到R6的路由条目\n在R2上使用命令show ip route vrf A查看路由表\nR2#show ip route vrf A Routing Table: A Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is not set R2# 结果显示R2上没有学习到R6的路由，且连直连接口路由都没有，下一步检查R2的S1/1接口配置\n在R2上使用命令show running-config interface serial 1/1查看接口配置\nR2#show running-config interface serial 1/1 Building configuration... Current configuration : 169 bytes ! interface Serial1/1 ip vrf forwarding A ip address 26.1.1.2 255.255.255.0 encapsulation ppp ip ospf 1 area 0 ppp authentication chap serial restart-delay 0 end R2# 结果显示该接口已经划入VRF A，启用了OSPF 1，并且配置了chap认证，下一步检查S1/1接口状态\n在R2上使用命令show interfaces serial 1/1检查S1/1接口状态\nR2#show interfaces serial 1/1 Serial1/1 is up, line protocol is down Hardware is M4T Internet address is 26.1.1.2/24 MTU 1500 bytes, BW 1544 Kbit/sec, DLY 20000 usec, reliability 255/255, txload 1/255, rxload 1/255 Encapsulation PPP, LCP Closed, crc 16, loopback not set Keepalive set (10 sec) Restart-Delay is 0 secs Last input 00:00:00, output 00:00:00, output hang never Last clearing of \u0026#34;show interface\u0026#34; counters 00:15:24 Input queue: 0/75/0/0 (size/max/drops/flushes); Total output drops: 0 Queueing strategy: fifo Output queue: 0/40 (size/max) 5 minute input rate 0 bits/sec, 0 packets/sec 5 minute output rate 0 bits/sec, 0 packets/sec 1689 packets input, 33540 bytes, 0 no buffer Received 0 broadcasts (0 IP multicasts) 0 runts, 0 giants, 0 throttles 0 input errors, 0 CRC, 0 frame, 0 overrun, 0 ignored, 0 abort 2102 packets output, 45387 bytes, 0 underruns 0 output errors, 0 collisions, 410 interface resets 0 unknown protocol drops 0 output buffer failures, 0 output buffers swapped out 410 carrier transitions DCD=up DSR=up DTR=up RTS=up CTS=up R2# 结果显示line protocol is down ，该结果显示链路层故障，联系到上一步骤中查看到ppp封装和chap认证，怀疑是认证出现了问题，下一步检查R6和R1之间的串口链路认证\n在R2上使用debug ppp authentication 查看ppp认证交互信息，同时准备命令no debug all 随时终止debug消息\nR2#debug ppp authentication PPP authentication debugging is on R2# *Jan 31 14:21:10.131: Se1/1 PPP: Using default call direction *Jan 31 14:21:10.131: Se1/1 PPP: Treating connection as a dedicated line *Jan 31 14:21:10.131: Se1/1 PPP: Session handle[B200026C] Session id[620] *Jan 31 14:21:10.168: Se1/1 CHAP: O CHALLENGE id 1 len 23 from \u0026#34;R2\u0026#34; *Jan 31 14:21:10.183: Se1/1 CHAP: I RESPONSE id 1 len 23 from \u0026#34;R6\u0026#34; *Jan 31 14:21:10.183: Se1/1 PPP: Sent CHAP LOGIN Request *Jan 31 14:21:10.183: Se1/1 PPP: Received LOGIN Response FAIL *Jan 31 14:21:10.183: Se1/1 CHAP: O FAILURE id 1 len 25 msg is \u0026#34;Authentication failed\u0026#34; R2# *Jan 31 14:21:12.223: Se1/1 PPP: Using default call direction *Jan 31 14:21:12.223: Se1/1 PPP: Treating connection as a dedicated line *Jan 31 14:21:12.223: Se1/1 PPP: Session handle[FD00026D] Session id[621] *Jan 31 14:21:12.251: Se1/1 CHAP: O CHALLENGE id 1 len 23 from \u0026#34;R2\u0026#34; *Jan 31 14:21:12.268: Se1/1 CHAP: I RESPONSE id 1 len 23 from \u0026#34;R6\u0026#34; *Jan 31 14:21:12.268: Se1/1 PPP: Sent CHAP LOGIN Request *Jan 31 14:21:12.268: Se1/1 PPP: Received LOGIN Response FAIL *Jan 31 14:21:12.268: Se1/1 CHAP: O FAILURE id 1 len 25 msg is \u0026#34;Authentication failed\u0026#34; R2#no debu *Jan 31 14:21:14.329: Se1/1 PPP: Using default call direction *Jan 31 14:21:14.329: Se1/1 PPP: Treating connection as a dedicated line *Jan 31 14:21:14.329: Se1/1 PPP: Session handle[E600026E] Session id[622] *Jan 31 14:21:14.367: Se1/1 CHAP: O CHALLENGE id 1 len 23 from \u0026#34;R2\u0026#34; *Jan 31 14:21:14.385: Se1/1 CHAP: I RESPONSE id 1 len 23 from \u0026#34;R6\u0026#34; *Jan 31 14:21:14.385: Se1/1 PPP: Sent CHAP LOGIN Request *Jan 31 14:21:14.385: Se1/1 PPP: Received LOGIN Response FAIL *Jan 31 14:21:14.385: Se1/1 CHAP: O FAILURE id 1 len 25 msg is \u0026#34;Authentication failed\u0026#34; R2#no debu R2#no debug all All possible debugging has been turned off R2# 结果显示S1/1接口Authentication failed，下一步检查R2和R6上的chap认证密码配置\n在R2和R6上使用命令show running-config | section user 检查用户名密码配置\nR2#show running-config | section user username R6 password 0 cisco R2# R6#show running-config | section user username R2 password 0 cisc0 R6# 结果显示两端密码不一致，虽然R6的S1/1接口配置了与R2相同的密码，但是思科路由器会优先使用全局配置的密码进行认证流程\n处理该认证失败故障有如下两种解决方案\n方案一：在R2上修改密码为cisc0\n方案二：在R6上修改密码为cisco\n本次故障排除采用方案一，在R2上使用命令username R6 password 0 cisc0修改密码\nR2(config)#username R6 password 0 cisc0 *Jan 31 15:08:27.909: %SYS-5-CONFIG_I: Configured from console by console *Jan 31 15:08:27.926: %LINEPROTO-5-UPDOWN: Line protocol on Interface Serial1/1, changed state to up *Jan 31 15:08:28.024: %OSPF-5-ADJCHG: Process 1, Nbr 10.66.66.66 on Serial1/1 from LOADING to FULL, Loading Done R2(config)# 结果显示修改密码后，S1/1的链路层协议UP，且R2与R6的OSPF邻居已经建立，下一步检查R2的路由学习情况\n在R2上使用命令show bgp vpnv4 unicast all 查看VPNV4路由标\nR2#show bgp vpnv4 unicast all BGP table version is 11, local router ID is 10.22.22.22 Status codes: s suppressed, d damped, h history, * valid, \u0026gt; best, i - internal, r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, x best-external, a additional-path, c RIB-compressed, t secondary path, Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path Route Distinguisher: 100:200 (default for vrf A) *\u0026gt; 10.66.66.66/32 26.1.1.6 65 32768 ? *\u0026gt; 26.1.1.0/24 0.0.0.0 0 32768 ? R2# 结果显示R2已经学习到R6的路由，且VRF A的路由已经重分布进BGP，下一步检查其他PE是否学习到R2的VPNV4路由\n在R4上使用命令show bgp vpnv4 unicast all 查看VPNV4路由\nR4#show bgp vpnv4 unicast all BGP table version is 10, local router ID is 10.1.1.4 Status codes: s suppressed, d damped, h history, * valid, \u0026gt; best, i - internal, r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, x best-external, a additional-path, c RIB-compressed, t secondary path, Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path Route Distinguisher: 100:200 (default for vrf A) *\u0026gt;i 0.0.0.0 10.1.1.1 0 100 0 200 i *\u0026gt;i 10.6.6.6/32 10.1.1.1 0 100 0 200 i *\u0026gt; 10.7.7.7/32 47.1.1.7 0 0 200 i R4# 结果显示R4没有学习到R2上的VPNV4路由，下一步检查R2的VRF RT配置\n在R2上使用命令show running-config | section vrf查看VRF配置\nR2#show running-config | section vrf ip vrf A rd 100:200 ip vrf forwarding A router ospf 1 vrf A redistribute bgp 100 subnets address-family ipv4 vrf A redistribute ospf 1 R2# 结果显示VRF A没有配置RT，下一步配置R2的RT\n在R2上使用命令route-target export/import ASN:nn配置RT\nR2(config)#ip vrf A R2(config-vrf)#route-target export 26:26 R2(config-vrf)#route-target import 16:16 R2(config-vrf)#route-target import 47:47 R2(config-vrf)#route-target import 58:58 R2(config-vrf)# 在R4上使用命令show bgp vpnv4 unicast all 查看VPNV4路由\nR4#show bgp vpnv4 unicast all BGP table version is 14, local router ID is 10.1.1.4 Status codes: s suppressed, d damped, h history, * valid, \u0026gt; best, i - internal, r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, x best-external, a additional-path, c RIB-compressed, t secondary path, Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path Route Distinguisher: 100:200 (default for vrf A) *\u0026gt;i 0.0.0.0 10.1.1.1 0 100 0 200 i *\u0026gt;i 10.6.6.6/32 10.1.1.1 0 100 0 200 i *\u0026gt; 10.7.7.7/32 47.1.1.7 0 0 200 i *\u0026gt;i 10.66.66.66/32 10.1.1.2 65 100 0 ? *\u0026gt;i 26.1.1.0/24 10.1.1.2 0 100 0 ? R4# 结果显示R4已经学习到R2上的VPNV4路由，下一步检查R6，R7和R8上的路由学习情况\n在R7和R8上使用命令show ip route bgp查看路由学习\nR7#show ip route bgp Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is 47.1.1.4 to network 0.0.0.0 B* 0.0.0.0/0 [20/0] via 47.1.1.4, 01:53:22 10.0.0.0/32 is subnetted, 3 subnets B 10.6.6.6 [20/0] via 47.1.1.4, 01:53:22 B 10.66.66.66 [20/0] via 47.1.1.4, 00:04:31 26.0.0.0/24 is subnetted, 1 subnets B 26.1.1.0 [20/0] via 47.1.1.4, 00:04:31 R7# R8#show ip route bgp Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is 58.1.1.5 to network 0.0.0.0 B* 0.0.0.0/0 [20/0] via 58.1.1.5, 01:53:11 10.0.0.0/32 is subnetted, 3 subnets B 10.6.6.6 [20/0] via 58.1.1.5, 01:53:11 B 10.66.66.66 [20/0] via 58.1.1.5, 00:04:51 26.0.0.0/24 is subnetted, 1 subnets B 26.1.1.0 [20/0] via 58.1.1.5, 00:04:51 R8# 结果显示R7和R8学习到了对应的路由条目，且符合要求\n下一步配置R1上的VRF RT，之前排查PE路由学习的时候没有添加针对R2的 RT import 配置\n在R1上使用命令route-target import ASN:nn配置RT\nR1(config)#ip vrf HUB R1(config-vrf)# route-target import 26:26 R1(config-vrf)# 在R1上使用命令show bgp vpnv4 unicast all 查看VPNV4路由\nR1#show bgp vpnv4 unicast all BGP table version is 20, local router ID is 10.1.1.1 Status codes: s suppressed, d damped, h history, * valid, \u0026gt; best, i - internal, r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, x best-external, a additional-path, c RIB-compressed, t secondary path, Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path Route Distinguisher: 100:200 (default for vrf SPOKE) *\u0026gt; 0.0.0.0 16.1.2.6 0 200 i *\u0026gt; 10.6.6.6/32 16.1.2.6 0 0 200 i *\u0026gt;i 10.7.7.7/32 10.1.1.4 0 100 0 200 i *\u0026gt;i 10.8.8.8/32 10.1.1.5 0 100 0 200 i *\u0026gt;i 10.66.66.66/32 10.1.1.2 65 100 0 ? *\u0026gt;i 26.1.1.0/24 10.1.1.2 0 100 0 ? Route Distinguisher: 200:100 (default for vrf HUB) *\u0026gt; 10.6.6.6/32 16.1.1.6 0 0 200 i *\u0026gt;i 10.7.7.7/32 10.1.1.4 0 100 0 200 i *\u0026gt;i 10.8.8.8/32 10.1.1.5 0 100 0 200 i *\u0026gt;i 10.66.66.66/32 10.1.1.2 65 100 0 ? *\u0026gt;i 26.1.1.0/24 10.1.1.2 0 100 0 ? R1# 结果显示R1已经学习到R2的VPNV4路由条目，下一步检查R6是否学习到路由条目\n在R6上使用命令show ip route bgp查看路由学习\nR6#show ip route bgp Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is not set 6.0.0.0/32 is subnetted, 1 subnets B 6.6.6.6 [20/0] via 16.1.3.1, 02:30:57 10.0.0.0/32 is subnetted, 4 subnets B 10.7.7.7 [20/0] via 16.1.1.1, 02:30:45 B 10.8.8.8 [20/0] via 16.1.1.1, 02:30:45 B 10.66.66.66 [20/0] via 16.1.1.1, 00:01:57 26.0.0.0/24 is subnetted, 1 subnets B 26.1.1.0 [20/0] via 16.1.1.1, 00:01:57 R6# 结果显示R6已经学习到对应路由条目，且符合要求\n在R6上使用命令show ip route vrf A ospf查看路由\nR6#show ip route vrf A ospf Routing Table: A Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is not set R6# 结果显示没有路由条目，下一步在R2上检查是否把BGP路由重分布进VRF A 所在的路由协议\n在R2上使用命令sh run | s r o 查看路由重复分布\nR2#sh run | s r o router ospf 1 vrf A redistribute bgp 100 subnets router ospf 110 prefix-suppression R2# 结果显示已经将BGP路由重分布进OSPF 1进程\n能学习到R6的路由说明R2与R6的邻居建立没有问题，且在R2上没有发现针对R6的路由过滤，\n在R6和R2上发现使用划入VRF的接口进行互联，且将BGP重分布进ospf进程，这种组网情况要在PE上的ospf进程下启用vrf-lite\n思科的OSPF防环机制当绑定到 VRF 的 OSPF 进程在收到邻居的5类LSA或7类LSA会检查Tag，当Tag与VPN-TAG时，这些5类LSA或7类LSA不会参与SFP算法计算路由\n在R2使用命令capability vrf-lite 启用vrf-lite\nR2(config)# router ospf 1 R2(config-router)#capability vrf-lite R2(config-router)# *Jan 31 15:46:59.140: %OSPF-5-ADJCHG: Process 1, Nbr 10.66.66.66 on Serial1/1 from FULL to DOWN, Neighbor Down: Interface down or detached *Jan 31 15:46:59.204: %OSPF-5-ADJCHG: Process 1, Nbr 10.66.66.66 on Serial1/1 from LOADING to FULL, Loading Done R2(config-router)# 结果显示启用vrf-lite 后，R2与R6的ospf邻居重置，下一步检查R6是否学习到路由条目\n在R6上使用命令show ip route vrf A ospf查看路由\nR6#show ip route vrf A ospf Routing Table: A Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is not set 10.0.0.0/32 is subnetted, 4 subnets O E2 10.6.6.6 [110/1] via 26.1.1.2, 00:24:28, Serial1/1 O E2 10.7.7.7 [110/1] via 26.1.1.2, 00:24:28, Serial1/1 O E2 10.8.8.8 [110/1] via 26.1.1.2, 00:24:28, Serial1/1 R6# 结果显示R6与学习到对应路由条目，下一步在R2的OSPF 1 进程下发默认路由\n在R2上使用命令default-information originate 下发ospf默认路由\nR2(config)# router ospf 1 R2(config-router)#default-information originate R2(config-router)# 在R6上使用命令show ip route vrf A ospf查看路由\nR6#show ip route vrf A ospf Routing Table: A Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is 26.1.1.2 to network 0.0.0.0 O*E2 0.0.0.0/0 [110/1] via 26.1.1.2, 00:01:10, Serial1/1 10.0.0.0/32 is subnetted, 4 subnets O E2 10.6.6.6 [110/1] via 26.1.1.2, 00:29:54, Serial1/1 O E2 10.7.7.7 [110/1] via 26.1.1.2, 00:29:54, Serial1/1 O E2 10.8.8.8 [110/1] via 26.1.1.2, 00:29:54, Serial1/1 R6# 结果显示R6已经学习到默认路由，且所以OSPF路由条目符合要求\n在R6上使用命令traceroute vrf A 10.7.7.7 source loopback 1 numeric 跟踪路径\nR6#traceroute vrf A 10.7.7.7 source loopback 1 numeric Type escape sequence to abort. Tracing the route to 10.7.7.7 VRF info: (vrf in name/id, vrf out name/id) 1 26.1.1.2 [AS 100] 13 msec 16 msec 16 msec 2 23.1.1.3 [MPLS: Labels 304/405 Exp 0] 20 msec 21 msec 16 msec 3 47.1.1.4 [MPLS: Label 405 Exp 0] 14 msec 19 msec 16 msec 4 47.1.1.7 21 msec * 19 msec R6# 结果显示符合要求\n总结 这份拓扑中包含了MP-BGP的大部分知识点 完成MPLS网络的vpnv4邻居建立，接下来就靠VRF的RT控制接收和发送路由条目 熟悉查看vpnv4的路由表很重要 其实早几年我是玩过这个排错拓扑的，奈何脑子不够用学过等于又还回去了 不知道大家对这种学习过的技术，而工作中又接触不到这些项目，技术的知识点淡忘如何看待 欢迎“来电”来函探讨。 ","date":"2024-02-01T16:57:52Z","permalink":"https://kiraster.github.io/posts/464b24f1.html/","title":"MPLS排错练习题-故障排除"},{"content":"记录网神设备重置密码。\n网神 NSG 3600 防火墙重置密码 运行SecureCRT软件，新建连接。协议选择Serial，端口选择COM口。\n连接设备后，使用用户名：ngfw9753124680qwer 密码：ngfw9753124680qwer 登陆设备，出现 “Admin password has been reset successful, Please use admin login again !” 表明已重置默认密码为 !1fw@2soc#3vpn\nUsername:ngfw9753124680qwer Password: Admin password has been reset successful, Please use admin login again ! % Login invalid. Username:admin Password: 网页端登陆网神 NSG 3600 防火墙管理界面，https://x.x.x.x （端口号如已修改注意替换），使用默认密码登陆会提示修改密码。\n网神 SecSSL 3600 安全接入网关系统 V5.0 重置密码 该设备背部标签表示为：\n产品名称：网神SecSSL 3600安全接入网关系统 V5.0 产品型号：X1500-TY12 商品编码：X1500-TY12P-HW S/N:XXXXX 网神XXXXX公司 运行SecureCRT软件，新建连接。协议选择Serial，端口选择COM口。\n连接设备后，重启设备，在开机阶段按 Crtl+c 进入Monitor模式\nrestore admin 恢复admin管理员的密码，恢复后默认密码是 !1fw@2soc#3vpn\n点击Y 确认\nreload 重启设备\nWelcome to SecSSL Entering Monitor ********************************************** * * * Welcome to Monitor(v3.03) * * * ********************************************** Monitor\u0026gt;resto Monitor\u0026gt;restore admin default admin setting factory setting Monitor\u0026gt;restore admin Monitor\u0026gt;restore admin Restore default admin? (y/n):y Monitor\u0026gt;rel Monitor\u0026gt;reload Reload... Restarting system. 网页端登陆网神 SecSSL 3600 管理界面，https://x.x.x.x/admin 或 https://x.x.x.x ::4430/admin （端口号如已修改注意替换），使用默认密码登陆会提示修改密码。\n","date":"2023-12-01T09:46:59Z","permalink":"https://kiraster.github.io/posts/f36f6dd3.html/","title":"网神 NSG 3600 和网神 SecSSL 3600 重置密码"},{"content":"由于不想亲自动手打开某网站登陆然后签到，所以制作一个python脚本实现自动操作。\nSelenium官网链接： https://www.selenium.dev/ 官网介绍说主要用于自动化web应用程序的测试目的，但当然不限于此。无聊的基于web的管理任务也可以(也应该)自动化。\n当然也表示了：What you do with that power is entirely up to you.\n如标题所说，我也就想自动签到。\n安装 pip install selenium 如果这一步出现什么问题去查看官方文档\n当前日期（20230828）自动安装的版本是：selenium==4.11.2\n代码 网站URL和用户密码就不贴出来了\nfrom selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.chrome.options import Options from selenium.webdriver.chrome.service import Service # 添加option --headless 参数为不弹窗运行 options = Options() options.add_argument(\u0026#39;--headless\u0026#39;) # 4.6版本前需要指定路径，使用本地驱动 # 指定浏览器驱动路径，以Chrome为例，需要下载对应版本的ChromeDriver并指定其路径 # driver_path = \u0026#39;D:/xx/xx/chromedriver.exe\u0026#39; # 将路径替换为实际保存的ChromeDriver的路径 # service = Service(executable_path=driver_path) # driver = webdriver.Chrome(options=options, service=service) # driver = webdriver.Chrome(service=service) # 4.6版本之后使用如下代码, 当然使用上面代码指定路径也可以运行 service = Service() driver = webdriver.Chrome(options=options, service=service) try: # 打开指定网站登陆页面URL url = \u0026#39;https://www.xxx.com/login.html\u0026#39; driver.get(url) # 找到用户名和密码输入框 username_input = driver.find_element(By.ID, \u0026#39;user\u0026#39;) # 根据实际情况修改用户名输入框的定位方式 password_input = driver.find_element(By.ID, \u0026#39;password\u0026#39;) # 根据实际情况修改密码输入框的定位方式 # 清空输入框 username_input.clear() password_input.clear() # 输入用户名和密码 username_input.send_keys(\u0026#39;username\u0026#39;) password_input.send_keys(\u0026#39;password\u0026#39;) # 提交登录 login_button = driver.find_element(By.LINK_TEXT, \u0026#39;登录\u0026#39;) # 根据实际情况 按钮的定位方式 login_button.click() # 点击登录按钮 # 跳转到指定页面（签到页面的URL），如果签到按钮在登陆成功后跳转的页面可以跳过此步骤 qd_url = \u0026#39;https://www.xxx.com/xx.html\u0026#39; driver.get(qd_url) # 在跳转后的页面找到签到按钮并点击 qd_button =driver.find_element(By.LINK_TEXT, \u0026#39;签到\u0026#39;) # 根据实际情况修改签到按钮的定位方式 # qd_button = driver.find_element(By.LINK_TEXT, \u0026#39;退出\u0026#39;) # 根据实际情况修改签到按钮的定位方式 qd_button.click() # 根据网页弹出对话框确认是否完成操作，一般签到成功后都有一个弹窗，如果没有，可以定位是否有“已签到”对应的元素来判断 res_confirm = driver.find_element(By.ID, \u0026#39;tt-from\u0026#39;) if res_confirm: print(\u0026#39;DONE\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026#39;) else: print(\u0026#39;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;BAD\u0026#39;) except Exception as e: print(e) print(\u0026#39;OPS,ERROR\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026#39;) finally: # 关闭浏览器驱动 driver.quit() 注意 使用以下代码，需要本地能访问 https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json 该文件，然后访问 https://edgedl.me.gvt1.com 下载对应的 ChromeDriver\n# 4.6版本之后使用如下代码, 当然使用上面代码指定路径也可以运行 service = Service() driver = webdriver.Chrome(options=options, service=service) 如此说来，这种方式需要实时联网操作，对于本地内部使用不是很友好\n如本地内部使用，还是去下载对应版本的 ChromeDriver\n20230922 补充\n","date":"2023-08-28T01:15:53Z","permalink":"https://kiraster.github.io/posts/14423df7.html/","title":"使用Selenium实现登陆网站并签到"},{"content":"一个单位的无线网络要求内部员工和访客使用无线网络前进行认证\n内部员工账号认证通过后能同时访问内外网资源，访客账号认证通过后仅允许访问外网资源\n由于华为无线控制器内置portal认证的糟糕使用体验（无法实现MAC优先的portal认证），拟增加外置portal服务器\n华为和华三的软件方案报价令人xxx，一个字“贵”\n信锐的方案虽然也捆绑了硬件，但是鉴于之前的接触，服务还不错，而且还提供测试设备进行对接和功能验证测试，荐之\n对接 按照信锐社区的对接配置手册就可以完成基本对接\nhttp://bbs.sundray.com.cn/forum.php?mod=viewthread\u0026tid=8442 但是，在web界面点点点不是我的风格，写好脚本一把梭才符合我的气质[🉑]\n重点 根据【信锐控制器对接华为AC6005系列_V3.8.0.3.pdf】文档第2页，可以看到两行红色字提示\n但是，【SUNDRAY_NMC_3.10.0_20221203.pdf】NMC手册第170页也给出了“角色将会通过 RADIUS 报文中的 Class 字段，以字符串的形式返回给 RADIUS 客户端”，这就留下了可操作的空间\n华为控制器产品手册中的RADIUS属性说明 【无线接入控制器(AC和FIT AP) V200R022C00 产品文档】-【配置】-【配置指南（通过命令行）】-【用户接入与认证配置】-【AAA配置】-【AAA原理描述】-【RADIUS认证、授权和计费】-【RADIUS属性】\n华为ACL编号授权说明 https://support.huawei.com/enterprise/zh/doc/EDOC1000113778/f42e57ed RADIUS服务器上配置了ACL编号下发功能，则授权信息中含有下发的ACL编号，设备端根据下发的ACL编号匹配相应的ACL规则，对用户权限进行控制\nACL编号下发，使用的RADIUS属性为：(011)Filter-Id AC上支持接受的ACL编号取值范围为3000～3031 抓包分析信锐NMC返回的radius属性 首先在信锐NMC上配置角色，名称同华为无线控制器的配置ACL编号一致，只需填写名称，其他选项都不用\n# 华为无线控制器访客授权ACL示例，如要放行访客可以访问部分内网资源，按需修改 # 10.10.10.10 为信锐设备互联IP（不给看真实的，胡编一个） # acl number 3020 rule 5 permit ip destination 10.10.10.10 0 rule 10 deny ip destination 10.0.0.0 0.255.255.255 rule 15 deny ip destination 172.16.0.0 0.15.255.255 rule 20 deny ip destination 192.168.0.0 0.0.255.255 rule 25 permit ip # 在【WEB 认证策略】-【权限设定】-【使用规则】-添加【认证类型条件】满足条件后分配角色 3020 ，此步骤对应华为NCE中的【授权规则】和【授权结果】\n如下图，radius认证过程中，在信锐NMC返回给华为无线控制器的 Access-Accept 报文中，观察到Class属性中的值为 3020，正是在信锐NMC上配置的角色名称\n华为无线控制器配置radius属性转换 华为无线控制器RADIUS属性转换功能，属性转换主要是为了兼容不同厂商RADIUS属性定义的差别。\n在本次对接中，需要将信锐返回的radius Class属性转换成Filter-Id属性，这样就实现了华为系的授权ACL下发功能（已验证，好使）\n在RADIUS服务器模板视图下添加如下命令\nradius-server attribute translate radius-attribute translate Class Filter-Id receive 查看授权ACL 先根据无线终端MAC地址或IP地址查找出user-id，再执行以下命令\n[AC] display access-user user-id xxxxx …… …… Dynamic ACL ID(Effective) : 3020 …… …… 总结 对无线终端进行访问限制有多种方式如用户组向下绑定acl-id、流量模板、ACL，但是就这个场景只能基于用户做限制 通过使用华为无线控制器上的radius属性转换功能，完成Class对Filter-Id的转换，进而实现授权ACL下发 信锐无线设备中的授权是基于角色（猜的，没有看到信锐文档中的说明） 华为NCE中的授权规则和授权结果与信锐NMC中的规则和角色，基本一个意思，有些许区别，不重要 这个方法也是摸索出来，查阅了华为和信锐的手册，并在vmware虚拟机安装各种radius软件进行抓包检验 再吐槽一句，华为的NCE代理商开的价真尼玛高，仅安装NCE软件这一项服务就好几十个K 经此一役，可能要改写信锐对接手册中这一句话了（注：portal 服务器中的权限设定无法对无线用户生效，但对接 Aruba 时该角色名与 aruba设备上的认证后角色名必须保持一致才能认证通过） ","date":"2023-07-24T20:42:28Z","permalink":"https://kiraster.github.io/posts/c09d2b9c.html/","title":"信锐NMC对接华为AC实现授权ACL下发"},{"content":"对网络设备进行批量操作的几个脚本\nnetmiko基操\n32位windows下偷个懒使用\n在32位windows系统中无法使用之前编写的nornir脚本，原因是有几个第三方库从某个版本开始不再开发和维护32位系统的代码，而库的依赖最低版本大于最后发布的32位版本，或者装不上，亦或装上了无法用。So……\ngithub仓库地址：https://github.com/kiraster/netops_alpha_v1.1\n部分代码源码来自这位大佬：点滴技术的个人空间_哔哩哔哩_bilibili 有需要的自行研究哈，有建设性的好玩的想法的，欢迎来函探讨\n如要使用试用把玩，建议虚拟环境下运行\nadd_config.py 批量对设备添加相同配置\nimport os from settings import * # 执行配置命令 def run_cmd(task_name, host, cmds, enable=False): enable = True if host[\u0026#39;secret\u0026#39;] else False flag, conn = connect_handler(host) try: if flag: # 从返回提示符获取设备名称 hostname = conn.find_prompt().replace(\u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;\u0026gt;\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;#\u0026#39;, \u0026#39;\u0026#39;).strip() print(\u0026#39;正在为设备[{}]添加配置……\u0026#39;.format(hostname)) # 文件保存路径和文件名 \u0026#39;当前目录\\\\EXPORT\\\\当天日期\\\\config_add\\\\hostname+ip+当前时间.txt\u0026#39; logtime = datetime.now().strftime(\u0026#34;%H%M%S\u0026#34;) output_filename = hostname + \u0026#39;_\u0026#39; + host[\u0026#39;ip\u0026#39;] + \u0026#39;_\u0026#39; + logtime + \u0026#39;.txt\u0026#39; if cmds: # 判断单元表里命令是否为空值 output = \u0026#39;\u0026#39; if enable: # 判断是否需要进入enable特权模式 conn.enable() output += conn.send_config_set(config_commands=cmds) else: output += conn.send_config_set(config_commands=cmds) else: # 使用ftp/tftp/sftp/scp pass conn.disconnect() # write_data write_to_file(task_name, output_filename, output) sucessful_list.append(host[\u0026#39;ip\u0026#39;] + \u0026#39; \u0026#39; + hostname) else: failed_list.append(conn) pass except Exception as e: print(f\u0026#34;run_cmd Failed: {e}\u0026#34;) @timer @result_write @result_count # 代码运行主体框架设计 def main(): try: # 获取当前运行的Python文件的路径 current_file_path = os.path.abspath(__file__) # 提取文件名 task_name = os.path.basename(current_file_path) print(f\u0026#39;\\n当前执行的脚本是[{task_name}]，程序正在执行中\u0026gt;\u0026gt;\u0026gt;\\n\u0026#39;) hosts = get_device_info(task_name) pool = t_pool # hosts是一个返回的生成器，需要进行循环遍历 for host in hosts: # 单线程同步输出方式执行 # run_cmd(host, host[\u0026#39;cmd_list\u0026#39;]) # 多线程异步处理 pool.apply_async(run_cmd, args=(task_name, host, host[\u0026#39;cmd_list\u0026#39;])) pool.close() pool.join() return task_name, sucessful_list, failed_list except Exception: print(\u0026#39;Something Wrong!\u0026#39;) if __name__ == \u0026#34;__main__\u0026#34;: main() backup_config.py 批量导出设备配置\nimport os from settings import * # 执行display/show命令 def run_cmd(task_name, host, cmds, enable=False): enable = True if host[\u0026#39;secret\u0026#39;] else False flag, conn = connect_handler(host) try: if flag: # 从返回提示符获取设备名称 hostname = conn.find_prompt().replace(\u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;\u0026gt;\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;#\u0026#39;, \u0026#39;\u0026#39;).strip() print(\u0026#34;正在获取设备[{}]的配置……\u0026#34;.format(hostname)) # 文件保存路径和文件名 \u0026#39;当前目录\\\\EXPORT\\\\当天日期\\\\config_backup\\\\hostname+ip+当前时间.txt\u0026#39; logtime = datetime.now().strftime(\u0026#34;%H%M%S\u0026#34;) output_filename = hostname + \u0026#39;_\u0026#39; + host[\u0026#39;ip\u0026#39;] + \u0026#39;_\u0026#39; + logtime + \u0026#39;.txt\u0026#39; if cmds: # 判断单元表里命令是否为空值 output = \u0026#39;\u0026#39; for cmd in cmds: if enable: # 判断是否需要进入enable特权模式 conn.enable() output += \u0026#39;\\n\u0026#39; + \u0026#39;=\u0026#39; * 100 + \u0026#39;\\n\u0026#39; + cmd.center(100, \u0026#39;=\u0026#39;) + \u0026#39;\\n\u0026#39; output += conn.send_command(command_string=cmd) else: output += \u0026#39;\\n\u0026#39; + \u0026#39;=\u0026#39; * 100 + \u0026#39;\\n\u0026#39; + cmd.center(100, \u0026#39;=\u0026#39;) + \u0026#39;\\n\u0026#39; output += conn.send_command(command_string=cmd) else: # 使用ftp/tftp/sftp/scp pass conn.disconnect() # write_data write_to_file(task_name, output_filename, output) sucessful_list.append(host[\u0026#39;ip\u0026#39;] + \u0026#39; \u0026#39; + hostname) else: failed_list.append(conn) pass except Exception as e: print(f\u0026#34;run_cmd Failed: {e}\u0026#34;) @timer @result_write @result_count # 代码运行主体框架设计 def main(): try: # 获取当前运行的Python文件的路径 current_file_path = os.path.abspath(__file__) # 提取文件名 task_name = os.path.basename(current_file_path) print(f\u0026#39;\\n当前执行的脚本是[{task_name}]，程序正在执行中\u0026gt;\u0026gt;\u0026gt;\\n\u0026#39;) hosts = get_device_info(task_name) pool = t_pool # hosts是一个返回的生成器，需要进行循环遍历 for host in hosts: # 单线程同步输出方式执行 # run_cmd(host, host[\u0026#39;cmd_list\u0026#39;]) # 多线程异步处理 pool.apply_async(run_cmd, args=(task_name, host, host[\u0026#39;cmd_list\u0026#39;])) pool.close() pool.join() return task_name, sucessful_list, failed_list except Exception: print(\u0026#39;Something Wrong!\u0026#39;) if __name__ == \u0026#34;__main__\u0026#34;: main() ping.py 批量对设备进行ping测试\nimport os import ping3 import time from settings import * # 批量ping测试 def ping_test(host): ping3.EXCEPTIONS = True time.sleep(2) try: ping3.ping(host[\u0026#39;ip\u0026#39;]) res = \u0026#34;{:\u0026lt;18}ping测试成功.\u0026#34;.format(host[\u0026#39;ip\u0026#39;]) print(res) sucessful_list.append(host[\u0026#39;ip\u0026#39;]) except ping3.errors.HostUnknown: res = \u0026#34;{:\u0026lt;18}ping测试失败. Host unknown error raised.\u0026#34;.format(host[\u0026#39;ip\u0026#39;]) print(res) failed_list.append(host[\u0026#39;ip\u0026#39;]) except ping3.errors.PingError: res = \u0026#34;{:\u0026lt;18}ping测试失败. A ping error raised.\u0026#34;.format(host[\u0026#39;ip\u0026#39;]) print(res) failed_list.append(host[\u0026#39;ip\u0026#39;]) @timer @result_write @result_count # 代码运行主体框架设计 def main(): try: # 获取当前运行的Python文件的路径 current_file_path = os.path.abspath(__file__) # 提取文件名 task_name = os.path.basename(current_file_path) print(f\u0026#39;\\n当前执行的脚本是[{task_name}]，程序正在执行中\u0026gt;\u0026gt;\u0026gt;\\n\u0026#39;) hosts = get_device_info(task_name) pool = t_pool # hosts是一个返回的生成器，需要进行循环遍历 for host in hosts: # 单线程同步输出方式执行 # run_cmd(host, host[\u0026#39;cmd_list\u0026#39;]) # 多线程异步处理 pool.apply_async(ping_test, args=(host,)) pool.close() pool.join() return task_name, sucessful_list, failed_list except Exception: print(\u0026#39;Something Wrong!\u0026#39;) if __name__ == \u0026#34;__main__\u0026#34;: main() ssh_connect_test.py 批量对设备进行ssh连接测试\nimport os from settings import * # SSH测试连接设备 def connect_test(host): try: flag, conn = connect_handler(host) if flag: # 获取到设备名称则表示ssh连接测试成功 hostname = conn.find_prompt() result = \u0026#39;{} SSH测试连接成功,获取到设备提示符： {}\u0026#39;.format(host[\u0026#39;ip\u0026#39;], hostname) print(result) conn.disconnect() sucessful_list.append(result) else: # SSH连接测试失败，同记录 result = \u0026#39;{} SSH测试连接失败,未获取到设备提示符\u0026#39;.format(host[\u0026#39;ip\u0026#39;]) failed_list.append(result) except Exception as e: print(\u0026#34;connect_test Failed: {}\u0026#34;.format(e)) failed_list.append(host[\u0026#39;ip\u0026#39;]) @timer @result_write @result_count # 代码运行主体框架设计 def main(): try: # 获取当前运行的Python文件的路径 current_file_path = os.path.abspath(__file__) # 提取文件名 task_name = os.path.basename(current_file_path) print(f\u0026#39;\\n当前执行的脚本是[{task_name}]，程序正在执行中\u0026gt;\u0026gt;\u0026gt;\\n\u0026#39;) hosts = get_device_info(task_name) pool = t_pool # hosts是一个返回的生成器，需要进行循环遍历 for host in hosts: # 单线程同步输出方式执行 # run_cmd(host, host[\u0026#39;cmd_list\u0026#39;]) # 多线程异步处理 pool.apply_async(connect_test, args=(host,)) pool.close() pool.join() return task_name, sucessful_list, failed_list except Exception: print(\u0026#39;Something Wrong!\u0026#39;) if __name__ == \u0026#34;__main__\u0026#34;: main() undifined.py 批量对设备添加不同配置\nimport os from settings import * # 执行配置命令 def run_cmd(task_name, host, cmds, enable=False): enable = True if host[\u0026#39;secret\u0026#39;] else False flag, conn = connect_handler(host) try: if flag: # 从返回提示符获取设备名称 hostname = conn.find_prompt().replace(\u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;\u0026gt;\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;#\u0026#39;, \u0026#39;\u0026#39;).strip() print(\u0026#39;正在为设备[{}]添加配置……\u0026#39;.format(hostname)) # 文件保存路径和文件名 \u0026#39;当前目录\\\\EXPORT\\\\当天日期\\\\config_add\\\\hostname+ip+当前时间.txt\u0026#39; logtime = datetime.now().strftime(\u0026#34;%H%M%S\u0026#34;) output_filename = hostname + \u0026#39;_\u0026#39; + host[\u0026#39;ip\u0026#39;] + \u0026#39;_\u0026#39; + logtime + \u0026#39;.txt\u0026#39; if cmds: # 判断单元表里命令是否为空值 output = \u0026#39;\u0026#39; if enable: # 判断是否需要进入enable特权模式 conn.enable() output += conn.send_config_set(config_commands=cmds) else: output += conn.send_config_set(config_commands=cmds) else: pass conn.disconnect() # write_data write_to_file(task_name, output_filename, output) sucessful_list.append(host[\u0026#39;ip\u0026#39;] + \u0026#39; \u0026#39; + hostname) else: failed_list.append(conn) pass except Exception as e: print(f\u0026#34;run_cmd Failed: {e}\u0026#34;) @timer @result_write @result_count # 代码运行主体框架设计 def main(): try: # 获取当前运行的Python文件的路径 current_file_path = os.path.abspath(__file__) # 提取文件名 task_name = os.path.basename(current_file_path) print(f\u0026#39;\\n当前执行的脚本是[{task_name}]，程序正在执行中\u0026gt;\u0026gt;\u0026gt;\\n\u0026#39;) hosts = get_undifined_device_info() pool = t_pool # hosts是一个返回的生成器，需要进行循环遍历 for host in hosts: # 单线程同步输出方式执行 # run_cmd(host, host[\u0026#39;cmd_list\u0026#39;]) # 多线程异步处理 pool.apply_async(run_cmd, args=(task_name, host, host[\u0026#39;cmd_list\u0026#39;])) pool.close() pool.join() return task_name, sucessful_list, failed_list except Exception: print(\u0026#39;Something Wrong!\u0026#39;) if __name__ == \u0026#34;__main__\u0026#34;: main() settings.py 定义一些参数、装饰器、共用函数\n\u0026#39;\u0026#39;\u0026#39; 全局设置和共用函数 \u0026#39;\u0026#39;\u0026#39; import os from datetime import datetime from functools import wraps import ipaddress from openpyxl import load_workbook from multiprocessing.pool import ThreadPool from netmiko import ConnectHandler, NetMikoAuthenticationException, NetMikoTimeoutException, ssh_exception # 项目根目录 BASE_PATH = os.path.dirname((__file__)) # 文件输出目录 EXPORT_PATH = os.path.join(BASE_PATH, \u0026#39;EXPORT\u0026#39;) # 定义目录名称为当天日期（格式：20220609） dir_name = datetime.now().strftime(\u0026#34;%Y%m%d\u0026#34;) # 目录创建 new_path = os.path.join(EXPORT_PATH, dir_name) if not os.path.isdir(new_path): os.makedirs(new_path) backup_path = os.path.normpath( os.path.join(EXPORT_PATH, dir_name, \u0026#39;config_backup\u0026#39;)) config_path = os.path.normpath( os.path.join(EXPORT_PATH, dir_name, \u0026#39;config_add\u0026#39;)) # generate_table = os.path.normpath( # os.path.join(EXPORT_PATH, dir_name, \u0026#39;generate_table\u0026#39;)) if not os.path.isdir(backup_path): os.makedirs(backup_path) if not os.path.isdir(config_path): os.makedirs(config_path) # if not os.path.isdir(generate_table): # os.makedirs(generate_table) # 表格数据文件路径 device_file = \u0026#34;dev_data.xlsx\u0026#34; # ThreadPool 设定异步进程数为66 t_pool = ThreadPool(66) # 定义列表保存执行成功和失败的主机IP sucessful_list = [] failed_list = [] # 手动输入登陆信息 def login_start(): # login module，校验由netmiko完成 # login_user = input(\u0026#39;Login:\u0026#39;) # login_pwd = getpass.getpass(\u0026#39;Passwd:\u0026#39;) # # 明文写死在代码，不安全的方式 # login_user = \u0026#39;admin\u0026#39; # login_pwd = \u0026#39;xxx\u0026#39; # return login_user, login_pwd pass # 加载excel文件 def load_excel(): try: wb = load_workbook(device_file) return wb except FileNotFoundError: print(\u0026#34;{} excel文件不存在\u0026#34;.format(device_file)) except Exception: print(\u0026#34;载入读取{} excel文件失败\u0026#34;.format(device_file)) # 获取设备数据信息 def get_device_info(task_name): try: # by openpyxl # user, pwd = login_start() wb = load_excel() ws1 = wb[wb.sheetnames[0]] # 选定单元格数据区域 for row in ws1.iter_rows(min_row=2, max_col=9): # 判断IP所在的列不为空值，则进行如下代码 if row[2].value: if str(row[1].value).strip() == \u0026#39;#\u0026#39;: continue info_dict = { \u0026#39;ip\u0026#39;: row[2].value, \u0026#39;username\u0026#39;: row[5].value, \u0026#39;password\u0026#39;: row[6].value, \u0026#39;protocol\u0026#39;: row[3].value, \u0026#39;port\u0026#39;: row[4].value, \u0026#39;secret\u0026#39;: row[7].value, \u0026#39;device_type\u0026#39;: row[8].value, \u0026#39;cmd_list\u0026#39;: get_cmd_info(task_name, wb[row[8].value.strip().lower()]), } yield info_dict else: break except Exception as e: print(\u0026#34;get_device_info failed: {}\u0026#34;.format(e)) finally: wb.close() # 获取命令信息 def get_cmd_info(task_name, sheet_name): cmd_list = [] try: # by openpyxl for row in sheet_name.iter_rows(min_row=2, max_col=3): # 若单元格使用“＃”进行注释或命令为空值，则跳过该行 if str(row[0].value).strip() != \u0026#39;#\u0026#39; and row[1].value and task_name == \u0026#39;backup_config.py\u0026#39;: cmd_list.append(row[1].value.strip()) elif str(row[0].value).strip() != \u0026#39;#\u0026#39; and row[2].value and task_name == \u0026#39;add_config.py\u0026#39;: cmd_list.append(row[2].value.strip()) return cmd_list except Exception as e: print(\u0026#34;get_cmd_info Error: \u0026#34;, e) # 获取自定义设备数据信息 def get_undifined_device_info(): try: # by openpyxl wb = load_excel() ws1 = wb[wb.sheetnames[5]] row_number = 2 # 选定单元格数据区域 for row in ws1.iter_rows(min_row=2, max_col=9): # 获取执行命令 undifined_cmd_info = [] for cols in ws1.iter_cols(min_col=10, min_row=row_number, max_row=row_number, values_only=True): for col in cols: if col is None: continue undifined_cmd_info.append(col) row_number += 1 # 判断IP所在的列不为空值，执行如下代码 if row[2].value: if str(row[1].value).strip() == \u0026#39;#\u0026#39;: continue info_dict = { \u0026#39;ip\u0026#39;: row[2].value, \u0026#39;username\u0026#39;: row[5].value, \u0026#39;password\u0026#39;: row[6].value, \u0026#39;protocol\u0026#39;: row[3].value, \u0026#39;port\u0026#39;: row[4].value, \u0026#39;secret\u0026#39;: row[7].value, \u0026#39;device_type\u0026#39;: row[8].value, \u0026#39;cmd_list\u0026#39;: undifined_cmd_info, } yield info_dict else: break except Exception as e: print(\u0026#34;get_device_info failed: {}\u0026#34;.format(e)) finally: wb.close() # netmiko 连接处理 def connect_handler(host): try: connect = \u0026#39;\u0026#39; # 判断使用SSH协议 # 将“protocol”列单元格的内容大写转小写，去除前后空格对比是否为 ssh if host[\u0026#39;protocol\u0026#39;].lower().strip() == \u0026#39;ssh\u0026#39;: # 判断“port”列单元格，若单元格填写的内容不是22或空，则定义为22 host[\u0026#39;port\u0026#39;] = host[\u0026#39;port\u0026#39;] if (host[\u0026#39;port\u0026#39;] not in [22, None]) else 22 # 剔除多余connectHandler 不需要的参数，protocol、secret、cmd_list，华为华为设备无特权密码 host.pop(\u0026#39;protocol\u0026#39;), host.pop(\u0026#39;cmd_list\u0026#39;) if \u0026#39;huawei\u0026#39; in host[\u0026#39;device_type\u0026#39;]: host.pop(\u0026#39;secret\u0026#39;) connect = ConnectHandler(**host, conn_timeout=10) elif \u0026#39;hp_comware\u0026#39; in host[\u0026#39;device_type\u0026#39;]: host.pop(\u0026#39;secret\u0026#39;) connect = ConnectHandler(**host) else: connect = ConnectHandler(**host, conn_timeout=10) # 判断使用Telnet协议 elif host[\u0026#39;protocol\u0026#39;].lower().strip() == \u0026#39;telnet\u0026#39;: # 判断“port”列单元格，若单元格填写的内容不是23或空，则定义为23 host[\u0026#39;port\u0026#39;] = host[\u0026#39;port\u0026#39;] if (host[\u0026#39;port\u0026#39;] not in [23, None]) else 23 # 剔除多余connectHandler 不需要的参数，protocol、secret、cmd_list，华三华为设备无特权密码 host.pop(\u0026#39;protocol\u0026#39;), host.pop(\u0026#39;secret\u0026#39;), host.pop(\u0026#39;cmd_list\u0026#39;) # netmiko 支持telnet协议，设备类型格式为：hp_comware_telnet host[\u0026#39;device_type\u0026#39;] = host[\u0026#39;device_type\u0026#39;] + \u0026#39;_telnet\u0026#39; # fast_cli=false,待测试参数 connect = ConnectHandler(**host, fast_cli=False) # 不在以上两种协议内的连接 else: res = \u0026#34;暂不支持IP地址为{}_的设备使用{}协议登陆\u0026#34;.format(host[\u0026#39;ip\u0026#39;], host[\u0026#39;protocol\u0026#39;]) raise ValueError(res) return True, connect except NetMikoTimeoutException: res = \u0026#34;{} Can not connect to Device!\u0026#34;.format(host[\u0026#39;ip\u0026#39;]) print(res) return False, res except NetMikoAuthenticationException: res = \u0026#34;{} username/password wrong!\u0026#34;.format(host[\u0026#39;ip\u0026#39;]) print(res) return False, res except ssh_exception: res = \u0026#34;{} SSH parameter problem!\u0026#34;.format(host[\u0026#39;ip\u0026#39;]) print(res) return False, res except Exception as e: print(\u0026#34;{} Failed: {}\u0026#34;.format(host[\u0026#39;ip\u0026#39;], e)) return False, res # 记录程序执行时间装饰器 def timer(func): @wraps(func) def wrapper(*args, **kwargs): start_time = datetime.now() func(*args, **kwargs) end_time = datetime.now() # print(\u0026#39;\\n\u0026#39; + \u0026#39;-\u0026#39; * 42) print(\u0026#39;执行完毕，共耗时 {:0.2f} 秒.\u0026#39;.format((end_time - start_time).total_seconds())) print(\u0026#39;-\u0026#39; * 42) # return res return wrapper # 记录运行结果的装饰器 def result_count(func): @wraps(func) def wrapper(*args, **kwargs): task_name, sucessful_list, failed_list = func(*args, **kwargs) result_count = (\u0026#39;设备总数 {} 台，成功 {} 台，失败 {} 台.\u0026#39;.format( len(sucessful_list) + len(failed_list), len(sucessful_list), len(failed_list))) print(\u0026#39;\\n\u0026#39; + \u0026#39;-\u0026#39; * 42) print(result_count) result_path = os.path.normpath(os.path.join(EXPORT_PATH, dir_name, f\u0026#39;result_{dir_name}.log\u0026#39;)) print(f\u0026#39;\\n运行结果保存路径: \\\u0026#34;{result_path}\\\u0026#34;\\n\u0026#39;) return task_name, sucessful_list, failed_list return wrapper # 写入文件 def write_to_file(task_name, output_filename, output): # 写入结果到文件 if task_name == \u0026#39;backup_config.py\u0026#39;: with open(os.path.join(backup_path, output_filename), \u0026#39;a\u0026#39;, encoding=\u0026#34;utf-8\u0026#34;) as f: f.write(output) elif task_name == \u0026#39;add_config.py\u0026#39;: with open(os.path.join(config_path, output_filename), \u0026#39;a\u0026#39;, encoding=\u0026#34;utf-8\u0026#34;) as f: f.write(output) elif task_name == \u0026#39;undifined.py\u0026#39;: with open(os.path.join(config_path, output_filename), \u0026#39;a\u0026#39;, encoding=\u0026#34;utf-8\u0026#34;) as f: f.write(output) else: pass # 保存运行结果记录的装饰器 def result_write(func): @wraps(func) def wrapper(*args, **kwargs): task_name, sucessful_list, failed_list = func(*args, **kwargs) result_count = (\u0026#39;设备总数 {} 台，成功 {} 台，失败 {} 台.\u0026#39;.format( len(sucessful_list) + len(failed_list), len(sucessful_list), len(failed_list))) # time_str = datetime.now() time_str = datetime.now().strftime(\u0026#39;%Y-%m-%d %H:%M:%S.%f\u0026#39;) result_path = os.path.normpath( os.path.join(EXPORT_PATH, dir_name, f\u0026#39;result_{dir_name}.log\u0026#39;)) with open(result_path, \u0026#39;a\u0026#39;, encoding=\u0026#34;utf-8\u0026#34;) as f: log_title = task_name.center(100, \u0026#39;=\u0026#39;) + \u0026#39;\\n\u0026#39; + time_str.center(100, \u0026#39;=\u0026#39;) + \u0026#39;\\n\u0026#39; f.write(log_title) f.write(result_count + \u0026#39;\\n\u0026#39;) f.write(\u0026#39;\\n执行成功设备列表：\\n\u0026#39;) for i in sucessful_list: f.write(i) f.write(\u0026#39;\\n\u0026#39;) f.write(\u0026#39;\\nNG设备列表：\\n\u0026#39;) for i in failed_list: f.write(i) f.write(\u0026#39;\\n\u0026#39;) f.write(\u0026#39;\\n\u0026#39;) return task_name, sucessful_list, failed_list return wrapper # 判断是否是正确格式的IP地址，IP地址网络，IP地址范围 def is_valid_ipv4_input(ipv4_str): try: # 尝试将输入解析为 IPv4Address ipaddress.IPv4Address(ipv4_str) return True except ValueError: return False # try: # # 将输入拆分为两个 IP 地址 # start, end = ipv4_str.split(\u0026#39;-\u0026#39;) # # 尝试将输入解析为 IPv4Address # ipaddress.IPv4Address(start.strip()) # ipaddress.IPv4Address(end.strip()) # return True # except ValueError as e: # # 尝试将输入解析为 IPv4Network # try: # network = ipaddress.IPv4Network(ipv4_str) # if network.hostmask != \u0026#39;0.0.0.0\u0026#39;: # return True # else: # return False # except ValueError as e: # # print(e) # return False dev_data.xlsx 定义设备登陆参数和命令\nrequirements.txt 使用到的第三方库\nbcrypt==4.0.1 cffi==1.15.1 cryptography==41.0.1 et-xmlfile==1.1.0 future==0.18.3 importlib-metadata==6.8.0 netmiko==3.4.0 ntc-templates==3.4.0 openpyxl==3.1.2 paramiko==3.2.0 ping3==4.0.4 platformdirs==3.8.1 pycparser==2.21 PyNaCl==1.5.0 pyserial==3.5 PyYAML==6.0 scp==0.14.5 six==1.16.0 tenacity==8.2.2 textfsm==1.1.3 tomli==2.0.1 yapf==0.40.1 zipp==3.15.0 ","date":"2023-07-09T13:39:07Z","permalink":"https://kiraster.github.io/posts/99580674.html/","title":"对网络设备进行批量操作的几个脚本"},{"content":"什么是第一性原理\n“第一性原理”是科学研究中的一个基本概念，指的是从基本的真实、可验证的事实出发，通过逻辑推导和数学计算等方式来推导出更复杂的现象和规律的方法。\n在理论物理学、化学、材料科学等领域中，第一性原理被广泛运用于对各种材料的物性和化学性质进行理论计算和分析。\n第一性原理的核心思想是通过对物质的基本组成和相互作用进行深入剖析，从而建立关于物质性质的准确数学模型。这些模型可以被用于预测和解释各种物质行为和性质，例如晶体结构、热力学性质、光学特性、电学特性、磁学特性等等。通俗地说，第一性原理就是“从零开始，自己推导”。\n第一性原理的研究可以通过高性能计算机等技术手段进行实现，其中最典型的方法是密度泛函理论，即把复杂的多体问题简化成单粒子问题，从而避开了系统中所有粒子的动力学行为的细节。这些方法使得科学家们不再受到实验条件限制，可以对材料的基本性质进行精确的计算和预测，从而推动了材料科学及相关领域的发展。\n什么是技能\n“技能”是指在特定领域内掌握的某种技术或技巧，通常被定义为实际应用能力。技能具有普遍性和特殊性，普遍性指技能的应用范围很广，而特殊性指技能只能够用于特定的领域。\n技能的学习和掌握需要不断地练习和实践，只有通过长期的积累和不断的提高，才能够获得卓越的技能表现。不同的技能需要不同的专业知识、理论基础和实践经验，例如编程技能、绘画技能、演讲技能、烹饪技能等等。\n技能的重要性在现代社会中越来越凸显，因为随着科技的发展和经济的全球化，市场竞争越来越激烈，拥有优秀的技能已经成为获得并保持一份工作的关键。拥有高水平的技能可以帮助人们创造更多的价值，提升个人能力和职业素质，从而在职场上更加出色和成功。\n什么是入门\n“入门”是指初学者刚开始接触某一领域或技能时需要掌握的基础知识和基本技能。在学术、职业、爱好等各种不同的领域中，都有其相应的入门要求和内容。\n通常情况下，入门的学习过程包括了基础理论知识的介绍和学习，相关技能和技术的掌握以及实践练习等环节。入门阶段的学习目标是掌握该领域或技能的基础知识，了解其基本概念和基本原理，并能够较为熟练地运用所学知识进行简单的实践操作。\n作为任何一个领域的起点，入门阶段的学习非常重要，因为这关系到后续深入学习的有效性和效果。只有掌握了基础知识和技能，才能够在后面的学习中更加轻松和自信地应对并取得更高的学习成果。\n同时，入门阶段的学习也需要持之以恒的坚持和不断的自我反思和修正。只有通过不断的学习和实践，才能够成为在该领域里的专家或者达到自己所期望的水平。\n","date":"2023-06-15T22:27:11Z","permalink":"https://kiraster.github.io/posts/61188c84.html/","title":"GPT问答230615"},{"content":"上一篇文描述的是在线安装，这篇文挑战一下离线安装，下载 Server with GUI组件及其依赖项和TigerVNC后上传服务器进行安装\n操作流程：\n先给虚拟机创建一个快照 使用虚拟机下载安装软件包然后打包导出到本地 还原快照 上传软件包到虚拟机 安装软件 测试 环境说明\nMicrosoft Windows 10 Pro 21H2 VMware® Workstation 15.0.0 OS: CentOS Linux 8 IMG: CentOS-8-x86_64-1905-dvd1.iso Xvnc TigerVNC 1.11.0 - built Jul 21 2021 11:25:16 配置华为云CentOS-Vault yum源 使用华为云CentOS-Vault\n官网链接： https://mirrors.huaweicloud.com/home 备份/etc/yum.repos.d 目录下的文件 cp -a /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak 或\nmkdir /etc/yum.repos.d/backup_repo mv /etc/yum.repos.d/*.repo /etc/yum.repos.d/backup_repo/ 配置华为云CentOS-Vault yum源 wget -O /etc/yum.repos.d/CentOS-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-8-reg.repo 执行yum clean all清除原有yum缓存。\n执行yum makecache（刷新缓存）或者yum repolist all（查看所有配置可以使用的文件，会自动刷新缓存）\nyum clean all yum makecache 下载软件包和导出软件包到本地 创建一个目录来保存软件包。创建 /root/packages 目录 mkdir /root/packages 运行以下命令以下载 \u0026ldquo;Server with GUI\u0026rdquo; 组件及其所有依赖项和TigerVNC 组件及其依赖项\ndnf -y group install \u0026#34;Server with GUI\u0026#34; --downloadonly --downloaddir=/root/packages dnf -y install tigervnc-server --downloadonly --downloaddir=/root/packages 打包tar，导出软件包到本地 tar -cvf packages.tar /root/packages/ 使用工具将packages.tar导出到本地存储上\n还原快照和上传软件包 安装软件包和配置服务 关闭SELINUX，后面配置完成再启用 使用命令 nano /etc/selinux/config编辑该文件，将SELINUX设置为disabled，然后 reboot 重启\nSELINUX=disabled 使用命令 sestatus查看防火墙状态，输出结果如下：\nSELinux status: disabled 将上传的packages.tar解压 tar -xvf /root/packages.tar 在/root/packages 目录下创建 local.repo 文件 使用命令 nano /root/packages/local.repo创建文件，添加以下内容\n[packages] name=Local Repository baseurl=file:///root/packages enabled=1 gpgcheck=0 运行以下命令以安装组件及其依赖项 dnf -c /root/packages/local.repo install /root/packages/*.rpm -y 在安装完以上软件包后，我的虚拟机貌似出问题了，执行之后步骤提示权限不足，明明是root用户下的操作，强制重启虚拟机后再进行以下步骤\n设置图形界面为默认运行级别 systemctl set-default graphical.target 启动图形界面 systemctl start graphical.target 查看看服务状态 systemctl status graphical.target 重启 reboot 重启后进入图形化桌面 检查graphical.target服务 重启后发现没能自动进入图形化桌面，检查systemctl status graphical.target输出结果是Active\n检查GDM 服务设置 检查 GDM 服务的设置。使用以下命令检查 GDM 服务是否已启用：\nsystemctl is-enabled gdm.service 如果输出结果为 disabled，请使用以下命令启用 GDM 服务：\nsystemctl enable gdm.service 我的环境操作下启用GDM服务后reboot重启，可以进入图形化桌面\n接下来的步骤与上一篇文的步骤一致，不多耗费篇幅\n截图 最后 发现即使指定要求只下载Server with GUI，但安装时查看到软件包列表还是发现很多包一并安装了，这可能会对已有运行服务产生影响，慎重使用，起码懂得回退的操作 现在服务器操作系统一般都上虚拟化了，操作这些安装升级的时候要记得做个快照，备份之类的 配置完成后别忘了开防火墙策略SELINUX=enforcing，重开SELINUX真耗时间 业余选手，勿喷 欢迎“来电”来函探讨 ","date":"2023-05-20T18:18:21Z","permalink":"https://kiraster.github.io/posts/f652ccc4.html/","title":"CentOS-8.0.1905 安装配置图形化桌面环境和TigerVNC(离线安装)"},{"content":"CentOS 8.0.1905 服务器上初始安装没有安装图形化桌面环境，现在需要对该服务器安装图形桌面化环境和安装TigerVNC，并在本地（windows平台）使用VNC客户端进行远程桌面连接\n环境说明\nMicrosoft Windows 10 Pro 21H2 VMware® Workstation 15.0.0 OS: CentOS Linux 8 IMG: CentOS-8-x86_64-1905-dvd1.iso Xvnc TigerVNC 1.11.0 - built Jul 21 2021 11:25:16 使用华为云CentOS-Vault 现在 CentOS 8（非 Stream 版本）已被官方移除出该仓库。需要使用centos-vault镜像\n先浏览官网链接，查看使用说明\n官网链接： https://mirrors.huaweicloud.com/home 备份/etc/yum.repos.d 目录下的文件 [root@centos-106 yum.repos.d]# cp -a /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak 或\n# 创建备份目录 [root@centos-106 yum.repos.d]# mkdir repo_back # 移动 *.repo 到 back_repo 目录 [root@centos-106 yum.repos.d]# mv *.repo back_repo/ 配置华为云CentOS-Vault yum源 [root@centos-106 yum.repos.d]# wget -O /etc/yum.repos.d/CentOS-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-8-reg.repo --2023-05-17 12:12:00-- https://repo.huaweicloud.com/repository/conf/CentOS-8-reg.repo Resolving repo.huaweicloud.com (repo.huaweicloud.com)... 58.59.128.100, 58.59.128.102, 58.59.128.99 Connecting to repo.huaweicloud.com (repo.huaweicloud.com)|58.59.128.100|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 2218 (2.2K) [application/octet-stream] Saving to: ‘/etc/yum.repos.d/CentOS-Base.repo’ /etc/yum.repos.d/CentOS-Base.repo 100%[================================================================\u0026gt;] 2.17K --.-KB/s in 0s 2023-05-17 12:12:01 (33.0 MB/s) - ‘/etc/yum.repos.d/CentOS-Base.repo’ saved [2218/2218] 执行yum clean all清除原有yum缓存。\n执行yum makecache（刷新缓存）或者yum repolist all（查看所有配置可以使用的文件，会自动刷新缓存）\n[root@centos-106 yum.repos.d]# yum clean all 7 files removed [root@centos-106 yum.repos.d]# yum makecache CentOS-8 - AppStream - repo.huaweicloud.com 3.9 MB/s | 8.4 MB 00:02 CentOS-8 - Base - repo.huaweicloud.com 2.7 MB/s | 4.6 MB 00:01 CentOS-8 - PowerTools - repo.huaweicloud.com 1.6 MB/s | 2.3 MB 00:01 CentOS-8 - Extras - repo.huaweicloud.com 4.9 kB/s | 10 kB 00:02 Metadata cache created. 安装配置图形桌面环境 关闭SELINUX，后面配置完成再启用 [root@centos-106 selinux]# nano /etc/selinux/config 将SELINUX设置为disabled …… SELINUX=disabled …… reboot重启 查看防火墙状态\n[root@centos-106 ~]# sestatus SELinux status: disabled 安装图形化桌面环境 [root@centos-106 yum.repos.d]# dnf groupinstall \u0026#34;Server with GUI\u0026#34; -y …… …… …… Complete! [root@centos-106 yum.repos.d]# 设置图形界面为默认运行级别 systemctl set-default graphical.target 启动图形界面 systemctl start graphical.target 重启 reboot 向导设置 重启后会看到图形化界面的一个向导，前面的基本点next(定位服务可关)，最后几步有个新建用户的步骤，建立一个用户给下一步骤中的 VNC Server服务 使用（不一定非使用vncuser这个名称）\n安装 VNC Server 服务 安装 TigerVNC 以 root 用户身份运行以下命令，基本都使用root用户权限操作（提示权限不足要在命令前加 sudo 很烦），需要切换vncuser用户会说明\n[root@centos-106 ~]# dnf install tigervnc-server -y …… …… Installed: tigervnc-selinux-1.11.0-9.el8.noarch tigervnc-server-1.11.0-9.el8.x86_64 Complete! [root@centos-106 ~]# 创建 vnc 用户并设置密码（前面已创建可跳过） 如不想使用在上一步骤建立的用户，可在这一步骤中新建用户\n[root@centos-106 ~]# useradd vnc_user [root@centos-106 ~]# passwd vnc_user Changing password for user uservnc. New password: Retype new password: passwd: all authentication tokens updated successfully. [root@centos-106 ~]# 拷贝 vncserver@.service 文件 创建/etc/systemd/system/vncserver@.service 配置文件。要创建这个文件，从/usr/lib/systemd/system/vncserver@.service 复制\n[root@centos-106 ~]# ~]# cp /usr/lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@.service 不需要在文件名中包含显示号，因为 systemd 会自动根据需要 在内存中创建适当的命名实例，将服务文件中的 '%i' 替换为显示号。对于单个用户，无需重命名该文件。\nVNC 桌面的默认大小为 1024x768。\n可以使用 ~/.vnc/config 文件进一步配置用户的 VNC 会话。\n例如，要更改 VNC 窗口大小，请添加以下行：\ngeometry= x 在 /etc/tigervnc/vncserver.users 中为端口1配置用户 vncuser（即：1=vncuser） [root@centos-106 system]# nano /etc/tigervnc/vncserver.users 添加： :1=vncuser 从 root 切换到 vncuser，配置文件中定义的用户的连接密码 这一步骤中需要设置一个连接密码(最长八个字符，多出的字符会被切掉）；在view-only password (y/n)? 选 n；选y只能查看不能输入\n[root@centos-106 ~]# su - vncuser [vncuser@centos-106 ~]$ vncpasswd Password: Verify: Would you like to enter a view-only password (y/n)? n A view-only password is not used [vncuser@centos-106 ~]$ exit 查看 5901 端口 VNC server 的监听状态 lsof -i :5901 或 netstat -tulpn | grep 5901\n[vncuser@centos-106 ~]$ lsof -i :5901 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME Xvnc 2385 vncuser 6u IPv4 46911 0t0 TCP *:5901 (LISTEN) Xvnc 2385 vncuser 7u IPv6 46912 0t0 TCP *:5901 (LISTEN) [vncuser@centos-106 ~]$ netstat -tulpn | grep 5901 (Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.) tcp 0 0 0.0.0.0:5901 0.0.0.0:* LISTEN 2385/Xvnc tcp6 0 0 :::5901 :::* LISTEN 2385/Xvnc 配置防火墙，开放 5901 端口： [root@centos-106 ~]# firewall-cmd --permanent --zone=public --add-port=5901/tcp success [root@centos-106 ~]# firewall-cmd --reload success [root@centos-106 ~]# 启动服务 # 重新加载systemd守护程序配置 systemctl daemon-reload # 将VNC服务器服务vncserver@:1.service设置为开机自启动 systemctl enable vncserver@:1.service # 将VNC服务器服务vncserver@:1.service启动 systemctl start vncserver@:1.service # # 在终端上输出有关VNC服务器服务vncserver@:1.service的当前状态信息 systemctl status vncserver@:1.service # 本地使用 VNC 客户端进行远程桌面连接 VNC客户端的选择有很多，例如以下用到的UltraVNC Viewer；还有VNC Viewer、MobaXterm，任君选择\n打开软件，输入 服务器地址:端口号 ，点击 Connect 输入连接密码，点击 Log On 登陆界面 踩坑 运行 yum update 之后，repo 文件的变化 在配置华为云CentOS-Vault yum源之后，运行yum update，好家伙把/etc/yum.repos.d/目录下*.repo文件给干掉了，又得重复一次配置华为云CentOS-Vault yum源的步骤\n[root@centos-106 yum.repos.d]# ll total 12 -rw-r--r--. 1 root root 2218 May 18 13:03 CentOS-Base.repo drwxr-xr-x. 2 root root 4096 May 18 12:41 repo_back drwxr-xr-x. 2 root root 4096 May 18 13:03 repo_back2 运行 vncserver 等旧格式命令的提示 在运行vncserver开头的命令后，会有一行提示如下\nWARNING: vncserver has been replaced by a systemd unit and is about to be removed in future releases. Please read /usr/share/doc/tigervnc/HOWTO.md for more information. 在处理这个步骤耗费了本人非常多的时间，例如启动报错，启动不报错能连接但是黑屏各种问题。最后在CentOS论坛看到一篇帖子，看到提示去找 Red Hat 官网手册才处理好这个问题；顺便说一句搜索引擎各种关于安装VNC Server 的中文资料没一个能用（没标明环境和版本，索骥失败），最终还是去看官网手册；看来少吃别人嚼过的东西\n最后 参考资料: - vncserver failed by ShinShin on 2020/11/17 : https://forums.centos.org/viewtopic.php?f=54\u0026amp;t=76387 - Red Hat Enterprise Linux 7 Deployment, configuration, and administration of RHEL 7 Chapter 13. TigerVNC: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/ch-tigervnc 发现即使指定要求只下载Server with GUI，但安装时查看到软件包列表还是发现很多包一并安装了，这可能对已有运行服务产生影响，慎重使用，起码懂得回退的操作 现在服务器操作系统一般都上虚拟化了，操作这些安装升级的时候要记得做个快照，备份之类的 如有需要玩这个的话，强烈建议先在虚拟机多轮测试再去实际操作，多建立快照 配置完成后别忘了开防火墙策略SELINUX=enforcing，重开SELINUX真耗时间 业余选手，勿喷 欢迎“来电”来函探讨 ","date":"2023-05-20T00:55:54Z","permalink":"https://kiraster.github.io/posts/a451a5f2.html/","title":"CentOS-8.0.1905 安装配置图形化桌面环境和TigerVNC(在线安装)"},{"content":"之前的一些文章由于当时的软硬件版本或特性存在一定的时效性，比如一些解决方案，但随着时间推移可能已经推出新版本或新特性或变更不再适用当前。\n在这些文章页面给出提示信息，提示注意甄别。\n效果如下：\n操作步骤 在主题文件夹的 layout 目录下找到文章页面的模板文件，一般为post.ejs或者article.ejs（这个要根据主题来确定，我使用的主题是 post.ejs 包了一层 article.ejs，所以在 article.ejs 中添加代码比较合适），在该文件中找到文章正文之上的行添加如下代码：\n\u0026lt;!-- add timeliness tips date:20230510 --\u0026gt; \u0026lt;% if (typeof post.notips === \u0026#39;undefined\u0026#39; || !post.notips) { %\u0026gt; \u0026lt;% var days = moment().diff(moment(post.date), \u0026#39;days\u0026#39;); %\u0026gt; \u0026lt;% if (days \u0026gt; 180) { %\u0026gt; \u0026lt;div\u0026gt; \u0026lt;i class=\u0026#34;fa fa-exclamation-triangle\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; This is an article that was created \u0026lt;%= days %\u0026gt; days ago, and the information may have evolved or changed. \u0026lt;/div\u0026gt; \u0026lt;br\u0026gt; \u0026lt;% } %\u0026gt; \u0026lt;% } %\u0026gt; 代码说明 这段 EJS 代码主要实现以下功能：\n判断文章是否需要显示警告信息，如果需要显示警告信息，则执行接下来的代码块； 计算文章发布时间与当前时间之间的天数，并判断是否超过 180 天； 如果超过 180 天，则显示一个带有警告图标开头的提示信息，告知读者文章内容可能已经过时或发生变化。 notips字段的使用 在 Hexo 的文章 Front-matter 中定义notips 字段，因为有一些类型的文章并不需要这个提示，比如一些感想思考想法。\n\u0026lt;% if (typeof post.notips === \u0026#39;undefined\u0026#39; || !post.notips) { %\u0026gt; 这一行代码首先判断 post.notips 是否有定义。如果没有定义，即 typeof post.notips === 'undefined' 为真，或者定义了但值为假（0、false、null、空字符串等），即 !post.notips 为真，那么就执行接下来的代码块，否则跳过。\n如果需要在文章中显示提示信息，则留空就行，不定义notips就行\n如果不需要在文章中显示提示信息，则把post.notips 的值设置为真（即非零、非空、非 false）\n如果想要又不想要，你自己分裂去\n以下是一个不需要在文章中显示提示信息的例子：\ntitle: title …… notips: true …… 其他行代码说明 \u0026lt;% var days = moment().diff(moment(post.date), \u0026#39;days\u0026#39;); %\u0026gt; 这一行代码使用 moment.js 库计算当前时间与文章发布时间之间的天数。具体来说moment().diff(moment(post.date), 'days') 表示当前时间与 post.date 这个 moment 对象之间的天数差值。将计算结果赋值给 days 变量，以便后续使用。\n\u0026lt;% if (days \u0026gt; 180) { %\u0026gt; \u0026lt;div\u0026gt; \u0026lt;i class=\u0026#34;fa fa-exclamation-triangle\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; This is an article that was created \u0026lt;%= days %\u0026gt; days ago, and the information may have evolved or changed. \u0026lt;/div\u0026gt; \u0026lt;br\u0026gt; \u0026lt;% } %\u0026gt; 这一段代码实现了在文章过时时显示一个警告提示信息。具体来说，如果 days 大于 180，即文章发布时间距今已经超过 180 天，则显示一个带警告图标开头的提示信息，里面包含了提示文字和当前时间与发布时间之间的天数差值。\n最后 以上方案部分代码内容来自GPT，但是点开参考来源是404页面，让人费解 ","date":"2023-05-11T13:30:19Z","permalink":"https://kiraster.github.io/posts/9481f4f2.html/","title":"添加hexo文章时效性提示"},{"content":"去年写过一版这个需求的python代码，使用的是if判断语句进行匹配获取内容然后写入表格\nH3C 防火墙（v7）提取导出安全策略至表格 当时主打一个使用最少的库，最易理解和最长代码原则（哈哈），现在改用textfsm来实现这个需求\n测试环境 Microsoft Windows 10 Pro 21H2 Visual studio code Update 1.77.3 Python 3.10.10 HCL 5.7.2 DeviceModel：H3C SecPath F1090 安装的库 使用 pip 安装 openpyxl ，pandas ，wcwidth，ntc-templates-elinpf，其他库为第三方库安装时自动安装的依赖（除pip和setuptools外）\nPackage Version -------------------- ------- et-xmlfile 1.1.0 future 0.18.3 ntc-templates-elinpf 3.6.1 numpy 1.24.3 openpyxl 3.1.2 pandas 1.5.3 pip 23.1.2 python-dateutil 2.8.2 pytz 2023.3 setuptools 65.5.0 six 1.16.0 textfsm 1.1.3 tzdata 2023.3 wcwidth 0.2.6 textfsm模板 编写三个textfsm模板文件，分别处理以下命令的回显内容\n# 查看安全策略 dis security-policy ip # 查看地址对象组 dis object-group ip address # 查看服务对象组 dis object-group service hp_comware_display_security-policy_ip_local.textfsm Value Required RULE_ID (\\d+) Value RULE_NAME (\\S+(?:\\s\\S+)*) Value ACTIVE_STATE (Inactive|Active) Value ACTION (pass|drop) Value VRF (\\S+(?:\\s\\S+)*) Value PROFILE (\\S+(?:\\s\\S+)*) Value LOGGING (enable|disable) Value List COUNTING (\\S+(?:\\s\\S+)*) Value TIME_RANGE (\\S+(?:\\s\\S+)*) Value DESC (\\S+(?:\\s\\S+)*) Value List SESSION (\\S+(?:\\s\\S+)*) Value List SRC_ZONE (\\S+(?:\\s\\S+)*) Value List DEST_ZONE (\\S+(?:\\s\\S+)*) Value List SRC_IP (\\S+(?:\\s\\S+)*) Value List DEST_IP (\\S+(?:\\s\\S+)*) Value List SERVICE (\\S+(?:\\s\\S+)*) Value List APPLICATION (\\S+(?:\\s\\S+)*) Value List USER (\\S+(?:\\s\\S+)*) Start ^\\s+rule \\d+ name \\S+ -\u0026gt; Continue ^\\s+rule ${RULE_ID} name ${RULE_NAME} -\u0026gt; Continue ^\\s+rule ${RULE_ID} name ${RULE_NAME} \\(${ACTIVE_STATE}\\) ^\\s+action ${ACTION} ^\\s+vrf ${VRF} ^\\s+profile ${PROFILE} ^\\s+logging ${LOGGING} ^\\s+counting ${COUNTING} ^\\s+time-range ${TIME_RANGE} ^\\s+description ${DESC} ^\\s+session ${SESSION} ^\\s+source-zone ${SRC_ZONE} ^\\s+destination-zone ${DEST_ZONE} ^\\s+source-ip ${SRC_IP} ^\\s+source-ip\\S+ ${SRC_IP} ^\\s+destination-ip ${DEST_IP} ^\\s+destination-ip\\S+ ${DEST_IP} ^\\s+service ${SERVICE} ^\\s+service-port ${SERVICE} ^\\s+application ${APPLICATION} ^\\s+user ${USER} ^\\s+source-mac ${SRC_IP} ^$$ -\u0026gt; Record hp_comware_display_object-group_ip_local.textfsm Value Required OBJ_GROUP_NAME (\\S+(?:\\s\\S+)*) Value List OBJ_ITEM (\\S+(?:\\s\\S+)*) Value REFERENCED (in use|out of use) Value SEC_ZONE (\\S+(?:\\s\\S+)*) Value DESC (\\S+(?:\\s\\S+)*) Start ^Ip address object group -\u0026gt; Continue ^Ip address object group ${OBJ_GROUP_NAME}: \\d+ objects\\(${REFERENCED}\\) ^security-zone ${SEC_ZONE} ^\u0026lt; -\u0026gt; NoRecord ^${DESC} ^\\s+object -\u0026gt; NoRecord ^\\s+${OBJ_ITEM} ^$$ -\u0026gt; Record hp_comware_display_object-group_service_local.textfsm Value Required OBJ_GROUP_NAME (\\S+(?:\\s\\S+)*) Value List OBJ_ITEM (\\S+(?:\\s\\S+)*) Value REFERENCED (in use|out of use) Value DESC (\\S+(?:\\s\\S+)*) Start ^Service object group -\u0026gt; Continue ^Service object group ${OBJ_GROUP_NAME}: \\d+ objects\\(${REFERENCED}\\) ^\u0026lt; -\u0026gt; NoRecord ^${DESC} ^\\s+object -\u0026gt; NoRecord ^\\s+${OBJ_ITEM} ^$$ -\u0026gt; Record python脚本 原理是使用textfsm模板对三个命令的回显内容进行处理然后写入表格\nfrom textfsm import TextFSM import pandas as pd from openpyxl import Workbook from openpyxl.styles import PatternFill import openpyxl from datetime import datetime import wcwidth class SP2EXCEL: # 初始化一些内容 def __init__(self, echo_content): self.sp_textfsm_path = \u0026#39;hp_comware_display_security-policy_ip_local.textfsm\u0026#39; self.obj_ip_textfsm_path = \u0026#39;hp_comware_display_object-group_ip_local.textfsm\u0026#39; self.obj_service_textfsm_path = \u0026#39;hp_comware_display_object-group_service_local.textfsm\u0026#39; # 回显内容读入内存 with open(echo_content, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf8\u0026#39;) as f: self.contents = f.read() # 0、字典的value是列表的，将列表拼接为一个以换行符为分隔符的字符串 def expand_list(self, list_dict_res): for d in list_dict_res: for k, v in d.copy().items(): if isinstance(v, list): # 将列表拼接为一个以换行符为分隔符的字符串 obj_item_str = \u0026#39;\\n\u0026#39;.join(v) # 写回原字典 d[k] = obj_item_str return list_dict_res # 1、解析 dis security-policy ip 回显内容（安全策略） def parse_sp(self): with open(self.sp_textfsm_path, encoding=\u0026#39;utf8\u0026#39;) as f: template = TextFSM(f) res = template.ParseTextToDicts(self.contents) # 对没有匹配到内容的设置默认值 for d in res: if d[\u0026#39;ACTIVE_STATE\u0026#39;] == \u0026#39;\u0026#39;: d[\u0026#39;ACTIVE_STATE\u0026#39;] = \u0026#39;Active\u0026#39; if d[\u0026#39;VRF\u0026#39;] == \u0026#39;\u0026#39;: d[\u0026#39;VRF\u0026#39;] = \u0026#39;public\u0026#39; if d[\u0026#39;PROFILE\u0026#39;] == \u0026#39;\u0026#39;: d[\u0026#39;PROFILE\u0026#39;] = \u0026#39;none\u0026#39; if d[\u0026#39;LOGGING\u0026#39;] == \u0026#39;\u0026#39;: d[\u0026#39;LOGGING\u0026#39;] = \u0026#39;disable\u0026#39; if not d[\u0026#39;COUNTING\u0026#39;]: d[\u0026#39;COUNTING\u0026#39;] = \u0026#39;disable\u0026#39; if d[\u0026#39;TIME_RANGE\u0026#39;] == \u0026#39;\u0026#39;: d[\u0026#39;TIME_RANGE\u0026#39;] = \u0026#39;none\u0026#39; if d[\u0026#39;DESC\u0026#39;] == \u0026#39;\u0026#39;: d[\u0026#39;DESC\u0026#39;] = \u0026#39;none\u0026#39; if not d[\u0026#39;SESSION\u0026#39;]: d[\u0026#39;SESSION\u0026#39;] = \u0026#39;none\u0026#39; if not d[\u0026#39;SRC_ZONE\u0026#39;]: d[\u0026#39;SRC_ZONE\u0026#39;] = \u0026#39;any\u0026#39; if not d[\u0026#39;DEST_ZONE\u0026#39;]: d[\u0026#39;DEST_ZONE\u0026#39;] = \u0026#39;any\u0026#39; if not d[\u0026#39;SRC_IP\u0026#39;]: d[\u0026#39;SRC_IP\u0026#39;] = \u0026#39;any\u0026#39; if not d[\u0026#39;DEST_IP\u0026#39;]: d[\u0026#39;DEST_IP\u0026#39;] = \u0026#39;any\u0026#39; if not d[\u0026#39;SERVICE\u0026#39;]: d[\u0026#39;SERVICE\u0026#39;] = \u0026#39;any\u0026#39; if not d[\u0026#39;APPLICATION\u0026#39;]: d[\u0026#39;APPLICATION\u0026#39;] = \u0026#39;any\u0026#39; if not d[\u0026#39;USER\u0026#39;]: d[\u0026#39;USER\u0026#39;] = \u0026#39;any\u0026#39; # 调用expand_list()处理字典value为列表的键值对 res = self.expand_list(res) df = pd.DataFrame(res) # 安全策略表头 df_th = {\u0026#39;RULE_ID\u0026#39;: \u0026#39;ID\u0026#39;, \u0026#39;RULE_NAME\u0026#39;: \u0026#39;名称\u0026#39;, \u0026#39;ACTIVE_STATE\u0026#39;: \u0026#39;时间段状态\u0026#39;, \u0026#39;ACTION\u0026#39;: \u0026#39;动作\u0026#39;, \u0026#39;VRF\u0026#39;: \u0026#39;公网\u0026#39;, \u0026#39;PROFILE\u0026#39;: \u0026#39;内容安全\u0026#39;, \u0026#39;LOGGING\u0026#39;: \u0026#39;日志\u0026#39;, \u0026#39;COUNTING\u0026#39;: \u0026#39;统计\u0026#39;, \u0026#39;TIME_RANGE\u0026#39;: \u0026#39;时间段\u0026#39;, \u0026#39;DESC\u0026#39;: \u0026#39;描述\u0026#39;, \u0026#39;SESSION\u0026#39;: \u0026#39;会话\u0026#39;, \u0026#39;SRC_ZONE\u0026#39;: \u0026#39;源安全域\u0026#39;, \u0026#39;DEST_ZONE\u0026#39;: \u0026#39;目的安全域\u0026#39;, \u0026#39;SRC_IP\u0026#39;: \u0026#39;源地址\u0026#39;, \u0026#39;DEST_IP\u0026#39;: \u0026#39;目的地址\u0026#39;, \u0026#39;SERVICE\u0026#39;: \u0026#39;服务\u0026#39;, \u0026#39;APPLICATION\u0026#39;: \u0026#39;应用\u0026#39;, \u0026#39;USER\u0026#39;: \u0026#39;用户\u0026#39;} self.sp_df = df.rename(columns=df_th) # 下一步进行解析地址对象组回显内容 self.parse_obj_ip() # 2、解析 dis object-group ip address 回显内容（地址对象组） def parse_obj_ip(self): with open(self.obj_ip_textfsm_path, encoding=\u0026#39;utf8\u0026#39;) as f: template = TextFSM(f) res = template.ParseTextToDicts(self.contents) # 调用expand_list()处理字典value为列表的键值对 res = self.expand_list(res) df = pd.DataFrame(res) # 地址对象组表头 df_th = {\u0026#39;OBJ_GROUP_NAME\u0026#39;: \u0026#39;对象组名称\u0026#39;, \u0026#39;OBJ_ITEM\u0026#39;: \u0026#39;对象\u0026#39;, \u0026#39;REFERENCED\u0026#39;: \u0026#39;被引用\u0026#39;, \u0026#39;SEC_ZONE\u0026#39;: \u0026#39;安全域\u0026#39;, \u0026#39;DESC\u0026#39;: \u0026#39;描述\u0026#39;} self.obj_ip_df = df.rename(columns=df_th) # 下一步进行解析服务对象组回显内容 self.parse_obj_service() # 3、解析 dis object-group service 回显内容（服务对象组） def parse_obj_service(self): with open(self.obj_service_textfsm_path, encoding=\u0026#39;utf8\u0026#39;) as f: template = TextFSM(f) res = template.ParseTextToDicts(self.contents) # 调用expand_list()处理字典value为列表的键值对 res = self.expand_list(res) df = pd.DataFrame(res) # 服务对象组表头 df_th = {\u0026#39;OBJ_GROUP_NAME\u0026#39;: \u0026#39;对象组名称\u0026#39;, \u0026#39;OBJ_ITEM\u0026#39;: \u0026#39;对象\u0026#39;, \u0026#39;REFERENCED\u0026#39;: \u0026#39;被引用\u0026#39;, \u0026#39;DESC\u0026#39;: \u0026#39;描述\u0026#39;} self.obj_service_df = df.rename(columns=df_th) # 4、表格写入 def to_excel(self): # 运行以上三个解析内容的函数，一个串一个 self.parse_sp() # 文件名时间部分，用于区别新旧 create_time = datetime.now().strftime(\u0026#34;%Y%m%d%H%M%S\u0026#34;) self.output_path = f\u0026#39;核心防火墙安全策略统计{create_time}.xlsx\u0026#39; # 创建ExcelWriter对象并指定文件名 with pd.ExcelWriter(self.output_path) as writer: # 将三个DataFrame写入不同的工作表中，并且不写入行索引 self.sp_df.to_excel(writer, sheet_name=\u0026#39;安全策略\u0026#39;, index=False) self.obj_ip_df.to_excel(writer, sheet_name=\u0026#39;地址对象组\u0026#39;, index=False) self.obj_service_df.to_excel(writer, sheet_name=\u0026#39;服务对象组\u0026#39;, index=False) # 取出wb对象供define_excel_style()使用 self.wb = writer.book self.sheet_names = self.wb.sheetnames self.define_excel_style() # 5、调整表格样式 def define_excel_style(self): # 三个sheet self.ws1 = self.wb[self.sheet_names[0]] self.ws2 = self.wb[self.sheet_names[1]] self.ws3 = self.wb[self.sheet_names[2]] # 以单元格中当行最长字符串长度调整列宽 for sheet_name in self.sheet_names: worksheet = self.wb[sheet_name] # 遍历所有列，找出最宽的一列并调整列宽 for col in worksheet.columns: max_width = 0 column = col[0].column # openpyxl 中的列索引从 1 开始 # 计算每个单元格中最宽行的显示宽度，并选取最宽的一行 for cell in col: lines = str(cell.value).split(\u0026#34;\\n\u0026#34;) max_line_width = 0 for line in lines: width = wcwidth.wcswidth(line) + 2 if width \u0026gt; max_line_width: max_line_width = width if max_line_width \u0026gt; max_width: max_width = max_line_width # 将最宽行的显示宽度设置为该列的列宽 worksheet.column_dimensions[openpyxl.utils.get_column_letter(column)].width = max_width # 冻结首行 self.ws1.freeze_panes = \u0026#39;A2\u0026#39; self.ws2.freeze_panes = \u0026#39;A2\u0026#39; self.ws3.freeze_panes = \u0026#39;A2\u0026#39; # 表头背景色 th_color_fill = PatternFill(\u0026#39;solid\u0026#39;, fgColor=\u0026#39;D3D3D3\u0026#39;) for col in range(1, 19): self.ws1.cell(row=1, column=col).fill = th_color_fill for col in range(1, 6): self.ws2.cell(row=1, column=col).fill = th_color_fill for col in range(1, 6): self.ws3.cell(row=1, column=col).fill = th_color_fill # 垂直居中 for sheet_name in self.sheet_names: worksheet = self.wb[sheet_name] for r in worksheet: for c in r: c.alignment = openpyxl.styles.Alignment(vertical=\u0026#39;center\u0026#39;, wrapText=True) # 保存 self.wb.save(self.output_path) if __name__ == \u0026#39;__main__\u0026#39;: # 指定回显输出文件路径，同目录下直接 文件名 echo_content_path = \u0026#39;output.log\u0026#39; # 实例化对象 obj = SP2EXCEL(echo_content_path) # 执行 4、表格写入 obj.to_excel() print(\u0026#39;搞快点--\u0026gt;\u0026gt;搞快点--\u0026gt;\u0026gt;\u0026#39;) 生成的表格文件 安全策略sheet 地址对象组sheet 服务对象组sheet 最后 以上使用到的文件见github仓库： https://github.com/kiraster/GenerateSp2Excelv2 欢迎“来电”来函探讨 ","date":"2023-05-10T17:24:57Z","permalink":"https://kiraster.github.io/posts/cce1f96e.html/","title":"H3C 防火墙（v7）提取导出安全策略至表格(textfsm)"},{"content":"如何理解对事物存在敬畏之心？\n对事物存在敬畏之心通常是指一种对某些事物的高度敬重和敬仰，这种敬畏并不是害怕或畏惧，而是建立在了个人对该事物所具有的价值、力量或影响力上的认知之上。这种敬畏可以体现在对自然现象、伟大人物、传统文化或道德信仰等方面，也可以表现为对于神秘力量或未知领域的虔诚崇拜。\n具有敬畏之心的人会从内心深处感受到对某些事物或价值观的肃穆和庄重，并将其视为自己生命中至关重要的东西，而不是简单地被其外表所吸引或追求其表面的好处。这种态度可以使人更加谦虚、勤奋、坚定和不屈不挠，更加容易遵循自己的信念和原则，并且能在困难时坚持下去。\n如何理解事物的相对性？\n事物的相对性指的是事物在不同的情境和条件下可能呈现出不同的特征和表现。这是因为任何一个事物都必须在其周围的环境和与之相关的其他事物中存在和发展，而这些环境和事物可以通过不同角度和侧面来观察和理解，从而产生不同的认知和评价。\n比如说，在地球上，白昼与黑夜具有相对性，即当我们处于白天时，相对于太阳我们处于地球的阳面；而当我们处于晚上时，相对于太阳我们则处于地球的阴面。又比如，在人际关系中，好与坏、美与丑等概念也是相对的，因为它们的认定并不是绝对的，而是由我们的主观感受和价值观念所决定的。\n因此，理解事物的相对性需要从多个角度和侧面进行观察和分析，同时也需要考虑到各种社会文化和历史背景对事物认知和评价的影响。只有通过深入了解事物的多重属性和多元特征，才能更准确地把握其真正的本质和内涵。\n地球上，是先有鸡还是先有蛋？\n这个问题有不同的回答，具体取决于你如何定义“鸡”和“蛋”。如果我们按照生物学的角度来看待这个问题，那么答案应该是先有蛋，而不是先有鸡。\n第一只属于“鸡”的鸟应该是由于演化过程中出现了基因突变，使其与其亲代有所不同。这种变异产生了特定的DNA序列，让这只鸟成为了一个独立的物种——就是我们今天所称呼的“鸡”。\n然而，这只“鸡”的DNA序列必须来自于两只亲代鸟，它们很可能并不是“鸡”，而是某种早期的禽鸟。在这种情况下，第一只“鸡”的想法最初是由一对“非鸡”亲代鸟产生的，并且它孵化于一个“非鸡”蛋里。由此可知，在这个意义上，“蛋”比“鸡”更早存在。\n因此，从生物学角度而言，先有蛋，后有鸡。\n","date":"2023-04-29T15:43:06Z","permalink":"https://kiraster.github.io/posts/61f9c8a2.html/","title":"GPT问答230429"},{"content":"这篇文描述的是使用我注册的第二个Github账号对netops_v2.0_beta仓库进行一次pull requests\n计划是修改代码使其在Ubuntu环境也能正常运行，然后推送分支进行pull requests\n登陆Github 先fork原仓库至第二个账号（过程略），获取 Clone 链接 https://github.com/weeaster/netops_v2.0_beta.git ，克隆至本地\nkir@kir:~/my_repo/netops_v2.0_branch$ git clone https://github.com/weeaster/netops_v2.0_beta.git Cloning into \u0026#39;netops_v2.0_beta\u0026#39;... remote: Enumerating objects: 67, done. remote: Counting objects: 100% (67/67), done. remote: Compressing objects: 100% (49/49), done. remote: Total 67 (delta 32), reused 51 (delta 18), pack-reused 0 Receiving objects: 100% (67/67), 42.97 KiB | 31.00 KiB/s, done. Resolving deltas: 100% (32/32), done. kir@kir:~/my_repo/netops_v2.0_branch$ 修改代码 不是重点 主要内容是修改 msoffcrypto 替换 pywin32 库（原仓库已修改），修改系统的路径（左右斜杠符号） Ubuntu本地Git 本地git config配置（免密操作git push）\n$ git config --global user.name yourusername $ git config --global user.email yourmail@nb.com $ git config --list user.name=username user.email=yourmail@nb.com core.repositoryformatversion=0 core.filemode=true core.bare=false core.logallrefupdates=true remote.origin.url=https://github.com/weeaster/netops_v2.0_beta.git remote.origin.fetch=+refs/heads/*:refs/remotes/origin/* branch.main.remote=origin branch.main.merge=refs/heads/main cd命令进入本地代码目录，执行git init，提示重新初始化现有Git存储库（那么智能）\n$ git init Reinitialized existing Git repository in /home/kir/my_repo/netops_v2.0_branch/netops_v2.0_beta/.git/ 本地创建ssh-key（生成公钥和私钥）\nkir@kir:~/$ ssh-keygen -t ed25519 -C \u0026#34;yourmail@nb.com\u0026#34; Generating public/private ed25519 key pair. Enter file in which to save the key (/home/kir/.ssh/id_ed25519): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/kir/.ssh/id_ed25519 Your public key has been saved in /home/kir/.ssh/id_ed25519.pub The key fingerprint is: SHA256:xxxxxx The key\u0026#39;s randomart image is: +--[ED25519 256]--+ …… …… +----[SHA256]-----+ Github网站添加SSH keys（基操）\n测试\nkir@kir:~/my_repo/netops_v2.0_branch/netops_v2.0_beta$ ssh -T git@github.com The authenticity of host \u0026#39;github.com (20.205.243.166)\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:xxxxxx This key is not known by any other names Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;github.com\u0026#39; (ED25519) to the list of known hosts. Hi weeaster! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. 设置远程仓库地址（https//xxxx不好使，换成git@xxxx）\n$ git remote rm origin $ git remote add origin git@github.com:weeaster/netops_v2.0_beta.git $ git remote -v origin git@github.com:weeaster/netops_v2.0_beta.git (fetch) origin git@github.com:weeaster/netops_v2.0_beta.git (push) 三板斧git add,git commit,git push，推送到ubuntu-branch分支\n$ git checkout -b ubuntu-branch $ git add . $ git commit -m \u0026#34;ubuntu-branch push\u0026#34; $ git push origin ubuntu-branch 第7步中可能出现的插曲，原因是在github设置了Keep my email addresses private，处理步骤如下\n回显错误提示\n$ git push origin ubuntu-branch Enumerating objects: 25, done. Counting objects: 100% (25/25), done. Delta compression using up to 4 threads Compressing objects: 100% (13/13), done. Writing objects: 100% (13/13), 1.60 KiB | 327.00 KiB/s, done. Total 13 (delta 8), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (8/8), completed with 8 local objects. remote: error: GH007: Your push would publish a private email address. remote: You can make your email public or disable this protection by visiting: remote: http://github.com/settings/emails To github.com:weeaster/netops_v2.0_beta.git ! [remote rejected] ubuntu-branch -\u0026gt; ubuntu-branch (push declined due to email privacy restrictions) error: failed to push some refs to \u0026#39;github.com:weeaster/netops_v2.0_beta.git\u0026#39; 在github网站：http://github.com/settings/emails 的keep my Email private 选项下的找到匿名 Email； 格式是：id+username@users.noreply.github.com\n重新设置git用户\n$git config --global user.email \u0026#34;id+username@users.noreply.github.com\u0026#34; 重置上次commit提交的作者信息\n$ git commit --amend --reset-author 再次push\n$ git push origin ubuntu-branch Compare\u0026amp;pull request 切换到 ubuntu-branch 分支，点击 Compare \u0026amp; pull request 按钮 填写信息 原仓库账号处理pull requests 查看pull requests 拒绝该次pull requests 原仓库账号创建分支 提交pull request 的账号重新本地push到一个新分支；重复Compare\u0026amp;pull request步骤，提交pull request时注意选择原仓库创建的分支\n同意合并 检查 打开Comparing查看lib/comm.py部分代码，可以看到路径的斜杠符号是左斜杠/\n最后 知乎有个图画挺好，我画一下 总体来说还行 我不是搞软件的，这么一搞也就图一乐 拜了个拜 这篇文，不那么欢迎“来电”来函探讨 ","date":"2023-04-29T00:11:07Z","permalink":"https://kiraster.github.io/posts/9a95f1cd.html/","title":"Github之pull requests提交分支"},{"content":"Ubuntu服务端采用publickey方式验证客户端身份，客户端本地vscode连接至Ubuntu服务端进行python远程调试\n环境描述：\nvscode 1.77.3 VMware Station 15.0 Ubuntu 22.04.1 Python 3.10.6 本地用户密钥生成 生成安全的密钥\nC:\\Users\\xxx\u0026gt; ssh-keygen -t ed25519 根据需要是否修改保存的路径和文件名（可能会与之前生成的密钥同名）\n根据需要是否设置passphrase口令（如设置每次验证需要输入该密码）\n上传pub文件至服务端 将.pub公钥文件上传至ubuntu 22.04 ~/.ssh(/home/kir/.ssh)目录下\n追加.pub公钥文件至authorized_keys\nsudo cat id_ed25519.pub \u0026gt;\u0026gt; authorized_keys 重启ssh服务\nsystemctl restart sshd 本地连接测试\nssh kir@172.31.100.213 The authenticity of host \u0026#39;172.31.100.213 (172.31.100.213)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is SHA256:xxxxxxx Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;172.31.100.213\u0026#39; (ECDSA) to the list of known hosts. Welcome to Ubuntu 22.04.2 LTS (GNU/Linux 5.15.0-71-generic x86_64) …… …… …… Last login: Thu Apr 27 14:09:13 2023 from 172.31.100.2 kir@kir:~$ vscode设置 插件——搜索——安装 Remote - SSH 插件\n点击左侧图标，点击REMOTE\u0026ndash;设置，弹出的菜单中选择电脑的config文件路径\n由于我本机还设置了github和gitlab的公钥，只需在config文件增加对应配置\n# GitLab Account Host xxx Hostname xxx PreferredAuthentications publickey IdentityFile C:\\Users\\xxx\\.ssh\\id_xxx # GitHub Account Host github.com Hostname github.com PreferredAuthentications publickey IdentityFile C:\\Users\\xxx\\.ssh\\id_xxx # python_ubuntu_server Host 172.31.100.213 Hostname 172.31.100.213 PreferredAuthentications publickey IdentityFile C:\\Users\\xxx\\.ssh\\id_ubuntu 选择ubuntu服务器连接（连接前保存工作区或选择在新窗口打开）\n登陆后，在控制台手动创建目录，再左侧添加目录\n创建目录\nkir@kir:~$ sudo mkdir -p ~/my_repo/test_dir 设置权限（为了方便，就设777）\nkir@kir:~$ sudo chmod 777 ~/my_repo/test_dir Python插件安装\n服务端设置 安装pip\nsudo apt install python3-pip 安装第三方库\u0026ndash;测试\nkir@kir:~/my_repo/test_dir$ sudo pip install ping3 Collecting ping3 Downloading ping3-4.0.4-py3-none-any.whl (13 kB) Installing collected packages: ping3 Successfully installed ping3-4.0.4 WARNING: Running pip as the \u0026#39;root\u0026#39; user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv kir@kir:~/my_repo/test_dir$ pip show ping3 Name: ping3 Version: 4.0.4 Summary: A pure python3 version of ICMP ping implementation using raw socket. Home-page: Author: Author-email: Kyan \u0026lt;kai@kyan001.com\u0026gt; License: The MIT License (MIT) …… 虚拟环境\u0026ndash;测试\n# 安装python3.10-venv kir@kir:~/my_repo/test_dir$ sudo apt install python3.10-venv # 创建虚拟环境 kir@kir:~/my_repo/test_dir$ source venv/bin/activate # 退出虚拟环境 (venv) kir@kir:~/my_repo/test_dir$ deactivate kir@kir:~/my_repo/test_dir$ 最后 总体来说能用，就是非root用户跑python有可能会遇到权限问题（可能需要sudo） 为什么要搞远程python，因为发现在windows平台跑python时不时会遇到一些第三方库安装运行时出的一些不知道时什么不知道的问题 欢迎“来电”来函探讨 ","date":"2023-04-27T14:52:12Z","permalink":"https://kiraster.github.io/posts/837aa3ce.html/","title":"Ubuntu publickey方式SSH连接与vscode远程调试"},{"content":"最近测试了python脚本执行钉钉机器人发消息和邮件发送，本想集成到上一篇文章中的脚本里，奈何想不到比较实用的场景。\n突然想到自己的台式电脑是来电自动开机的设置，略有所思后想到把开关机事件自动发送邮件。\n本人平生不知道注册多少个邮箱，想到163邮箱用的很少，所有就用它。登陆后发现里头有很多未读邮件，有安全提示和各种广告，都是几年前的了，估计是邮箱被盗用，全球各地的IP地址登陆和某位苹果玩家拿我邮箱修改了Apple ID……\n一顿操作后把授权码弄出来了（1毛短信费），这个钉钉机器人就不记录操作步骤了，搜索引擎遍地都是，下面记录电脑开关机事件自动发送邮件过程。\n获取邮箱授权码 这个步骤各大在线邮箱都差不多，基本都能在设置中找到\n安装yagmail库 这是个第三方库，看到搜索引擎上满满的手写一大段代码填写邮件参数，这玩意儿还能这么不智能，不就是跟foxmail客户端一样填那几样参数么，所以使用yagmail，简单\npip install yagmail 代码 由于是两个不同的事件邮件，我分两个python脚本\nauto_email_strtup.py\nimport yagmail from datetime import datetime # 连接服务器 yag = yagmail.SMTP(user=\u0026#34;一三九啤酒白酒葡萄酒@163.com\u0026#34;, password=\u0026#34;此处填写授权码\u0026#34;,host=\u0026#39;smtp.163.com\u0026#39;) # 编辑邮件内容 time_str = datetime.now().strftime(\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) content = [f\u0026#39;时间：{time_str}\u0026#39;, \u0026#39;事件：台式电脑开机\u0026#39;] # 发送邮件，to = 收件人邮箱 yag.send(to = \u0026#39;一三八吃吧吃吧吃吧吃吧@139.com\u0026#39;, subject=\u0026#39;电脑开关机事件\u0026#39;, contents = content) auto_email_shutdown.py\nimport yagmail from datetime import datetime # 连接服务器 yag = yagmail.SMTP(user=\u0026#34;一三九啤酒白酒葡萄酒@163.com\u0026#34;, password=\u0026#34;此处填写授权码\u0026#34;,host=\u0026#39;smtp.163.com\u0026#39;) # 编辑邮件内容 time_str = datetime.now().strftime(\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) content = [f\u0026#39;时间：{time_str}\u0026#39;, \u0026#39;事件：台式电脑关机\u0026#39;] # 发送邮件，to = 收件人邮箱 yag.send(to = \u0026#39;一三八吃吧吃吧吃吧吃吧@139.com\u0026#39;, subject=\u0026#39;电脑开关机事件\u0026#39;, contents = content) 由于是windows电脑，还需要编写两个bat脚本中转运行以上代码\nauto_email_strtup.bat\npython F:\\xxxx\\auto_email_startup.py auto_email_shutdown.bat (需手动指定python解释器路径)\nC:\\Python3.x.x\\python.exe F:\\xxxx\\auto_email_shutdown.py window设置计划任务和组策略 开机自动邮件的设置 关机自动邮件的设置 dingtalkchatbot插件 夹带钉钉机器人发消息的代码，使用到以上这个库，具体见dingtalkchatbot插件 首先登陆钉钉，创建一个群，添加机器人，记录生成的webhook等参数\n可以把以下代码组装成一个可传参的函数，调用的时候传递参数msg\n可以设置各种条件发送不同的msg\n电脑和手机已卸载钉钉，就没截图了\nfrom dingtalkchatbot.chatbot import DingtalkChatbot, ActionCard, CardItem # WebHook地址 webhook = \u0026#39;WebHook地址\u0026#39; secret = \u0026#39;secret\u0026#39; # 可选：创建机器人勾选“加签”选项时使用 # 初始化机器人小丁 # xiaoding = DingtalkChatbot(webhook) # 方式一：通常初始化方式 xiaoding = DingtalkChatbot(webhook, secret=secret) # 方式二：勾选“加签”选项时使用（v1.5以上新功能） # xiaoding = DingtalkChatbot(webhook, pc_slide=True) # 方式三：设置消息链接在PC端侧边栏打开（v1.5以上新功能） # Text消息是否@所有人 res = xiaoding.send_text(msg=\u0026#39;DSB,我就是小丁，小丁就是我！\u0026#39;, is_at_all=False) # 返回结果显示 print(res) 最后 如果网络环境允许的话，可以编写python脚本探测设备的可达性、根据设备的告警阀值触发邮件发送和机器人信息发送，或其他条件触发\n欢迎“来电”来函探讨\n","date":"2023-04-22T16:20:52Z","permalink":"https://kiraster.github.io/posts/1e32fc6d.html/","title":"电脑开关机邮件提醒"},{"content":"一个使用nornir框架编写的跑脚本工具。之前写过一版这个菜单式跑python脚本的工具，简直臃肿的不堪入目，后面发现需要添加改进功能真让我头大。了解nornir后，一直就想把功能移植过来，现在搞的差不多了，分享一下\n在32位windows系统中无法使用本脚本，原因是有几个第三方库从某个版本开始不再开发和维护32位系统的代码，而库的依赖最低版本大于最后发布的32位版本，或者装不上，亦或装上了无法用。So……\n介绍 在nornir 3.3.0框架上进行功能编写 使用nornir自带的并发机制，专注于功能的实现 nornir具有与其他开源模块的联动功能，如netbox、sql、scrapli、napalm等，具有强扩展性 main分支是在windows平台下运行的脚本 ubuntu-branch分支是在ubuntu server下运行的脚本（其他linux发行版，应该也可以） 测试环境 windows Microsoft Windows 10 Pro 21H2 Visual studio code Update 1.77.3 Python 3.10.10 nornir==3.3.0 Ubuntu Ubuntu 22.04.2 LTS Python 3.10.6 nornir==3.3.0 Simulation Software HCL 5.7.2 DeviceModel：H3C S5820V2-54QS-GE Topology 运行界面 脚本启动界面 批量备份配置 批量修改配置 筛选\u0026ndash;\u0026gt;执行 获取交换机 端口-MAC地址 和 搜索MAC地址对应设备 批量snmp轮询 批量ssh可达性测试 批量ping可达性测试 批量保存配置 查看设备清单 导出诊断信息和日志（TFTP） 生成的文件 文件根目录 功能说明 批量备份配置 根据加载的设备清单，读取ssh登陆信息登陆设备，执行display列中的display命令，将回显内容写入到EXPORT\\当天日期\\export_conf文件夹下，每个设备的回显内容分别记录在一个txt文件(格式：name + ip + 当前时间.txt)，运行结果记录在EXPORT\\当天日期\\result_当天日期.log文件 批量修改配置 根据加载的设备清单，读取ssh登陆信息登陆设备，执行config列中的config命令，将回显内容写入到EXPORT\\当天日期\\modify_conf文件夹下，每个设备的回显内容分别记录在一个txt文件(格式：name + ip + 当前时间.txt)，运行结果记录在EXPORT\\当天日期\\result_当天日期.log文件 筛选\u0026ndash;\u0026gt;执行 选择该功能选项后，会在二级菜单显示主菜单中的1、2、6、7、8、9功能 选择对应功能后进入筛选菜单 筛选菜单： IP地址-筛选 平台-筛选 设备型号-筛选 区域-筛选 组合筛选 获取交换机 端口-MAC地址 该功能通过获取交换机MAC地址表和trunk接口信息，求差集获取到非trunk接口的MAC地址表，表格文件存储到EXPORT\\当天日期\\generate_table，格式为：当天日期_当前时间_MAC地址表.xlsx 强烈建议在代码task.run前进行filter过滤接入交换机的nr对象 运行结果记录在EXPORT\\当天日期\\result_当天日期.log文件 搜索MAC地址对应设备 本功能依赖功能4中生成的MAC地址表，需要使用本功能先执行功能4 输入的MAC地址格式任意，可以是全匹配如：4426-0f92-0d06，也可以是其中部分如：0d06 或 4426，或者任意字符（没有意义） 批量snmp轮询 根据加载的设备清单，执行snmp_get操作，将获取到的结果写入到SNMP轮询结果表，表格文件存储到EXPORT\\当天日期\\generate_table，格式为：当天日期_当前时间_snmp轮询结果表.xlsx 运行结果记录在EXPORT\\当天日期\\result_当天日期.log文件 批量ssh可达性测试 根据加载的设备清单，读取ssh登陆信息登陆设备，以获取到设备的prompt作为依据判断ssh可达，运行结果记录在EXPORT\\当天日期\\result_当天日期.log文件 批量ping可达性测试 根据加载的设备清单，执行ping操作，以没有异常作为依据判断ping可达，运行结果记录在EXPORT\\当天日期\\result_当天日期.log文件 批量保存配置 根据加载的设备清单，执行netmiko_save_config操作，以没有异常作为依据判断保存成功，运行结果记录在EXPORT\\当天日期\\result_当天日期.log文件 显示设备清单 根据加载的设备清单，列出[\u0026rsquo;name\u0026rsquo;, \u0026lsquo;ip\u0026rsquo;, \u0026lsquo;platform\u0026rsquo;, \u0026lsquo;model\u0026rsquo;, \u0026lsquo;device_type\u0026rsquo;, \u0026lsquo;area\u0026rsquo;, \u0026rsquo;location\u0026rsquo;, \u0026lsquo;version\u0026rsquo;, \u0026lsquo;sn\u0026rsquo;]等内容 导出诊断信息和日志（TFTP） 根据nr.filter(hostname=device_ip)过滤单台设备，对设备的诊断信息文件，诊断日志文件和日志文件上传到 TFTP 服务器 如何使用 下载 Github仓库地址：https://github.com/kiraster/netops_v2.0_beta\n虚拟环境 由于正常运行需要安装很多第三方库，且有些库的依赖需要降级版本才能正常运行，或可能与你当前python环境会有冲突，建议在虚拟环境下运行\n以vscode软件举例:\n代码编辑打开目录并控制台切换到代码根目录\n创建虚拟环境\npython -m venv venv 激活虚拟环境\n.\\venv\\Scripts\\Activate.ps1 安装 python 库 pip install -r requirements.txt 安装库的时候可能遇到timeout提示，检查网络；如遇报错看提示去Google\n运行前说明 查看nornir.yaml文件，发现plugin: ExcelInventory，是因为本代码使用了【nornir_table_inventory 插件】 excel_file: \u0026quot;inventory/inventory_unprotected.xlsx\u0026quot;，这行配置指示了需要的excel文件，注意看文件名（unprotected），这是一个不带保护密码的excel文件，具体说明见README文件\ninventory文件夹下还有一个inventory_protected.xlsx文件，这是一个有保护密码的文件\ninventory_protected.xlsx文件需要自行制作并设置一个保护密码，以下是本机环境中的格式，可参照插件作者的示例增删改\ninventory_protected.xlsx文件中dispaly和config列的内容是查看命令和配置命令，每个命令之间使用逗号,分隔；如在单元格内使用手动换行(换行符\\n)需要修改代码中cmds = task.host.get('display').split(',')和cmds = task.host.get('config').split(',')的split(',')\n可以根据实际情况修改num_workers并发进程数和日志记录\n如修改inventory路径和excel文件名，自行更新代码中对应的路径变量\n代码执行逻辑 最后 总有不足之处，可以提，但不一定改 我总觉得使用display和show等命令去采集设备信息不是一个很妥的方式，特别是配合textfsm形成列表套字典再写入表格；且不说速度慢，每一个命令对应一个模板导致代码结构不简洁和繁多，每个厂商的命令也不尽相同，有时同厂商同命令的回显也有差异导致要修改模板；同一源IP地址过度使用ssh登陆可能会被安全设备记录异常行为，特别是设备不可达或密码错会被识别为爆破攻击。 采集就由专业的snmp去干就好，速度快。很多公共的OID一轮询就得出结果。实在不济可以弄得专业点写个针对厂商和型号的snmp轮询模板（我不会），再专业点可以去下载设备的MIB文件鼓捣鼓捣（你来），很多厂商的网管平台号称可以纳管友商设备靠的不就是这个 对于批量修改配置，我的看法是慎用，特别是涉及控制层面的配置；如果要使用尽量在风险可控的前提下使用，如改个设备名称，添加描述，设备开局的批量调试等等；如确实要跑脚本建议先验证再验证，先小范围跑一两台设备，重要设备就手敲；随时做好提桶跑路。 现网运行业务的时候不要乱搞，看过一个运维的采购文件，中断一次扣多少钱，多长时间内不能恢复又扣钱，看的胆战心惊的，这很大程度上让我理解了为什么一个看似不大规模的运维项目最终报价高的离谱，可能也许包含了一部分这些风险 欢乐的时光总是特别短，又到时候讲byebye 欢迎“来电”来函探讨。 20230513 更新了此文章内容\n","date":"2023-04-16T23:33:58Z","permalink":"https://kiraster.github.io/posts/9571d5ee.html/","title":"一个使用nornir框架编写的跑脚本工具"},{"content":"一个小测试，实现HCL模拟器下利用python脚本根据交换机的背板MAC地址（真机环境可以换成序列号）自动加载配置。\n环境介绍：\nHCL v5.7.1 Python 3.10.10 Tftpd64 version 4.60 步骤 编写python脚本 制作一个后缀名为.py的脚本。主要作用是空配置交换机开机执行自动配置，下载到本地并执行文件\n由于HCL模拟器里的交换机序列号都一样的，勉为其难改用背板MAC地址；如果是真机设备直接用序列号；脚本中预留了序列号的代码，简单修改一下便可\n设备 H3C S6850_1: MAC_ADDRESS:68-bf-6d-ad-01-04 设备 H3C S6850_2: MAC_ADDRESS:68-45-dc-f1-02-04 #!/usr/bin/python #-*-coding:utf-8-*- import comware import platformtools def do_reboot(): # scheduler job reboot platformtools.CLI(\u0026#39;system-view ;scheduler job startup_reboot ;command 1 reboot force ;quit\u0026#39;) # exec-delay platformtools.CLI(\u0026#39;system-view ;scheduler schedule do_reboot ;job startup_reboot ;time once delay 1\u0026#39;) def apply_sw1_config(): # Specify system startup platformtools.CLI(\u0026#39;restore startup-configuration from 172.31.100.2 sw1_config.cfg\u0026#39;) do_reboot() def apply_sw2_config(): # Specify system startup platformtools.CLI(\u0026#39;restore startup-configuration from 172.31.100.2 sw2_config.cfg\u0026#39;) do_reboot() # more device ... # def apply_sw3_config(): # # Specify system startup # platformtools.CLI(\u0026#39;restore startup-configuration from 172.31.100.2 sw3_config.cfg\u0026#39;) # do_reboot() # find DEVICE_SERIAL_NUMBER res = platformtools.CLI(\u0026#39;dis dev man\u0026#39;, False) for i in res.get_output(): # if \u0026#39;DEVICE_SERIAL_NUMBER\u0026#39; in i: if \u0026#39;68-bf-6d-ad-01-04\u0026#39; in i: apply_sw1_config() break if \u0026#39;68-45-dc-f1-02-04\u0026#39; in i: apply_sw2_config() break # more device ... # if \u0026#39;DEVICE_SERIAL_NUMBER\u0026#39; in i: # apply_sw2_config() # break 准备设备配置文件 sw1_config.cfg sw2_config.cfg # sysname sw1_s6850 # telnet server enable ssh server enable # vlan 10 to 20 # int vlan 1 ip add 172.31.100.10 24 # int vlan 10 ip add 192.168.10.254 24 # interface GigabitEthernet 1/0/23 port link-type trunk port trunk permit vlan all undo shutdown # interface GigabitEthernet 1/0/24 port link-type trunk port trunk permit vlan all undo shutdown # local-user admin password simple Cisco123!@# authorization-attribute user-role network-admin authorization-attribute user-role network-operator service-type ssh telnet quit # line vty 0 63 authentication-mode scheme user-role network-operator # return 启动HTTP服务端 搭建一个简单的http服务端（可以使用网上的各种小工具，安全性自己判断），如果有python环境可以直接启动一个简易的http服务端，搭建完成后使用浏览器打开链接，确保url能正确指向第一步中的python脚本文件。\nPS D:\\TEMP\\tftpd64.460\u0026gt; python -m http.server Serving HTTP on :: port 8000 (http://[::]:8000/) ... 浏览器URL测试\n配置TFTP服务端和DHCP服务端参数 TFTP目录选择设备配置文件的目录 如果电脑有多块网卡，选择绑定需要用到的网卡IP地址 DHCP填写的Boot File 是python脚本文件的URL Tips：为了方便使用建议把device.py和设备.cfg配置文件统一放到TFTP的目录下，http服务端的启动命令也在TFTP目录下启动。\n启动测试 临时关闭本机环境中的其他DHCP服务端 HCL模拟器里的交换机桥接到本地 模拟器设备开机 TFTP软件观察发现已经分配两个地址\n第一台S6850 启动，观察发现下载了device.py文件，并按照py脚本命令执行了一些配置\n第二台S6850 启动，观察发现下载了device.py文件，并按照py脚本命令执行了一些配置\n按照设定的1分钟后重启设备，观察到出现两次Press ENTER to get started.表示已经重启了；设备名称也按照配置文件里的更改了\n使用SSH登陆设备，能通过配置文件里配置的IP地址登陆设备\n查看sw1的一些配置\n结束 HCL模拟器的序列号一致不能通过序列号操作，实为憾事 这个方法可应用在一定规模的组网，前提条件是安装前要记录安装位置与设备序列号的对应关系 这个方法只能应用在完全空配置的设备，保存过配置的交换机就不能操作了 如果是真实设备使用，注意本机电脑的防火墙设置 前线安装人员要确定设备已加电和设备端口的指示灯状态 方法操作没有问题，但是有时候去实施，甲方看到你老是在电脑面前操作，这个体现不出工作量，需要注意，两天的活你半小时不到干完了 修改一下脚本，还能用在没有console线的环境下应急，同样确保设备是空配置启动 device.py文件里的代码有一个重启设备的定时任务，由于是做实验我设置了1分钟后重启，如果是真实环境这个延时重启建议配置时间大一点 ","date":"2023-03-18T13:18:59Z","permalink":"https://kiraster.github.io/posts/c69db7e2.html/","title":"H3C自动配置(HTTP Python方式)"},{"content":"一个小实验，观察OSPF虚链路、虚链路的替代办法。\n拓扑图：\n如上图所示，右边 AREA 2、3、4 普通区域被 AREA 1 分割。\n要求：不改动物理连线的方式配置设备，使得 R1 学习到 R6、R7、R8上的路由。\n方式一：R2 \u0026ndash; R3 间配置跨 AREA 1 的虚链路\n方式二：R2 \u0026ndash; R4 间配置 Tunnel 隧道，配置宣告\n方式三：R5 上 配置 AREA 4 在另一个 OSPF 进程，配置重分布\n方式一 !--- R2 commands. router ospf 100 area 1 virtual-link 3.3.3.3 !--- R3 commands. router ospf 100 area 1 virtual-link 2.2.2.2 方式二 !--- R2 commands. ! interface Tunnel0 ip address 100.1.1.1 255.255.255.252 tunnel source 24.1.1.2 tunnel destination 24.1.1.4 ! router ospf 100 # 将Tunnel接口地址宣告进区域0 network 100.1.1.1 0.0.0.0 area 0 ! !--- R4 commands. interface Tunnel0 ip address 100.1.1.2 255.255.255.252 tunnel source 24.1.1.4 tunnel destination 24.1.1.2 ! router ospf 100 # 将Tunnel接口地址宣告进区域0 network 100.1.1.2 0.0.0.0 area 0 ! 方式三 R5#sh run | s r o router ospf 100 router-id 5.5.5.5 # 重分布 redistribute ospf 200 subnets network 5.5.5.5 0.0.0.0 area 1 network 25.1.1.5 0.0.0.0 area 1 # 配置 AREA 4 在另一个 OSPF 进程 router ospf 200 router-id 55.55.55.55 # 重分布 redistribute ospf 100 subnets network 58.1.1.5 0.0.0.0 area 4 R5# 观察 R1 上查看 OSPF 路由，发现能学习到 R6，R7，R8上的环回口路由；Tunnel接口的地址也被学习到，而且是 O 表项路由属于区域 0 ，R8 的路由因为在R5 上进行了双向重分布显示为 OE2 表项。 R6，R7 则是区域间路由，逻辑上的直连区域0。\nR1#sh ip route ospf Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is not set 2.0.0.0/32 is subnetted, 1 subnets O 2.2.2.2 [110/11] via 12.1.1.2, 00:26:14, Ethernet0/0 3.0.0.0/32 is subnetted, 1 subnets O IA 3.3.3.3 [110/21] via 12.1.1.2, 00:25:54, Ethernet0/0 4.0.0.0/32 is subnetted, 1 subnets O IA 4.4.4.4 [110/21] via 12.1.1.2, 00:26:03, Ethernet0/0 5.0.0.0/32 is subnetted, 1 subnets O IA 5.5.5.5 [110/21] via 12.1.1.2, 00:26:03, Ethernet0/0 6.0.0.0/32 is subnetted, 1 subnets O IA 6.6.6.6 [110/31] via 12.1.1.2, 00:25:54, Ethernet0/0 7.0.0.0/32 is subnetted, 1 subnets O IA 7.7.7.7 [110/1021] via 12.1.1.2, 00:25:53, Ethernet0/0 8.0.0.0/32 is subnetted, 1 subnets O E2 8.8.8.8 [110/11] via 12.1.1.2, 00:25:53, Ethernet0/0 23.0.0.0/24 is subnetted, 1 subnets O IA 23.1.1.0 [110/20] via 12.1.1.2, 00:26:14, Ethernet0/0 24.0.0.0/24 is subnetted, 1 subnets O IA 24.1.1.0 [110/20] via 12.1.1.2, 00:26:14, Ethernet0/0 25.0.0.0/24 is subnetted, 1 subnets O IA 25.1.1.0 [110/20] via 12.1.1.2, 00:26:14, Ethernet0/0 36.0.0.0/24 is subnetted, 1 subnets O IA 36.1.1.0 [110/30] via 12.1.1.2, 00:25:54, Ethernet0/0 47.0.0.0/24 is subnetted, 1 subnets O IA 47.1.1.0 [110/1020] via 12.1.1.2, 00:26:14, Ethernet0/0 58.0.0.0/24 is subnetted, 1 subnets O E2 58.1.1.0 [110/10] via 12.1.1.2, 00:25:54, Ethernet0/0 100.0.0.0/30 is subnetted, 1 subnets O 100.1.1.0 [110/1010] via 12.1.1.2, 00:26:14, Ethernet0/0 R1# R2上查看 OSPF 邻居，发现除常规的邻居外，还有Tunnel0 的邻居和虚链路的邻居，两种邻居的区别在于虚链路邻居一旦邻居建立处于稳定状态，不发送hello报文，而且Dead Time 永不超时。而Tunnel0 的邻居有Dead Time 默认40秒，debug 查看 hello 会发现*Mar 16 15:24:11.782: OSPF-100 HELLO Tu0: Rcv hello from 4.4.4.4 area 0 100.1.1.2，好像没什么用，好看\nR2#sh ip os nei Neighbor ID Pri State Dead Time Address Interface 4.4.4.4 0 FULL/ - 00:00:30 100.1.1.2 Tunnel0 1.1.1.1 1 FULL/BDR 00:00:32 12.1.1.1 Ethernet0/0 3.3.3.3 0 FULL/ - - 23.1.1.3 OSPF_VL0 5.5.5.5 1 FULL/DR 00:00:33 25.1.1.5 Ethernet0/3 4.4.4.4 1 FULL/DR 00:00:34 24.1.1.4 Ethernet0/2 3.3.3.3 1 FULL/DR 00:00:37 23.1.1.3 Ethernet0/1 R2# R8上查看路由表，因为在R5上进行了重分布，R5是ASBR。所有看到的OSPF路由表项都是 OE\nR8#sh ip rou os Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP a - application route + - replicated route, % - next hop override, p - overrides from PfR Gateway of last resort is not set 1.0.0.0/32 is subnetted, 1 subnets O E2 1.1.1.1 [110/21] via 58.1.1.5, 00:41:42, Ethernet0/0 2.0.0.0/32 is subnetted, 1 subnets O E2 2.2.2.2 [110/11] via 58.1.1.5, 00:41:42, Ethernet0/0 3.0.0.0/32 is subnetted, 1 subnets O E2 3.3.3.3 [110/21] via 58.1.1.5, 00:41:42, Ethernet0/0 4.0.0.0/32 is subnetted, 1 subnets O E2 4.4.4.4 [110/21] via 58.1.1.5, 00:41:42, Ethernet0/0 5.0.0.0/32 is subnetted, 1 subnets O E2 5.5.5.5 [110/1] via 58.1.1.5, 00:41:42, Ethernet0/0 6.0.0.0/32 is subnetted, 1 subnets O E2 6.6.6.6 [110/31] via 58.1.1.5, 00:41:41, Ethernet0/0 7.0.0.0/32 is subnetted, 1 subnets O E2 7.7.7.7 [110/31] via 58.1.1.5, 00:01:46, Ethernet0/0 12.0.0.0/24 is subnetted, 1 subnets O E2 12.1.1.0 [110/20] via 58.1.1.5, 00:41:42, Ethernet0/0 23.0.0.0/24 is subnetted, 1 subnets O E2 23.1.1.0 [110/20] via 58.1.1.5, 00:41:42, Ethernet0/0 24.0.0.0/24 is subnetted, 1 subnets O E2 24.1.1.0 [110/20] via 58.1.1.5, 00:41:42, Ethernet0/0 25.0.0.0/24 is subnetted, 1 subnets O E2 25.1.1.0 [110/10] via 58.1.1.5, 00:41:42, Ethernet0/0 36.0.0.0/24 is subnetted, 1 subnets O E2 36.1.1.0 [110/30] via 58.1.1.5, 00:41:42, Ethernet0/0 47.0.0.0/24 is subnetted, 1 subnets O E2 47.1.1.0 [110/30] via 58.1.1.5, 00:01:46, Ethernet0/0 100.0.0.0/30 is subnetted, 1 subnets O E2 100.1.1.0 [110/1010] via 58.1.1.5, 00:41:42, Ethernet0/0 R8# R8# sh ip os border-routers OSPF Router with ID (8.8.8.8) (Process ID 200) Base Topology (MTID 0) Internal Router Routing Table Codes: i - Intra-area route, I - Inter-area route i 55.55.55.55 [10] via 58.1.1.5, Ethernet0/0, ASBR, Area 4, SPF 2 R8# ","date":"2023-03-16T22:45:33Z","permalink":"https://kiraster.github.io/posts/5c8077d9.html/","title":"观察OSPF虚链路和虚链路的替代办法"},{"content":"一个基于Django编写的SNMP轮询Demo，可以对设备（代码内置了H3C OID部分规则）进行SNMP轮询，icmp连通性检测，并将结果写入数据库，前端页面读取数据库数据进行直观的展示。效果图可点击本页面导航栏的Gallery相册查看。\n一个视频 无解说无字幕，嫌BGM太吵可静音\n缘由 声明：我不是搞软件的\n当初仅为了在项目实施中显示设备的上线情况和快速查找到需要变更配置的设备；后来越搞越多，像首页，设备导出，修改页，查看配置，计划任务，清空数据等功能并不是我当初有计划要制作的；最后及时刹车，许多脑中风暴的功能没有继续写，也没有继续添加功能的计划。\n代码组成及工作流 框架\nBootstrap-3.3.7+Django4.0.7+MySql-5.7.39（或sqlite）\n工作流\n设备初始参数写入数据库 设备的轮询，并对结果进行写入数据库 前端页面对数据的展示 页面及功能 首页 设备类型统计显示 设备在线/离线、CPU使用率、内存使用率概览饼状图显示 设备CPU使用率、内存使用率 TOP 10 显示 关于 设备管理 设备数据显示 设备添加 snmp测试 继续添加 添加并返回 设备导出 设备详情 刷新 执行查看配置 设备参数修改、同步、删除 计划任务 定时任务 手动任务 更多操作 批量导入 清空数据 如何使用 clone 仓库代码至本地或使用浏览器下载压缩包\ngit clone https://github.com/kiraster/ndgv_demo.git 或 https://github.com/kiraster/ndgv_demo Code \u0026ndash;\u0026raquo; Download ZIP\n本地处理 使用任意支持Python 的 IDE工具，将代码目录添加\n安装环境 为了不影响你电脑的python环境，建议使用虚拟环境运行本代码（以下用Visual Studio Code 软件举例）\nIDE工具控制台切换到代码根目录\n创建虚拟环境\npython -m venv venv 激活虚拟环境\n.\\venv\\Scripts\\Activate.ps1 可能遇到不能执行脚本的错误，可以以管理员身份打开powershell，执行 set-executionpolicy remotesigned，选择y\n安装python 库 pip install -r requirements.txt 初始化数据库 修改ndgv1/settings.py 文件(78行开始)（以下是使用sqlite数据的配置，如需使用MySQL，把sqlite部分注释，再把MySQL注释部分取消即可） DATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.sqlite3\u0026#39;, \u0026#39;NAME\u0026#39;: BASE_DIR / \u0026#39;db.sqlite3\u0026#39;, # \u0026#39;default\u0026#39;: { # \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.mysql\u0026#39;, # \u0026#39;NAME\u0026#39;: \u0026#39;ndgv1.3\u0026#39;, # 数据库名称 # \u0026#39;USER\u0026#39;: \u0026#39;root\u0026#39;, # \u0026#39;PASSWORD\u0026#39;: \u0026#39;xxxxxxxx\u0026#39;, # \u0026#39;HOST\u0026#39;: \u0026#39;127.0.0.1\u0026#39;, # \u0026#39;PORT\u0026#39;: 3306, # \u0026#39;CHARSET\u0026#39;: \u0026#39;utf8\u0026#39; } } 删除device_app/migrations 和 scheduler_app/migrations 除_init_.py 外的所有文件\n删除 db.sqlite3 文件\n执行数据库迁移命令\npython manage.py makemigrations python manage.py migrate 修改清空数据功能代码 修改device_app/views文件(683行开始)，以下是使用sqlite数据的配置，如需使用MySQL，把sqlite部分注释，再把MySQL注释部分取消即可\n只直接使用原生 sql 语句 更快 from django.db import connection # sqlite 数据库 sqlite_db = connection.cursor() # MySQL 数据库 # mysql_db = connection.cursor() # 执行 命令 重置 自增ID sqlite_db.execute(\u0026#39;DELETE FROM sqlite_sequence\u0026#39;) sqlite_db.execute(\u0026#39;DELETE FROM device_app_device\u0026#39;) sqlite_db.execute(\u0026#39;DELETE FROM device_app_devicedetail\u0026#39;) sqlite_db.execute(\u0026#39;DELETE FROM device_app_devicestate\u0026#39;) sqlite_db.execute(\u0026#39;DELETE FROM device_app_devicelocation\u0026#39;) sqlite_db.execute(\u0026#39;DELETE FROM scheduler_app_schedulerdetail\u0026#39;) sqlite_db.execute(\u0026#39;DELETE FROM django_apscheduler_djangojob\u0026#39;) sqlite_db.execute(\u0026#39;DELETE FROM django_apscheduler_djangojobexecution\u0026#39;) sqlite_db.execute(\u0026#39;DELETE FROM sqlite_sequence\u0026#39;) # 取消外键约束 # mysql_db.execute(\u0026#39;SET FOREIGN_KEY_CHECKS=0\u0026#39;) # mysql_db.execute(\u0026#39;truncate table device_app_device\u0026#39;) # mysql_db.execute(\u0026#39;truncate table device_app_devicedetail\u0026#39;) # mysql_db.execute(\u0026#39;truncate table device_app_devicestate\u0026#39;) # mysql_db.execute(\u0026#39;truncate table device_app_devicelocation\u0026#39;) # mysql_db.execute(\u0026#39;truncate table scheduler_app_schedulerdetail\u0026#39;) # mysql_db.execute(\u0026#39;truncate table django_apscheduler_djangojob\u0026#39;) # mysql_db.execute(\u0026#39;truncate table django_apscheduler_djangojobexecution\u0026#39;) # 设置外键约束 # mysql_db.execute(\u0026#39;SET FORE 运行代码 python .\\manage.py runserver 代码弊端 代码写死华三设备的oid 代码中写死设备命名规则 定时任务写死轮询时间 前端页面展示以1080P分辨率屏幕编写 首页展示，类别显示的规则写死华三设备型号 …… 可能的问题或错误 PermissionError: [WinError 10013] 以一种访问权限不允许的方式做了一个访问套接字的尝试。 使用管理员权限运行IDE编辑器 检查是否端口占用 设备管理页面显示的数据不正确 由于是内置华三部分设备的OID，有些设备的OID值没有添加到代码 有些数据根据设备命名规则解析出来的，如果设备名称不符合命名规则会显示不正确 设备同步后显示同步成功，但是没有数据 可能是snmp团体字不正确，或IP地址不可达 或者本机防火墙限制 批量导入失败 上传文件中格式不准确或数据有误 上传文件中数据与已有数据冲突，可使用清空数据再进行导入 由于没有加入Django事务，对于已导入正确数据并不会进行回退 首页中类型统计不正确 统计规则是根据华三的设备型号中关键字定义的 其他厂商设备不通用 页面显示不全或内容挤压 编写时候是以1080P分辨率屏幕显示为准 没有对其他分辨率屏幕做调整 ","date":"2023-03-13T14:12:11Z","permalink":"https://kiraster.github.io/posts/d70f2b4c.html/","title":"基于Django编写的SNMP轮询Demo"},{"content":"Introduction\nThis document describes how to configure and verify the Inter-AS Layer 3 Multiprotocol Label Switching (MPLS) VPN, option C feature. A sample network scenario and its configuration and outputs are shown for a better understanding.\n本文描述的是根据思科网站一篇配置文档（https://www.cisco.com/c/en/us/support/docs/multiprotocol-label-switching-mpls/mpls/200523-Configuration-and-Verification-of-Layer.html#）修改搭建的一个实验。\n环境 模拟器：PNET 4.2.10 Cisco IOL： l3-ADVENTERPRISEK9-M-15.4-2T.bin 配置 网络拓扑 网站原图\n搭建的拓扑\n拓扑规划 每台路由配置环回接口 0 ，格式为 R1： 1.1.1.1/32 互联接口为：设备编号1 + 设备编号2 + .1.1 + 设备编号1，例如 R1 e0/0 接口IP地址：12.1.1.1/24 R7、R8、R9、R10 为 CE，R11 和 R12 为 反射器 ISP1，ISP2 底层 IGP 运行 OSPF 协议 A1，A2 的 CE 与 PE 运行 OSPF 协议 B1，B2 的 CE 与 PE 运行 BGP 协议 配置思路 配置 ISP 底层 OSPF IGP ，验证：show ip os nei / show ip route ospf 配置 ISP 启用 MPLS LDP，验证：show mpls interface / show mpls ldp discovery 配置 PE VRF，配置与 CE 互联接口划分到 VRF，验证：show ip vrf int / show ip route vrf X 配置 ISP 的 BGP 邻居，验证：show ip b summ / show ip b vpnv4 all summ 配置 RR1 和 RR2 的 MP-eBGP，验证：show ip b vpnv4 all summ 配置 CE 和 PE 间的路由协议，验证：show ip route vrf X / show ip os nei / show ip b summ 配置 PE 上 双向重分布 配置步骤 配置 IP 地址 （略） 配置 ISP 底层 IGP （以 ISP 1 为例，ISP2 同理） !--- R1 commands. int ran e 0/0,e0/3,lo0 ip os 100 a 0 !--- R2 commands. int ran e0/0-1,e0/3,lo0 ip os 100 a 0 !--- R3 commands. int ran e 0/1,e0/3,lo0 ip os 100 a 0 !--- R11 commands. int ran e 0/1-3,lo0 ip os 100 a 0 **验证：**查看 OSPF 邻居，查看 OSPF 路由，以 R2 为例\n!--- R2 output. R2#sh ip os nei Neighbor ID Pri State Dead Time Address Interface 11.11.11.11 1 FULL/BDR 00:00:39 112.1.1.11 Ethernet0/3 3.3.3.3 1 FULL/DR 00:00:30 23.1.1.3 Ethernet0/1 1.1.1.1 1 FULL/BDR 00:00:39 12.1.1.1 Ethernet0/0 R2#sh ip route ospf | b Gate Gateway of last resort is not set 1.0.0.0/32 is subnetted, 1 subnets O 1.1.1.1 [110/11] via 12.1.1.1, 02:06:04, Ethernet0/0 3.0.0.0/32 is subnetted, 1 subnets O 3.3.3.3 [110/11] via 23.1.1.3, 02:05:54, Ethernet0/1 11.0.0.0/32 is subnetted, 1 subnets O 11.11.11.11 [110/11] via 112.1.1.11, 02:05:54, Ethernet0/3 111.0.0.0/24 is subnetted, 1 subnets O 111.1.1.0 [110/20] via 12.1.1.1, 02:06:04, Ethernet0/0 113.0.0.0/24 is subnetted, 1 subnets O 113.1.1.0 [110/20] via 23.1.1.3, 02:05:54, Ethernet0/1 R2# 配置 ISP 启用 MPLS LDP （以 ISP 1 为例，ISP2 同理） !--- R1 commands. int ran e 0/0,e0/3 mpls ip !--- R2 commands. int ran e0/0-1,e0/3 mpls ip !--- R3 commands. int ran e 0/1,e0/3 mpls ip !--- R11 commands. int ran e 0/1-3 mpls ip 验证： 查看 LDP 接口和 ldp 会话，以 R2 为例\n!--- R2 output. R2#sh mpls interfaces Interface IP Tunnel BGP Static Operational Ethernet0/0 Yes (ldp) No No No Yes Ethernet0/1 Yes (ldp) No No No Yes Ethernet0/3 Yes (ldp) No No No Yes R2#sh mpls ldp dis R2#sh mpls ldp discovery Local LDP Identifier: 2.2.2.2:0 Discovery Sources: Interfaces: Ethernet0/0 (ldp): xmit/recv LDP Id: 1.1.1.1:0 Ethernet0/1 (ldp): xmit/recv LDP Id: 3.3.3.3:0 Ethernet0/3 (ldp): xmit/recv LDP Id: 11.11.11.11:0 R2# 配置 PE 的 VRF，配置与 CE 互联的接口划分到 VRF !--- R1 commands. ip vrf a rd 7:100 route-target export 7:7 route-target import 9:9 ip vrf b rd 8:100 route-target export 8:8 route-target import 10:10 ! interface Ethernet0/1 ip vrf forwarding a ip address 17.1.1.1 255.255.255.0 interface Ethernet0/2 ip vrf forwarding b ip address 18.1.1.1 255.255.255.0 !--- R6 commands. ip vrf a rd 9:200 route-target export 9:9 route-target import 7:7 ip vrf b rd 10:200 route-target export 10:10 route-target import 8:8 interface Ethernet0/1 ip vrf forwarding a ip address 69.1.1.6 255.255.255.0 ! interface Ethernet0/2 ip vrf forwarding b ip address 106.1.1.6 255.255.255.0 **验证：**查看 VRF 路由表，以 R1 为例\n!--- R1 output. R1#sh ip route vrf a | b Gate Gateway of last resort is not set 7.0.0.0/32 is subnetted, 1 subnets O 7.7.7.7 [110/11] via 17.1.1.7, 02:15:47, Ethernet0/1 17.0.0.0/8 is variably subnetted, 2 subnets, 2 masks C 17.1.1.0/24 is directly connected, Ethernet0/1 L 17.1.1.1/32 is directly connected, Ethernet0/1 R1# R1#sh ip route vrf b | b Gate Gateway of last resort is not set 8.0.0.0/32 is subnetted, 1 subnets B 8.8.8.8 [20/0] via 18.1.1.8, 02:16:08 18.0.0.0/8 is variably subnetted, 2 subnets, 2 masks C 18.1.1.0/24 is directly connected, Ethernet0/2 L 18.1.1.1/32 is directly connected, Ethernet0/2 R1# 配置 ISP 的 BGP 邻居 R3 与 R4 配置 IPv4 BGP 邻居，R3 宣告 1.1.1.1 和 11.11.11.11，R4 宣告 6.6.6.6 和 12.12.12.12\n将 BGP 路由重分布进底层 OSPF 协议，为了学习到对端 RR 和 PE 路由，建立 MP-BGP 需要\n由于底层 OSPF 协议的运行，R3 与 R4 已经学习到这些路由，在建立 eBGP 邻居后能传递到对端\n!--- R3 commands. router bgp 100 bgp log-neighbor-changes network 1.1.1.1 mask 255.255.255.255 network 11.11.11.11 mask 255.255.255.255 neighbor 34.1.1.4 remote-as 200 neighbor 34.1.1.4 send-label router ospf 100 redistribute bgp 100 subnets !--- R4 commands. router bgp 200 bgp log-neighbor-changes network 6.6.6.6 mask 255.255.255.255 network 12.12.12.12 mask 255.255.255.255 neighbor 34.1.1.3 remote-as 100 neighbor 34.1.1.3 send-label router ospf 200 redistribute bgp 200 subnets 验证：\nR3 与 R4 的 eBGP 邻居\nR3#sh ip b summary BGP router identifier 3.3.3.3, local AS number 100 BGP table version is 75, main routing table version 75 4 network entries using 560 bytes of memory 4 path entries using 320 bytes of memory 4/4 BGP path/bestpath attribute entries using 576 bytes of memory 1 BGP AS-PATH entries using 24 bytes of memory 0 BGP route-map cache entries using 0 bytes of memory 0 BGP filter-list cache entries using 0 bytes of memory BGP using 1480 total bytes of memory BGP activity 4/0 prefixes, 36/32 paths, scan interval 60 secs Neighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd 34.1.1.4 4 200 90 90 75 0 0 01:16:45 0 R1 的 1.1.1.1 去往 R6 的 6.6.6.6 路由可达，标签路径连续\nR11 的 11.11.11.11 去往 R12 的 12.12.12.12 路由可达，标签路径连续\nR1#ping 6.6.6.6 source 1.1.1.1 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 6.6.6.6, timeout is 2 seconds: Packet sent with a source address of 1.1.1.1 !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 6/6/8 ms R1#traceroute 6.6.6.6 source 1.1.1.1 Type escape sequence to abort. Tracing the route to 6.6.6.6 VRF info: (vrf in name/id, vrf out name/id) 1 12.1.1.2 [MPLS: Label 24 Exp 0] 5 msec 6 msec 6 msec 2 23.1.1.3 [MPLS: Label 26 Exp 0] 6 msec 5 msec 6 msec 3 34.1.1.4 [MPLS: Label 27 Exp 0] 7 msec 7 msec 5 msec 4 45.1.1.5 [MPLS: Label 22 Exp 0] 4 msec 5 msec 6 msec 5 56.1.1.6 6 msec * 7 msec R1# ---------------------------------------------------------- R11#ping 12.12.12.12 source 11.11.11.11 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 12.12.12.12, timeout is 2 seconds: Packet sent with a source address of 11.11.11.11 !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 3/3/4 ms R11#trace 12.12.12.12 source 11.11.11.11 Type escape sequence to abort. Tracing the route to 12.12.12.12 VRF info: (vrf in name/id, vrf out name/id) 1 113.1.1.3 [MPLS: Label 27 Exp 0] 4 msec 4 msec 4 msec 2 34.1.1.4 [MPLS: Label 25 Exp 0] 3 msec 2 msec 2 msec 3 124.1.1.12 4 msec * 4 msec R11# 关于send-label 命令：\ntell the router to send the lables of bgp prefix to its peer，为 BGP 路由传递标签，使用此命令后，对应接口自动配置 mpls bgp forwarding ，但是 no 掉后接口的这行配置并不会自动去掉\n*Mar 4 05:54:10.850: %BGP_LMM-6-AUTOGEN1: The mpls bgp forwarding command has been configured on interface: Ethernet0/0 未配置 send-label 命令前，R3 去往 6.6.6.6 的标签 是空标签，R3 的动作是弹出所有标签，标签中断。\nR3#sh mpls forwarding-table 6.6.6.6 Local Outgoing Prefix Bytes Label Outgoing Next Hop Label Label or Tunnel Id Switched interface 26 No Label 6.6.6.6/32 0 Et0/0 34.1.1.4 R3#sh ip b la R3#sh ip b labels Network Next Hop In label/Out label 1.1.1.1/32 23.1.1.2 nolabel/nolabel 6.6.6.6/32 34.1.1.4 nolabel/nolabel 11.11.11.11/32 113.1.1.11 nolabel/nolabel 12.12.12.12/32 34.1.1.4 nolabel/nolabel R3#sh ip b 6.6.6.6 BGP routing table entry for 6.6.6.6/32, version 66 Paths: (1 available, best #1, table default) Not advertised to any peer Refresh Epoch 1 200 34.1.1.4 from 34.1.1.4 (4.4.4.4) Origin IGP, metric 21, localpref 100, valid, external, best rx pathid: 0, tx pathid: 0x0 R3# 配置 send-label 命令后，分配 27 标签\nR3#sh mpls forwarding-table 6.6.6.6 Local Outgoing Prefix Bytes Label Outgoing Next Hop Label Label or Tunnel Id Switched interface 26 27 6.6.6.6/32 0 Et0/0 34.1.1.4 R3#sh ip b labels Network Next Hop In label/Out label 1.1.1.1/32 23.1.1.2 21/nolabel 6.6.6.6/32 34.1.1.4 nolabel/27 11.11.11.11/32 113.1.1.11 25/nolabel 12.12.12.12/32 34.1.1.4 nolabel/25 R3#sh ip b 6.6.6.6 BGP routing table entry for 6.6.6.6/32, version 56 Paths: (1 available, best #1, table default) Not advertised to any peer Refresh Epoch 1 200 34.1.1.4 from 34.1.1.4 (4.4.4.4) Origin IGP, metric 21, localpref 100, valid, external, best mpls labels in/out nolabel/27 rx pathid: 0, tx pathid: 0x0 # 在 R4 上查看到关于去往6.6.6.6 的 入向标签 27 R4#sh ip bgp labels Network Next Hop In label/Out label 1.1.1.1/32 34.1.1.3 nolabel/21 6.6.6.6/32 45.1.1.5 27/nolabel 11.11.11.11/32 34.1.1.3 nolabel/25 12.12.12.12/32 124.1.1.12 25/nolabel R4# R1 与 R11 配置 BGP VPNV4 邻居\n注意：R3 与 R11 不建立 BGP 邻居\n!--- R1 commands. router bgp 100 no bgp default ipv4-unicast neighbor 11.11.11.11 remote-as 100 neighbor 11.11.11.11 update-source Loopback0 address-family vpnv4 neighbor 11.11.11.11 activate !--- R11 commands. router bgp 100 bgp log-neighbor-changes no bgp default ipv4-unicast neighbor 1.1.1.1 remote-as 100 neighbor 1.1.1.1 update-source Loopback0 address-family vpnv4 neighbor 1.1.1.1 activate neighbor 1.1.1.1 route-reflector-client R6 与 R12 配置 BGP VPNV4 邻居\n注意：R4 与 R12 不建立 BGP 邻居\n!--- R6 commands. router bgp 200 no bgp default ipv4-unicast neighbor 12.12.12.12 remote-as 200 neighbor 12.12.12.12 update-source Loopback0 address-family vpnv4 neighbor 12.12.12.12 activate !--- R12 commands. router bgp 200 no bgp default ipv4-unicast neighbor 6.6.6.6 remote-as 200 neighbor 6.6.6.6 update-source Loopback0 address-family vpnv4 neighbor 6.6.6.6 activate neighbor 6.6.6.6 route-reflector-client **验证：**VPNV4 邻居\nsh ip b vpnv4 all summary R11 与 R12 建立 MP-eBGP 邻居\n设置 eBGP 多跳。不是物理直连的 eBGP 邻居\n设置下一跳不改变。R11 与 R12 建立 MP-eBGP 邻居，传递路由时默认下一跳改变成自身，这样 ISP 两侧的流量互通都流经反射器不合理，设置下一跳不改变后，R1 上去往 ISP2 CE 的路由下一跳看到的是 R6 的 6.6.6.6 ，最后再在两个 ISP 内部控制底层 IGP 的路径，使得流量不经过反射器。\n!--- R11 commands. router bgp 100 neighbor 12.12.12.12 remote-as 200 neighbor 12.12.12.12 ebgp-multihop 255 neighbor 12.12.12.12 update-source Loopback0 address-family vpnv4 neighbor 12.12.12.12 activate neighbor 12.12.12.12 next-hop-unchanged !--- R12 commands. router bgp 200 neighbor 11.11.11.11 remote-as 100 neighbor 11.11.11.11 ebgp-multihop 255 neighbor 11.11.11.11 update-source Loopback0 address-family vpnv4 neighbor 11.11.11.11 activate neighbor 11.11.11.11 next-hop-unchanged 验证：查看 R11 上的 BGP 邻居\nR11#sh ip b vpnv4 all summary BGP router identifier 11.11.11.11, local AS number 100 BGP table version is 67, main routing table version 67 6 network entries using 912 bytes of memory 6 path entries using 480 bytes of memory 5/5 BGP path/bestpath attribute entries using 760 bytes of memory 3 BGP AS-PATH entries using 72 bytes of memory 4 BGP extended community entries using 128 bytes of memory 0 BGP route-map cache entries using 0 bytes of memory 0 BGP filter-list cache entries using 0 bytes of memory BGP using 2352 total bytes of memory BGP activity 6/0 prefixes, 6/0 paths, scan interval 60 secs Neighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd 1.1.1.1 4 100 127 151 67 0 0 01:50:57 3 12.12.12.12 4 200 190 185 67 0 0 01:50:16 3 R11# 配置 CE 和 PE 间的路由协议 以 R7，R8，R1 为例， R9，R10，R6 同理\n!--- R7 commands. int ran e 0/0,lo0 ip os 7 a 0 !--- R8 commands. router bgp 300 network 8.8.8.8 mask 255.255.255.255 neighbor 18.1.1.1 remote-as 100 !--- R1 commands. router ospf 1 vrf a router-id 1.1.1.17 network 17.1.1.1 0.0.0.0 area 0 router bgp 100 address-family ipv4 vrf b neighbor 18.1.1.8 remote-as 300 验证：\nshow ip os nei show ip route ospf show ip route vrf a show ip route vrf b sh ip b summary 配置 PE 上 双向重分布 以 R1 为例，只需在 VRF a\n!--- R1 commands. # 只需在 vrf a 和 BGP ipv4 vrf a 视图下配置重分布 # R8 - R1 之间运行的是 BGP ，在 BGP ipv4 vrf b 视图下建立邻居即可 router ospf 1 vrf a redistribute bgp 100 subnets router bgp 100 address-family ipv4 vrf a redistribute ospf 1 优化ISP 内部 OSPF 下一跳 查看 R1 路由表发现，去往 9.9.9.9 下一跳是 6.6.6.6\nR1#sh ip b vpnv4 vrf a BGP table version is 166, local router ID is 1.1.1.1 Status codes: s suppressed, d damped, h history, * valid, \u0026gt; best, i - internal, r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, x best-external, a additional-path, c RIB-compressed, Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path Route Distinguisher: 7:100 (default for vrf a) *\u0026gt; 7.7.7.7/32 17.1.1.7 11 32768 ? *\u0026gt;i 9.9.9.9/32 6.6.6.6 0 100 0 200 ? *\u0026gt; 17.1.1.0/24 0.0.0.0 0 32768 ? *\u0026gt;i 69.1.1.0/24 6.6.6.6 0 100 0 200 ? R1# R1#sh ip route vrf a | b Gate Gateway of last resort is not set 7.0.0.0/32 is subnetted, 1 subnets O 7.7.7.7 [110/11] via 17.1.1.7, 04:21:39, Ethernet0/1 9.0.0.0/32 is subnetted, 1 subnets B 9.9.9.9 [200/0] via 6.6.6.6, 03:10:42 17.0.0.0/8 is variably subnetted, 2 subnets, 2 masks C 17.1.1.0/24 is directly connected, Ethernet0/1 L 17.1.1.1/32 is directly connected, Ethernet0/1 69.0.0.0/24 is subnetted, 1 subnets B 69.1.1.0 [200/0] via 6.6.6.6, 03:10:42 R1# 再查找，去往 6.6.6.6 前缀有两条路径，管理和开销都一致，负载均衡？\n这条路由是 R3 BGP 重分布进底层 IGP OSPF 而学习到的，有两条路径，管理距离110，metric 1 ，这时候需要比较forwarding metric，很不巧的是forwarding metric 也是一样，这样去往 6.6.6.6 就真负载均衡。forwarding metric 是本地到 ASBR 的 开销，修改 R11 e0/1-3 的开销。同理也需要修改 R12 的接口开销。\nO E2 12.12.12.12/32 [110/1] via 111.1.1.11, 01:37:27, Ethernet0/3 [110/1] via 12.1.1.2, 03:15:27, Ethernet0/0 R1#sh ip route | b Gate Gateway of last resort is not set 1.0.0.0/32 is subnetted, 1 subnets C 1.1.1.1 is directly connected, Loopback0 2.0.0.0/32 is subnetted, 1 subnets O 2.2.2.2 [110/11] via 12.1.1.2, 04:26:59, Ethernet0/0 3.0.0.0/32 is subnetted, 1 subnets O 3.3.3.3 [110/21] via 111.1.1.11, 01:37:27, Ethernet0/3 [110/21] via 12.1.1.2, 04:26:49, Ethernet0/0 6.0.0.0/32 is subnetted, 1 subnets O E2 6.6.6.6 [110/1] via 111.1.1.11, 01:37:27, Ethernet0/3 [110/1] via 12.1.1.2, 03:15:27, Ethernet0/0 …… R1# R1#sh ip route 6.6.6.6 Routing entry for 6.6.6.6/32 Known via \u0026#34;ospf 100\u0026#34;, distance 110, metric 1 Tag 200, type extern 2, forward metric 20 Last update from 12.1.1.2 on Ethernet0/0, 00:00:51 ago Routing Descriptor Blocks: * 111.1.1.11, from 3.3.3.3, 00:31:15 ago, via Ethernet0/3 Route metric is 1, traffic share count is 1 Route tag 200 12.1.1.2, from 3.3.3.3, 00:00:51 ago, via Ethernet0/0 Route metric is 1, traffic share count is 1 Route tag 200 R1# # 修改 R11 R12 的接口开销 R11(config)#int ran e 0/1-/3 R11(config-if-range)#ip ospf cost 1000 R12(config-if)#int ran e 0/1-0/3 R12(config-if-range)#ip ospf cost 1000 # 修改 R11 R12 的接口开销后 R1#sh ip route 6.6.6.6 Routing entry for 6.6.6.6/32 Known via \u0026#34;ospf 100\u0026#34;, distance 110, metric 1 Tag 200, type extern 2, forward metric 20 Last update from 12.1.1.2 on Ethernet0/0, 00:08:51 ago Routing Descriptor Blocks: * 12.1.1.2, from 3.3.3.3, 00:08:51 ago, via Ethernet0/0 Route metric is 1, traffic share count is 1 Route tag 200 R1# R6#sh ip rou 1.1.1.1 Routing entry for 1.1.1.1/32 Known via \u0026#34;ospf 200\u0026#34;, distance 110, metric 1 Tag 100, type extern 2, forward metric 20 Last update from 56.1.1.5 on Ethernet0/0, 00:02:30 ago Routing Descriptor Blocks: * 56.1.1.5, from 4.4.4.4, 00:39:02 ago, via Ethernet0/0 Route metric is 1, traffic share count is 1 Route tag 100 R6# 测试 R7 和 R9 之间的 ping 操作\nR7#ping 9.9.9.9 source 7.7.7.7 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 9.9.9.9, timeout is 2 seconds: Packet sent with a source address of 7.7.7.7 !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 8/8/11 ms R7# R9#ping 7.7.7.7 source 9.9.9.9 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 7.7.7.7, timeout is 2 seconds: Packet sent with a source address of 9.9.9.9 !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 8/8/10 ms R9# R8 和 R10 之间的 ping 操作\nR8#ping 10.10.10.10 source 8.8.8.8 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 10.10.10.10, timeout is 2 seconds: Packet sent with a source address of 8.8.8.8 !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 8/9/13 ms R8# R10#ping 8.8.8.8 source 10.10.10.10 Type escape sequence to abort. Sending 5, 100-byte ICMP Echos to 8.8.8.8, timeout is 2 seconds: Packet sent with a source address of 10.10.10.10 !!!!! Success rate is 100 percent (5/5), round-trip min/avg/max = 8/9/10 ms R10# R7 和 R9 之间的 Traceroute 操作\nR7#traceroute 9.9.9.9 source 7.7.7.7 Type escape sequence to abort. Tracing the route to 9.9.9.9 VRF info: (vrf in name/id, vrf out name/id) 1 17.1.1.1 1 msec 1 msec 2 msec 2 12.1.1.2 [MPLS: Labels 24/26 Exp 0] 8 msec 8 msec 8 msec 3 23.1.1.3 [MPLS: Labels 26/26 Exp 0] 8 msec 12 msec 7 msec 4 34.1.1.4 [MPLS: Labels 27/26 Exp 0] 8 msec 9 msec 8 msec 5 45.1.1.5 [MPLS: Labels 22/26 Exp 0] 9 msec 8 msec 8 msec 6 69.1.1.6 [MPLS: Label 26 Exp 0] 9 msec 7 msec 9 msec 7 69.1.1.9 9 msec * 9 msec R7# R9#traceroute 7.7.7.7 source 9.9.9.9 Type escape sequence to abort. Tracing the route to 7.7.7.7 VRF info: (vrf in name/id, vrf out name/id) 1 69.1.1.6 2 msec 39 msec 2 msec 2 56.1.1.5 [MPLS: Labels 25/26 Exp 0] 10 msec 9 msec 9 msec 3 45.1.1.4 [MPLS: Labels 23/26 Exp 0] 12 msec 9 msec 9 msec 4 34.1.1.3 [MPLS: Labels 21/26 Exp 0] 10 msec 8 msec 10 msec 5 23.1.1.2 [MPLS: Labels 19/26 Exp 0] 9 msec 10 msec 11 msec 6 17.1.1.1 [MPLS: Label 26 Exp 0] 7 msec 18 msec 9 msec 7 17.1.1.7 8 msec * 8 msec R9# R8 和 R10 之间的 Traceroute 操作\nR8#traceroute 10.10.10.10 source 8.8.8.8 Type escape sequence to abort. Tracing the route to 10.10.10.10 VRF info: (vrf in name/id, vrf out name/id) 1 18.1.1.1 2 msec 1 msec 1 msec 2 12.1.1.2 [MPLS: Labels 24/28 Exp 0] 8 msec 9 msec 9 msec 3 23.1.1.3 [MPLS: Labels 26/28 Exp 0] 9 msec 9 msec 9 msec 4 34.1.1.4 [MPLS: Labels 27/28 Exp 0] 10 msec 8 msec 10 msec 5 45.1.1.5 [MPLS: Labels 22/28 Exp 0] 7 msec 9 msec 8 msec 6 106.1.1.6 [MPLS: Label 28 Exp 0] 8 msec 7 msec 9 msec 7 106.1.1.10 8 msec * 10 msec R8# R10#traceroute 8.8.8.8 source 10.10.10.10 Type escape sequence to abort. Tracing the route to 8.8.8.8 VRF info: (vrf in name/id, vrf out name/id) 1 106.1.1.6 1 msec 2 msec 1 msec 2 56.1.1.5 [MPLS: Labels 25/28 Exp 0] 8 msec 8 msec 11 msec 3 45.1.1.4 [MPLS: Labels 23/28 Exp 0] 8 msec 28 msec 8 msec 4 34.1.1.3 [MPLS: Labels 21/28 Exp 0] 8 msec 11 msec 8 msec 5 23.1.1.2 [MPLS: Labels 19/28 Exp 0] 9 msec 8 msec 10 msec 6 18.1.1.1 [MPLS: Label 28 Exp 0] 16 msec 6 msec 7 msec 7 18.1.1.8 9 msec * 10 msec R10# 一个视频 最后 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 配置存阿里云盘了，这是链接：[分享的文件 ] 欢迎“来电”来函探讨。 ","date":"2023-03-04T01:05:34Z","permalink":"https://kiraster.github.io/posts/c0ba4ae2.html/","title":"配置跨域的Option C MPLS VPN（Cisco）"},{"content":"本文记录VMware Workstation 环境下Ubuntu server 22.04系统安装gitlab-ce_15.8.3的过程。\n准备环境 一台安装好 ubuntu server的虚拟机 ubuntu可联网 SecureCRT软件（或其它带SSH登陆功能的工具） 更新软件包信息和安装软件 首先设置好国内更新源，在安装Ubuntu的时候我已经填写了阿里云的站点（mirrors.aliyun.com/ubuntu），如果你没有修改这一项，登陆服务器后修改 /etc/apt/sources.list即可\nsudo apt-get update 安装或更新以下软件（虽然安装Ubuntu的时候勾选了Openssh但是不是最新版本，提示升级）\nsudo apt-get install curl openssh-server ca-certificates postfix 命令回显\nkir@gitlabserver:/etc/apt$ sudo apt-get install curl openssh-server ca-certificates postfix Reading package lists... Done Building dependency tree... Done Reading state information... Done The following additional packages will be installed: libcurl4 openssh-client openssh-sftp-server ssl-cert Suggested packages: keychain libpam-ssh monkeysphere ssh-askpass molly-guard procmail postfix-mysql postfix-pgsql postfix-ldap postfix-pcre postfix-lmdb postfix-sqlite sasl2-bin | dovecot-common resolvconf postfix-cdb mail-reader postfix-mta-sts-resolver postfix-doc The following NEW packages will be installed: postfix ssl-cert The following packages will be upgraded: ca-certificates curl libcurl4 openssh-client openssh-server openssh-sftp-server 6 upgraded, 2 newly installed, 0 to remove and 181 not upgraded. Need to get 3,271 kB of archives. After this operation, 4,243 kB of additional disk space will be used. Do you want to continue? [Y/n] y Get:1 http://mirrors.aliyun.com/ubuntu jammy-updates/main amd64 openssh-sftp-server amd64 1:8.9p1-3ubuntu0.1 [38.7 kB] Get:2 http://mirrors.aliyun.com/ubuntu jammy-updates/main amd64 openssh-server amd64 1:8.9p1-3ubuntu0.1 [434 kB] Get:3 http://mirrors.aliyun.com/ubuntu jammy-updates/main amd64 openssh-client amd64 1:8.9p1-3ubuntu0.1 [908 kB] …… …… …… postfix 软件安装后会弹出一个\u0026quot;Postfix Configuration\u0026quot;向导，直接选No configuration不进行配置（本地环境不实用）\n下载和安装gitlab-ce_15.8.3 这个看各自网络的网速，官网下载（ubuntu/jammy/gitlab-ce_15.8.3-ce.0_amd64.deb - gitlab/gitlab-ce · packages.gitlab.com ）\n清华镜像站下载（Index of /gitlab-ce/ubuntu/pool/jammy/main/g/gitlab-ce/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror ）\n下载完成后，校验一下MD5值，对比官网提供的校验信息\nkir@gitlabserver:~$ sudo md5sum gitlab-ce_15.8.3-ce.0_amd64.deb feaecd81f1b2a39600114c873b1b9085 gitlab-ce_15.8.3-ce.0_amd64.deb 命令回显：\nkir@gitlabserver:~$ sudo dpkg -i gitlab-ce_15.8.3-ce.0_amd64.deb Selecting previously unselected package gitlab-ce. (Reading database ... 73398 files and directories currently installed.) Preparing to unpack gitlab-ce_15.8.3-ce.0_amd64.deb ... Unpacking gitlab-ce (15.8.3-ce.0) ... Setting up gitlab-ce (15.8.3-ce.0) ... It looks like GitLab has not been configured yet; skipping the upgrade script. *. *. *** *** ***** ***** .****** ******* ******** ******** ,,,,,,,,,***********,,,,,,,,, ,,,,,,,,,,,*********,,,,,,,,,,, .,,,,,,,,,,,*******,,,,,,,,,,,, ,,,,,,,,,*****,,,,,,,,,. ,,,,,,,****,,,,,, .,,,***,,,, ,*,. _______ __ __ __ / ____(_) /_/ / ____ _/ /_ / / __/ / __/ / / __ `/ __ \\ / /_/ / / /_/ /___/ /_/ / /_/ / \\____/_/\\__/_____/\\__,_/_.___/ Thank you for installing GitLab! GitLab was unable to detect a valid hostname for your instance. Please configure a URL for your GitLab instance by setting `external_url` configuration in /etc/gitlab/gitlab.rb file. Then, you can start your GitLab instance by running the following command: sudo gitlab-ctl reconfigure For a comprehensive list of configuration options please see the Omnibus GitLab readme https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md Help us improve the installation experience, let us know how we did with a 1 minute survey: https://gitlab.fra1.qualtrics.com/jfe/form/SV_6kVqZANThUQ1bZb?installation=omnibus\u0026amp;release=15-8 修改外部url和reconfigure 修改/etc/gitlab/下的gitlab.rb文件，external_url直接修改为ubuntu系统的的IP地址，如果 80 端口有冲突可在后边加上端口号 external_url \u0026#39;http://192.168.x.x\u0026#39; kir@gitlabserver:~$ cd /etc/gitlab kir@gitlabserver:/etc/gitlab$ ll total 148 drwxr-xr-x 2 root root 4096 Feb 23 03:49 ./ drwxr-xr-x 102 root root 4096 Feb 23 03:49 ../ -rw------- 1 root root 140235 Feb 23 03:49 gitlab.rb kir@gitlabserver:/etc/gitlab$ sudo cp gitlab.rb gitlab.rb_bak kir@gitlabserver:/etc/gitlab$ ll total 288 drwxr-xr-x 2 root root 4096 Feb 23 03:50 ./ drwxr-xr-x 102 root root 4096 Feb 23 03:49 ../ -rw------- 1 root root 140235 Feb 23 03:49 gitlab.rb -rw------- 1 root root 140235 Feb 23 03:50 gitlab.rb_bak kir@gitlabserver:/etc/gitlab$ sudo nano gitlab.rb 重配置（这一步骤耗时较长） kir@gitlabserver:/opt/gitlab/bin$ sudo gitlab-ctl reconfigure [2023-02-23T03:52:56+00:00] INFO: Started Cinc Zero at chefzero://localhost:1 with repository at /opt/gitlab/embedded (One version per cookbook) Cinc Client, version 17.10.0 Patents: https://www.chef.io/patents Infra Phase starting [2023-02-23T03:52:57+00:00] INFO: *** Cinc Client 17.10.0 *** [2023-02-23T03:52:57+00:00] INFO: Platform: x86_64-linux [2023-02-23T03:52:57+00:00] INFO: Cinc-client pid: 18551 [2023-02-23T03:52:58+00:00] INFO: Setting the run_list to [\u0026#34;recipe[gitlab]\u0026#34;] from CLI options [2023-02-23T03:52:58+00:00] INFO: Run List is [recipe[gitlab]] [2023-02-23T03:52:58+00:00] INFO: Run List expands to [gitlab] [2023-02-23T03:52:58+00:00] INFO: Starting Cinc Client Run for gitlabserver [2023-02-23T03:52:58+00:00] INFO: Running start handlers [2023-02-23T03:52:58+00:00] INFO: Start handlers complete. Resolving cookbooks for run list: [\u0026#34;gitlab\u0026#34;] …… …… …… Notes: Default admin account has been configured with following details: Username: root Password: You didn\u0026#39;t opt-in to print initial root password to STDOUT. Password stored to /etc/gitlab/initial_root_password. This file will be cleaned up in first reconfigure run after 24 hours. NOTE: Because these credentials might be present in your log files in plain text, it is highly recommended to reset the password following https://docs.gitlab.com/ee/security/reset_user_password.html#reset-your-root-password. gitlab Reconfigured! 重启gitlab kir@gitlabserver:/opt/gitlab/bin$ sudo gitlab-ctl restart ok: run: alertmanager: (pid 21046) 0s ok: run: gitaly: (pid 21058) 0s ok: run: gitlab-exporter: (pid 21077) 0s ok: run: gitlab-kas: (pid 21085) 0s ok: run: gitlab-workhorse: (pid 21095) 1s ok: run: logrotate: (pid 21107) 0s ok: run: nginx: (pid 21115) 0s ok: run: node-exporter: (pid 21123) 1s ok: run: postgres-exporter: (pid 21129) 0s ok: run: postgresql: (pid 21144) 1s ok: run: prometheus: (pid 21153) 0s ok: run: puma: (pid 21166) 0s ok: run: redis: (pid 21171) 0s ok: run: redis-exporter: (pid 21177) 1s ok: run: sidekiq: (pid 21260) 1s 修改 root 密码 根据重配置步骤后的提示Password stored to /etc/gitlab/initial_root_password. This file will be cleaned up in first reconfigure run after 24 hours.，root的初始密码储存在initial_root_password，文件在第一次reconfigure 24小时后清除。\n使用initial_root_password文件里的密码 web登陆，\u0026ldquo;Edit profile\u0026rdquo;\u0026ndash;\u0026ldquo;Panssword\u0026quot;修改 使用命令修改 kir@gitlabserver:/etc/gitlab$ sudo gitlab-rake \u0026#34;gitlab:password:reset[root]\u0026#34; Enter password: Confirm password: Password successfully updated for user with username root. kir@gitlabserver:/etc/gitlab$ 控制台修改 切换路径 cd /opt/gitlab/bin/ kir@gitlabserver:/opt/gitlab/bin$ sudo gitlab-rails console -e production -------------------------------------------------------------------------------- Ruby: ruby 2.7.7p221 (2022-11-24 revision 168ec2b1e5) [x86_64-linux] GitLab: 15.8.3 (22f43167474) FOSS GitLab Shell: 14.15.0 PostgreSQL: 13.8 ------------------------------------------------------------[ booted in 90.93s ] Loading production environment (Rails 6.1.6.1) irb(main):001:0\u0026gt; u=User.where(id:1).first irb(main):001:0\u0026gt; u=User.where(id:1).first =\u0026gt; #\u0026lt;User id:1 @root\u0026gt; irb(main):002:0\u0026gt; u.password=12345678 =\u0026gt; 12345678 irb(main):003:0\u0026gt; u.password_confirmation=12345678 =\u0026gt; 12345678 irb(main):004:0\u0026gt; u.save! =\u0026gt; true irb(main):005:0\u0026gt; quit 注册和登陆Gitlab 在启动gitlab后，直接用浏览器登陆可能出现下图所示502错误，等一会儿再打开就ok了，猜测是服务没有完全运行起来，也有可能是我物理机配置差劲。\n注册，由于是本地使用，之前也没配置邮件Postfix，填上舒服的信息即可 注册完后登陆出错，看提示是账号被挂起，使用root管理员账户登陆进行审批通过即可 登陆管理员账户进行审批通过 退出管理员登陆，使用刚才注册的账号登陆，确认后，选择一个角色 最后 为什么写这篇文，因为我的一块硬盘报废了，整块硬盘直接奔溃，各种尝试后放弃了，因为这块500G的硬盘是大学时候台式电脑的，间接原因是使用时间和寿命，直接原因是电脑死机强制关机。 然后京东购了一块固态盘，一看价格现在同容量的固态硬盘比机械硬盘还便宜了。都说固态硬盘一坏文件全扑街，机械硬盘还有抢救的机会，这个只能靠自己掌控了，临近使用寿命或电脑出现异常就要考虑换硬盘了，最好的方法是做备份。 虽然这块盘报废了，也丢失了一些文件，但是由于我把重要的文件都做有备份，但是像这种虚拟机的环境一般都不留备份（文件太大太多）。 得益于硬盘报废，实操了一把前面文章写的自动备份Hexo源文件到私有仓库 和Hexo环境新电脑环境重构 ，博客源文件回来了。 备份很重要-备份很重要-备份很重要 ","date":"2023-02-23T12:11:20Z","permalink":"https://kiraster.github.io/posts/ed7bc2e7.html/","title":"Ubuntu Server 22.04 安装 Gitlab-ce"},{"content":"在上上篇博文中描述了如何将博客源文件推送到GitHub私有仓库备份，这篇文将讲述如何从GitHub私有仓库clone至本地重构 Hexo 环境来写博客\n网上也有很多文章描述如何操作，也可以去参考，我记录我的操作过程如下\n下载安装Git 和 node.js 去官网下载软件包Git (git-scm.com) ，以往的版本 | Node.js (nodejs.org) Git 版本可安装最新的或保持和原环境一致版本 Hexo 版本和原环境的保持一致（npm安装@指定版本号：npm install -g hexo-cli@4.x.x ） node.js 版本保持和原环境一致，因为 Hexo 版本 对 node.js 版本有要求 安装过程基本点“下一步”，注意环境变量的“Add to PATH”勾上 克隆私有仓库至本地 添加本地 Git 配置 **注意：**因为是私有仓库，克隆需要验证权限，安装完成 Git 后先配置用户、邮箱、ssh keys\n我使用的全局配置用户，对于同时推送代码到不同网站的，请按照多用户多仓库的方法配置 git config --global user.name \u0026#34;xxx\u0026#34; git config --global user.email \u0026#34;xxx@xxx.com\u0026#34; 生成公钥，添加 Github SSH Keys 生成公钥 ssh-keygen -t \u0026#34;选一个官方的算法\u0026#34; -C xxx@xxx.com 然后接下来的你应该懂了，复制公钥内容--\u0026gt;\u0026gt;粘贴到Github的 SSH Keys --\u0026gt;\u0026gt; 添加 测试连接 $ ssh -T git@github.com Hi xxxx! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. 有上面的提示说明成功了 克隆私有仓库至本地 git clone 命令跟一个本地路径，克隆下来的文件就在这个目录了，不加目录克隆的话克隆下来的是包含你私有仓库名称的一个文件夹\n**注意：**命令后跟的本地路径，不要手动创建，否则会提示目录已存在，克隆失败\ngit clone git@github.com:kiraster/xxxx-xx.git \u0026#34;D:\\Blog\u0026#34; 安装 Hexo 和 其他npm插件 **注意：**重构 Hexo 环境只需以下的文件，但是其他文件也可以存在\npackage-lock.json这个文件如果执行下一步提示报错就删掉，或者直接删掉\n_config.yml package.json scaffolds/ source/ themes/ 安装 Hexo 和 其他插件 安装 Hexo 保持和原电脑的版本一致 # 查看版本 hexo -v # 安装 npm install -g hexo-cli@4.x.x # 安装后查看版本 hexo -v 安装npm # 修改npm 淘宝镜像 npm confg set http://registry.npm.taobao.org # 查看设置 npm config list # 安装 npm npm install 若这一步报错ERROR Try running: \u0026#39;rm -rf node_modules \u0026amp;\u0026amp; npm install --force\u0026#39; 按照提示操作 rm -rf node_modules \u0026amp;\u0026amp; npm install --force npm会按照 package.json 这个文件的内容自动按照插件，你也可以记事本打开这个文件查看安装的插件 注意：\n一些插件提示不再更新维护支持之类的，取决于主题使用到的插件和旧版本 Hexo 使用的插件，大家自己决定 一些插件可能需要从 GitHub 公共仓库下载文件，保障新电脑网络环境能联网 我的环境就是有个文件下载不来，所以去手动下载，拷贝到对应的目录 大家可以看提示错误，按提示操作，查缺补漏，少的模块文件 本地启动预览 hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo s 观察启动过程，是否有报错信息，按提示解决对象报错，不明的可以去搜索引擎 scripts/下的脚本，如果新电脑和原电脑路径等不一致记得修改 完成这一步骤，基本上就大功告成了 推送至 GitHub 仓库 hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d 因为这一步我的环境有 自动备份源文件到 私有仓库的脚本所以要按照上上篇文章的方式操作一轮\n设置本地 Hexo 目录的 Git\ngit init git branch -M main git remote add origin git@github.com:kiraster/xxxx-xx.git 完结。\n","date":"2022-12-07T15:05:53Z","permalink":"https://kiraster.github.io/posts/567e6fc3.html/","title":"Hexo环境新电脑环境重构"},{"content":"自己日常操作的几个脚本\nbat启动 Hexo 本地服务 bat 推送至 Github 自动打开markdown编辑器 bat启动 Hexo 本地服务 前提条件：已完成博客搭建。\n@echo off :: 切换至博客源文件目录 d: cd D:\\blog5 :: 执行 清除缓存文件\u0026amp;\u0026amp;生成静态文件\u0026amp;\u0026amp;启用本地服务 hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo s 新建后缀为bat的脚本文件 复制以上命令粘贴（注意修改路径 ），保存 双击此脚本运行的结果相当于在你的博客路径下右键 “Git Bash Here” 并输入 “hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo s” 运行. bat 推送至 Github 前提条件：已完成博客搭建和推送 Github 的设置。\n@echo off :: 切换至博客源文件目录 d: cd D:\\blog5 :: 执行 清除缓存文件\u0026amp;\u0026amp;生成静态文件\u0026amp;\u0026amp;部署网站 hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d 新建后缀为 bat 的脚本文件 复制以上命令粘贴（注意修改路径 ），保存 双击此脚本运行的结果相当于在你的博客路径下右键 “Git Bash Here” 并输入 “hexo clean \u0026amp;\u0026amp; hexo g ” 运行，如果只执行 “hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d “ ，当命令执行完后会自动关闭命令窗口，后边加”hexo s“启用本地服务保持窗口不关闭（由于还有自动推送博客源文件的步骤，我不加这个），运行完成后确认是否推送成功，Ctrl+C结束即可 自动打开markdown编辑器 在执行hexo n xxxx后自动打开 markdown 编辑器打开 md 文件，在博客目录下的scripts目录新建js文件（我使用的是Typora）\nvar spawn = require(\u0026#39;child_process\u0026#39;).exec; hexo.on(\u0026#39;new\u0026#39;, function(data){ spawn(\u0026#39;start \u0026#34;D:\\Program Files\\Typora\\Typora.exe\u0026#34; \u0026#39; + data.path); }); 新建后缀为 js 的脚本文件 复制以上命令粘贴（注意修改路径 ），保存 ","date":"2022-12-05T14:53:35Z","permalink":"https://kiraster.github.io/posts/e1203792.html/","title":"Hexo 几个bat脚本"},{"content":"Hexo 部署到Github的文件不包含主题文件，md文件，模版，配置文件等，在新电脑要重新部署相同环境写博客就要拷贝这些文件过去，可以通过文件共享，U盘拷贝，云盘等手段\n还有一种方法就是把这些文件也推送到Github仓库，网上看到有一个hexo-git-backup可以把源码推送到仓库分支实现备份。但是我觉得这样不妥，由于部署到Github的静态网站仓库是公开的，把源文推送这个分支，意味着所有人都可以看到源文件的配置，包括一些个人的信息，可能有网站统计，收录的token，这样就不太好\n看到一篇博文（https://0skyu.cn/p/a8bd.html） 就整的非常好，其中原理过程可以自行去研究\n我参考这篇文章记录我自己的过程和操作\n新建Github私有仓库 不用初始化创建README文件，\n本地Hexo目录git设置 …or create a new repository on the command line\necho \u0026#34;# hexo-source-backup\u0026#34; \u0026gt;\u0026gt; README.md git init git add README.md git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin git@github.com:kiraster/hexo-source-backup.git git push -u origin main 使用上面的命令进行设置，进行第一次push推送，到 Github 网页端查看是否有文件上传\n出现 error: failed to push some refs to 错误，使用强制命令git pull origin master --allow-unrelated-historie，如果还有其他命令报错自行查看文档或 Google，都是简单的小问题搜索引擎第一页就有\n网上很多文章说要修改或创建一个名称为.gitignore的文件，其实这个在你部署静态文件到公共仓库就会有，保持默认就行\n除此之外，有些主题在主题目录下有.gitignore文件，一般主题作者不会把主题配置文件_config.yml上传，这里要把这行去掉，使之上传到私有仓库\n.DS_Store Thumbs.db db.json *.log node_modules/ public/ .deploy*/ _multiconfig.yml 安装 shelljs 模块 npm install --save shelljs 自动备份脚本 创建一个js脚本文件，保存在博客目录下的scripts目录，文件名称自己定\n第 38 行 的双引号提交信息 任意修改\n第 15 和 41 行 的分支名称注意 保持和第二步骤中的保持一致，有些用人喜欢用main有些人喜欢用master\nrequire(\u0026#39;shelljs/global\u0026#39;); const logger = require(\u0026#39;hexo-log\u0026#39;)(); /* 危险操作，注意查看控制台提示！！！ */ hexo.on(\u0026#39;generateBefore\u0026#39;, function() { logger.info(\u0026#34;Start pulling\\n==================================================\u0026#34;); pullToLocal(); }); function pullToLocal() { if (exec(\u0026#39;git stash\u0026#39;).code !== 0) { logger.error(\u0026#39;暂时存放出错，请查看提示处理\u0026#39;); } if (exec(\u0026#39;git pull origin main\u0026#39;).code !== 0) { logger.error(\u0026#39;同步到本地出错，请检查网络连接查看提示处理\u0026#39;); } if (exec(\u0026#39;git stash pop\u0026#39;).code !== 0) { logger.error(\u0026#39;重新应用缓存的stash出错，请查看提示处理\u0026#39;); process.exit(-1); } logger.info(\u0026#34;Pull done\\n==================================================\u0026#34;); } try { hexo.on(\u0026#39;deployAfter\u0026#39;, function() { logger.info(\u0026#34;Start pushing\\n==================================================\u0026#34;); pushToPrivateRepo(); }); } catch (e) { logger.info(\u0026#34;博客源码推送至私有仓库异常，错误提示：\u0026#34; + e.toString()); } function pushToPrivateRepo() { if (exec(\u0026#39;git add .\u0026#39;).code !== 0) { logger.warn(\u0026#34;添加文件到暂存区出错\u0026#34;); } if (exec(\u0026#39;git commit -m \u0026#34;Auto backup\u0026#34;\u0026#39;).code !== 0) { logger.warn(\u0026#34;没有提交的新内容或提交暂存区到本地仓库错误\u0026#34;); } if (exec(\u0026#39;git push origin main\u0026#39;).code !== 0) { logger.warn(\u0026#34;推送代码至github main 主分支出错\u0026#34;); } logger.info(\u0026#34;Push done\\n==================================================\u0026#34;) console.log(\u0026#34;Ctrl + C 退出或关闭窗口退出或60秒后自动退出\u0026#34;); setTimeout(() =\u0026gt; console.log(\u0026#39;q\u0026#39;), 60000) } 推送 执行hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d会自动调用这个脚本\n…… …… INFO Start pulling ================================================== Saved working directory and index state WIP on main: 4978dc8 Auto backup From github.com:kiraster/xxxx-xx * branch main -\u0026gt; FETCH_HEAD Already up to date. On branch main Changes not staged for commit: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to update what will be committed) (use \u0026#34;git restore \u0026lt;file\u0026gt;...\u0026#34; to discard changes in working directory) modified: source/_posts/xxxx-xx.md no changes added to commit (use \u0026#34;git add\u0026#34; and/or \u0026#34;git commit -a\u0026#34;) Dropped refs/stash@{0} (ce84730faef3bc908459561ad81e352ec3daeda6) INFO Pull done ================================================== …… …… INFO Deploy done: git INFO Start pushing ================================================== [main 0f532bb] Auto backup 1 file changed, 1 insertion(+), 1 deletion(-) To github.com:kiraster/xxxx-xx.git 4481470..0f532bb main -\u0026gt; main INFO Push done ================================================== Ctrl + C 退出或关闭窗口退出或60秒后自动退出 注意：\n出现没有提交新内容到缓冲区，推送等错误，按提示排查错误即可 看到原博客出现要切换到博客目录的这一行脚本命令，我觉得在推送博客的时候你就已经切换到博客目录，去掉这一行 ","date":"2022-12-05T12:55:52Z","permalink":"https://kiraster.github.io/posts/310ece77.html/","title":"自动备份Hexo源文件到私有仓库"},{"content":"今天推送 Github Pages 博客发现需要输入账号密码，网页端检查SSH Keys 和本地检查公钥pub都没问题\n最后通过搜索引擎助力，修改 https 方式为 git 方式，成功推送\n方法：修改博客目录下的_config.yml文件配置（不是主题目录下的配置文件）\n# Deployment ## Docs: https://hexo.io/docs/one-command-deployment deploy: type: git # repo: https://github.com/kiraster/kiraster.github.io.git # 20221201发现使用https方式需要输入验证账号密码，修改为git方式后正常推送 repo: git@github.com:kiraster/kiraster.github.io.git branch: master ","date":"2022-12-01T23:57:08Z","permalink":"https://kiraster.github.io/posts/5826b49.html/","title":"Hexo推送提示输入账号密码问题"},{"content":"当前日期时间： 20221201 版本:H3C Comware Software, Version 7.1.064, Release 9628P2416还没有安全策略导出到表格的功能，而有时确实有实际需求导出安全策略到表格，无论是存档还是提交报告\n本文介绍使用python脚本语言编写一个根据display回显内容提取安全策略和对象组到表格的方法\n环境介绍：\n{% blockquote %}\nPython 3.9.7\nopenpyxl 3.0.10\nHCL 3.0.1 （现网环境都为敏感内容，勉为其难用模拟器）\nVScode 1.73.1\n{% endblockquote %}\n提取工作过程 命令行登陆设备导出display回显内容 利用SecureCRT的Log Session(记录日志)功能生成一个包含回显内容的log文件，放置在与脚本文件相同目录\n本次使用的是205550.log'，在下面代码中更换为自己的文件名称\n使用的命令\n# 查看安全策略 dis security-policy ip # 查看地址对象组 dis object-group ip address # 查看服务对象组 dis object-group service \u0026lt;Core_FW\u0026gt;dis security-policy ip Security-policy ip rule 2 name management-local action pass source-zone management destination-zone local …… …… …… \u0026lt;Core_FW\u0026gt;dis object-group ip address Ip address object group api.test.com: 1 object(in use) 0 network host name api.test.com …… …… …… \u0026lt;Core_FW\u0026gt;dis object-group service Service object group A服务器端口服务: 3 objects(in use) 0 service tcp destination eq 1433 10 service tcp destination range 300 3010 20 service udp destination eq 2222 Service object group 访问test.comAPI接口: 2 objects(in use) 0 service tcp destination eq 443 10 service tcp destination range 9000 9100 \u0026lt;Core_FW\u0026gt; 运行的代码 from openpyxl import Workbook from openpyxl.styles import PatternFill import openpyxl from datetime import datetime class SecPolicy2XLSX: # 初始化参数 def __init__(self): # 文件名时间部分，用于区别新旧 self.create_time = datetime.now().strftime(\u0026#34;%Y%m%d%H%M%S\u0026#34;) # 读取文件，填写同目录从防火墙命令巴拉下来的文件 self.export_cfg = \u0026#39;205550.log\u0026#39; self.f = open(self.export_cfg, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf8\u0026#39;) # 表格 - 表头数据 self.sheet1_th = [[ \u0026#39;名称\u0026#39;, \u0026#39;ID\u0026#39;, \u0026#39;源安全域\u0026#39;, \u0026#39;目的安全域\u0026#39;, \u0026#39;类型\u0026#39;, \u0026#39;描述\u0026#39;, \u0026#39;源地址\u0026#39;, \\ \u0026#39;目的地址\u0026#39;, \u0026#39;服务\u0026#39;, \u0026#39;用户\u0026#39;, \u0026#39;动作\u0026#39;, \u0026#39;内容安全\u0026#39;, \u0026#39;记录日志\u0026#39;, \u0026#39;策略匹配统计\u0026#39;, \u0026#39;启用\u0026#39; ]] self.sheet2_th = [[\u0026#39;对象组名称和被引用\u0026#39;, \u0026#39;对象\u0026#39;]] # 表格初始数据 self.wb = Workbook() self.ws1 = self.wb.active self.ws1.title = \u0026#39;安全策略\u0026#39; self.ws2 = self.wb.create_sheet(\u0026#39;地址对象组\u0026#39;) self.ws3 = self.wb.create_sheet(\u0026#39;服务对象组\u0026#39;) # 写入表头 for i in self.sheet1_th: self.ws1.append(i) for i in self.sheet2_th: self.ws2.append(i) self.ws3.append(i) # 提取安全策略信息 def sp_comtent(self): # 保存单条策略内容的字典 comtent_dict = {} # 保存以下几项内容的字典，原因在于命令行中显示为多个（每个一行） src_zone_list = [] dst_zone_list = [] src_ip_list = [] dst_ip_list = [] service_list = [] while True: cfg_line = self.f.readline() if \u0026#39;rule\u0026#39; in cfg_line: name = cfg_line.strip().split(\u0026#39; \u0026#39;, 3)[3] id = cfg_line.split()[1] comtent_dict[\u0026#39;name\u0026#39;] = name comtent_dict[\u0026#39;id\u0026#39;] = id if \u0026#39;source-zone\u0026#39; in cfg_line: src_zone_list.append(cfg_line.strip().split()[1]) if \u0026#39;profile\u0026#39; in cfg_line: profile_type = cfg_line.strip().split()[1].split(\u0026#39;_\u0026#39;)[1] comtent_dict[\u0026#39;profile_type\u0026#39;] = profile_type if \u0026#39;description\u0026#39; in cfg_line: desc = cfg_line.strip()[12:] comtent_dict[\u0026#39;desc\u0026#39;] = desc if \u0026#39;destination-zone\u0026#39; in cfg_line: dst_zone_list.append(cfg_line.strip().split()[1]) if \u0026#39;source-ip\u0026#39; in cfg_line: src_ip_list.append(cfg_line.strip().split(\u0026#39; \u0026#39;, 1)[1]) if \u0026#39;destination-ip\u0026#39; in cfg_line: dst_ip_list.append(cfg_line.strip().split(\u0026#39; \u0026#39;, 1)[1]) if \u0026#39;action\u0026#39; in cfg_line: action = cfg_line.strip().split()[1] comtent_dict[\u0026#39;action\u0026#39;] = action if \u0026#39;logging \u0026#39; in cfg_line: logg = cfg_line.strip().split()[1] comtent_dict[\u0026#39;logg\u0026#39;] = logg if \u0026#39;counting \u0026#39; in cfg_line: count = cfg_line.strip().split()[1] comtent_dict[\u0026#39;count\u0026#39;] = count if \u0026#39;disable\u0026#39; in cfg_line: # enable = cfg_line.strip() comtent_dict[\u0026#39;enable\u0026#39;] = \u0026#39;disable\u0026#39; if \u0026#39;service\u0026#39; in cfg_line: service_list.append(cfg_line.strip().split(\u0026#39; \u0026#39;, 1)[1]) # display 回显的内容 空行分割一条安全策略 if cfg_line.strip() == \u0026#39;\u0026#39;: break # 把最终列表拼接到字符串 src_zone = \u0026#39;,\u0026#39;.join(src_zone_list) dst_zone = \u0026#39;,\u0026#39;.join(dst_zone_list) src_ip = \u0026#39;,\u0026#39;.join(src_ip_list) dst_ip = \u0026#39;,\u0026#39;.join(dst_ip_list) service = \u0026#39;,\u0026#39;.join(service_list) # 把最终列表拼接到字符串写入comtent_dict字典 comtent_dict[\u0026#39;src_zone\u0026#39;] = src_zone comtent_dict[\u0026#39;dst_zone\u0026#39;] = dst_zone comtent_dict[\u0026#39;src_ip\u0026#39;] = src_ip comtent_dict[\u0026#39;dst_ip\u0026#39;] = dst_ip comtent_dict[\u0026#39;service\u0026#39;] = service # 返回值是单条安全策略的字典 return comtent_dict # 提取地址对象组信息 def ip_obj_comtent(self): comtent_dict = {} networw_list = [] while True: cfg_line = self.f.readline() if \u0026#39;Ip address object group\u0026#39; in cfg_line: name = cfg_line.strip().split(\u0026#39; \u0026#39;, 4)[4] comtent_dict[\u0026#39;name\u0026#39;] = name if \u0026#39;network \u0026#39; in cfg_line: networw_list.append(cfg_line.strip().split(\u0026#39; \u0026#39;, 2)[2]) if cfg_line.strip() == \u0026#39;\u0026#39;: break networw_list = \u0026#39;,\u0026#39;.join(networw_list) comtent_dict[\u0026#39;networw_list\u0026#39;] = networw_list # 返回值是单个地址对象组的字典 return comtent_dict # 提取服务对象组信息 def service_obj_comtent(self): comtent_dict = {} service_list = [] while True: cfg_line = self.f.readline() if \u0026#39;Service object group\u0026#39; in cfg_line: name = cfg_line.strip().split(\u0026#39; \u0026#39;, 3)[3] comtent_dict[\u0026#39;name\u0026#39;] = name if \u0026#39;service tcp\u0026#39; in cfg_line or \u0026#39;service udp\u0026#39; in cfg_line: service_list.append(cfg_line.strip().split(\u0026#39; \u0026#39;, 2)[2]) if cfg_line.strip() == \u0026#39;\u0026#39;: break service_list = \u0026#39;,\u0026#39;.join(service_list) comtent_dict[\u0026#39;service_list\u0026#39;] = service_list # 返回值是单个服务对象组的字典 return comtent_dict # 循环 返回全部安全策略的生成器 def more_sp_comtent(self): # 找到文件末 的指针，用于判断是否读取完整个文件 eof = self.f.seek(0, 2) self.f.seek(0, 0) while True: res = self.sp_comtent() yield res if self.f.tell() \u0026gt;= eof: break # 循环 返回全部地址对象组的生成器 def more_ip_comtent(self): eof = self.f.seek(0, 2) self.f.seek(0, 0) while True: res = self.ip_obj_comtent() yield res if self.f.tell() \u0026gt;= eof: break # 循环 返回全部服务对象组的生成器 def more_service_comtent(self): eof = self.f.seek(0, 2) self.f.seek(0, 0) while True: res = self.service_obj_comtent() yield res if self.f.tell() \u0026gt;= eof: break # 安全策略，移除和填充内容字典元素 def sp_fill_task(self): # 生成器 转 列表套字典 res = self.more_sp_comtent() comtent_list = list(res) # 移除不相干元素，列表套字典中字典不包含 \u0026#39;name\u0026#39; 键的字典 index_list = [] for i in comtent_list: key_list = list(i.keys()) if \u0026#39;name\u0026#39; not in key_list: # 字典中不包含 \u0026#39;name\u0026#39; 键的字典在comtent_list列表的索引值 index_list.append(comtent_list.index(i)) # 索引列表去重--\u0026gt;\u0026gt;降序排列--\u0026gt;\u0026gt;删元素 index_list = list(set(index_list)) index_list.sort(reverse=True) for i in index_list: comtent_list.pop(i) # comtent_list列表去重 ret_comtent_list = [] for i in comtent_list: if i not in ret_comtent_list: ret_comtent_list.append(i) # 去头 ret_comtent_list = ret_comtent_list[1:] # 添加一些默认值，一些安全策略值在display回显的内容不显示 for i in ret_comtent_list: i[\u0026#39;user\u0026#39;] = \u0026#39;Any\u0026#39; # 一般应用安全都是使用默认配置文件中default策略，如有自定义的配置文件就增加一个提取函数 i[\u0026#39;ap_profile\u0026#39;] = \u0026#39;default\u0026#39; i.setdefault(\u0026#39;desc\u0026#39;, \u0026#39;-\u0026#39;) # 安全策略没有启用显示disable，启用了display没有显示 i.setdefault(\u0026#39;enable\u0026#39;, \u0026#39;enable\u0026#39;) # IPv4 网络环境默认 i.setdefault(\u0026#39;profile_type\u0026#39;, \u0026#39;IPv4\u0026#39;) # 命中计数和流量统计，没有启用不在display显示 i.setdefault(\u0026#39;count\u0026#39;, \u0026#39;disable\u0026#39;) # 记录日志 i.setdefault(\u0026#39;logg\u0026#39;, \u0026#39;enable\u0026#39;) # print(i) # 键的值为空则替换为 Any ret_comtent_list = [{k: v if v and k != \u0026#39;desc\u0026#39; else \u0026#39;Any\u0026#39; for k, v in i.items()} for i in ret_comtent_list] # 最后一条拒绝所有策略的描述 ret_comtent_list[-1][\u0026#39;desc\u0026#39;] = \u0026#39;\u0026#39; self.ret_comtent_list = ret_comtent_list # 返回一个完整的列表套字典 return self.ret_comtent_list # 地址对象组，移除和填充内容字典元素 def ip_fill_task(self): # 生成器 转 列表套字典 res = self.more_ip_comtent() comtent_list = list(res) # 列表去重 ret_comtent_list = [] for i in comtent_list: if i not in ret_comtent_list: ret_comtent_list.append(i) # 去头 ret_comtent_list = ret_comtent_list[1:] self.ret_comtent_list = ret_comtent_list return self.ret_comtent_list def service_fill_task(self): # 生成器 转 列表套字典 res = self.more_service_comtent() comtent_list = list(res) # 列表去重 ret_comtent_list = [] for i in comtent_list: if i not in ret_comtent_list: ret_comtent_list.append(i) # 去头 ret_comtent_list = ret_comtent_list[1:] self.ret_comtent_list = ret_comtent_list # 在此处关闭文件 self.f.close() return self.ret_comtent_list # 写入数据到表格 - 安全策略工作表 def write2ws1(self): # 从第二行开始写入 row = 2 big_list = self.sp_fill_task() for i in big_list: self.ws1.cell(row=row, column=1, value=i[\u0026#39;name\u0026#39;]) self.ws1.cell(row=row, column=2, value=i[\u0026#39;id\u0026#39;]) self.ws1.cell(row=row, column=3, value=i[\u0026#39;src_zone\u0026#39;]) self.ws1.cell(row=row, column=4, value=i[\u0026#39;dst_zone\u0026#39;]) self.ws1.cell(row=row, column=5, value=i[\u0026#39;profile_type\u0026#39;]) self.ws1.cell(row=row, column=6, value=i[\u0026#39;desc\u0026#39;]) self.ws1.cell(row=row, column=7, value=i[\u0026#39;src_ip\u0026#39;]) self.ws1.cell(row=row, column=8, value=i[\u0026#39;dst_ip\u0026#39;]) self.ws1.cell(row=row, column=9, value=i[\u0026#39;service\u0026#39;]) self.ws1.cell(row=row, column=10, value=i[\u0026#39;user\u0026#39;]) self.ws1.cell(row=row, column=11, value=i[\u0026#39;action\u0026#39;]) self.ws1.cell(row=row, column=12, value=i[\u0026#39;ap_profile\u0026#39;]) self.ws1.cell(row=row, column=13, value=i[\u0026#39;logg\u0026#39;]) self.ws1.cell(row=row, column=14, value=i[\u0026#39;count\u0026#39;]) self.ws1.cell(row=row, column=15, value=i[\u0026#39;enable\u0026#39;]) row += 1 # 写入数据到表格 - 地址对象组工作表 def write2ws2(self): row = 2 big_list = self.ip_fill_task() for i in big_list: self.ws2.cell(row=row, column=1, value=i[\u0026#39;name\u0026#39;]) self.ws2.cell(row=row, column=2, value=i[\u0026#39;networw_list\u0026#39;]) row += 1 # 写入数据到表格 - 地址对象组工作表 def write2ws3(self): row = 2 big_list = self.service_fill_task() for i in big_list: self.ws3.cell(row=row, column=1, value=i[\u0026#39;name\u0026#39;]) self.ws3.cell(row=row, column=2, value=i[\u0026#39;service_list\u0026#39;]) row += 1 # 调整表格显示 保存xlsx表格 def save_to_file(self): # 修改ws1列宽 self.ws1.column_dimensions[\u0026#39;A\u0026#39;].width = 50 self.ws1.column_dimensions[\u0026#39;B\u0026#39;].width = 4 self.ws1.column_dimensions[\u0026#39;C\u0026#39;].width = 46 self.ws1.column_dimensions[\u0026#39;D\u0026#39;].width = 38 self.ws1.column_dimensions[\u0026#39;F\u0026#39;].width = 50 self.ws1.column_dimensions[\u0026#39;G\u0026#39;].width = 50 self.ws1.column_dimensions[\u0026#39;H\u0026#39;].width = 50 self.ws1.column_dimensions[\u0026#39;I\u0026#39;].width = 50 self.ws1.column_dimensions[\u0026#39;N\u0026#39;].width = 12 # 修改ws2列宽 self.ws2.column_dimensions[\u0026#39;A\u0026#39;].width = 50 self.ws2.column_dimensions[\u0026#39;B\u0026#39;].width = 255 # 修改ws3列宽 self.ws3.column_dimensions[\u0026#39;A\u0026#39;].width = 50 self.ws3.column_dimensions[\u0026#39;B\u0026#39;].width = 255 # 修改列 垂直居中 自动换行，表头背景色 ，冻结首行 self.ws1.freeze_panes = \u0026#39;A2\u0026#39; self.ws2.freeze_panes = \u0026#39;A2\u0026#39; self.ws3.freeze_panes = \u0026#39;A2\u0026#39; th_color_fill = PatternFill(\u0026#39;solid\u0026#39;, fgColor=\u0026#39;D3D3D3\u0026#39;) for col in range(1, 16): self.ws1.cell(row=1, column=col).fill = th_color_fill for col in range(1, 3): self.ws2.cell(row=1, column=col).fill = th_color_fill for col in range(1, 3): self.ws3.cell(row=1, column=col).fill = th_color_fill for r in self.ws1: for c in r: c.alignment = openpyxl.styles.Alignment(vertical=\u0026#39;center\u0026#39;, wrapText=True) for r in self.ws2: for c in r: c.alignment = openpyxl.styles.Alignment(vertical=\u0026#39;center\u0026#39;, wrapText=True) for r in self.ws3: for c in r: c.alignment = openpyxl.styles.Alignment(vertical=\u0026#39;center\u0026#39;, wrapText=True) # 保存并生成文件 self.wb.save(f\u0026#39;XXX防火墙安全策略统计{self.create_time}.xlsx\u0026#39;) if __name__ == \u0026#39;__main__\u0026#39;: # 类实例化 x = SecPolicy2XLSX() # res = x.sp_comtent() # res = x.more_comtent() # res = x.more_ip_comtent() # for i in res: # print(i) # x.ip_fill_task() x.write2ws1() x.write2ws2() x.write2ws3() x.save_to_file() print(\u0026#39;搞快点--\u0026gt;\u0026gt;搞快点--\u0026gt;\u0026gt;\u0026#39;) 导出的表格 ","date":"2022-12-01T21:01:44Z","permalink":"https://kiraster.github.io/posts/f285fb93.html/","title":"H3C 防火墙（v7）提取导出安全策略至表格"},{"content":"Ubuntu 22.04安装iNode管理中心和定制客户端，如题\n官网下载安装文件 从官网下载 iNode PC(PC客户端)（https://www.h3c.com/cn/Service/Document_Software/Software_Download/IP_Management/\n解压后将Linux目录下的iNodeManager_H3C_Linux64_7.30(E0598).tar.gz上传至 Ubuntu Downloads目录\n解压和安装 解压文件，并将解压后的文件夹所有者更改为当前用户，\n移动文件夹至 /home 目录\n修改文件夹下 install64.sh 的权限\n安装文件\n执行命令： kir@kir:~/Downloads$ sudo tar -zxvf iNodeManager_H3C_Linux64_7.30\\(E0598\\).tar.gz kir@kir:~/Downloads$ sudo chown -R kir iNodeManager kir@kir:~/Downloads$ sudo mv iNodeManager /home/ kir@kir:~/Downloads$ cd /home/ kir@kir:/home$ cd iNodeManager/ kir@kir:/home/iNodeManager$ sudo chmod u+x install64.sh kir@kir:/home/iNodeManager$ sudo sh install64.sh 操作步骤记录： kir@kir:~$ kir@kir:~$ pwd /home/kir kir@kir:~$ cd Downloads/ kir@kir:~/Downloads$ ll total 44368 drwxr-xr-x 2 kir kir 4096 11月 26 11:40 ./ drwxr-x--- 16 kir kir 4096 11月 26 01:51 ../ -rw-rw-r-- 1 kir kir 45422267 6月 30 22:10 \u0026#39;iNodeManager_H3C_Linux64_7.30(E0598).tar.gz\u0026#39; kir@kir:~/Downloads$ kir@kir:~/Downloads$ sudo tar -zxvf iNodeManager_H3C_Linux64_7.30\\(E0598\\).tar.gz [sudo] password for kir: ./iNodeManager/ ./iNodeManager/7za ./iNodeManager/template/ ./iNodeManager/template/iNodeClient_Linux64.tar.gz ./iNodeManager/install64.sh.bak ./iNodeManager/Resources/ ./iNodeManager/Resources/Language_en.xml ./iNodeManager/Resources/Language_zh.xml ./iNodeManager/uninstall64.sh.bak ./iNodeManager/qt_zh_CN.qm ./iNodeManager/uninstall64.sh ./iNodeManager/install64.sh ./iNodeManager/makeDeb.sh ./iNodeManager/imageformats/ ./iNodeManager/imageformats/libqmng.so ./iNodeManager/imageformats/libqjpeg.so ./iNodeManager/imageformats/libqsvg.so ./iNodeManager/imageformats/libqico.so ./iNodeManager/imageformats/libqtga.so ./iNodeManager/imageformats/libqwbmp.so ./iNodeManager/imageformats/libqtiff.so ./iNodeManager/imageformats/libqgif.so ./iNodeManager/platforms/ ./iNodeManager/platforms/libqoffscreen.so ./iNodeManager/platforms/libqminimal.so ./iNodeManager/platforms/libqxcb.so ./iNodeManager/platforms/libqlinuxfb.so ./iNodeManager/lib64.tar.gz ./iNodeManager/iNodeManager ./iNodeManager/iNode.vif kir@kir:~/Downloads$ ll total 44372 drwxr-xr-x 3 kir kir 4096 11月 26 13:29 ./ drwxr-x--- 16 kir kir 4096 11月 26 01:51 ../ drwxrwxr-x 6 500 500 4096 6月 30 20:13 iNodeManager/ -rw-rw-r-- 1 kir kir 45422267 6月 30 22:10 \u0026#39;iNodeManager_H3C_Linux64_7.30(E0598).tar.gz\u0026#39; kir@kir:~/Downloads$ sudo chown -R kir iNodeManager kir@kir:~/Downloads$ sudo mv iNodeManager /home/ kir@kir:~/Downloads$ cd /home/ kir@kir:/home$ ll total 16 drwxr-xr-x 4 root root 4096 11月 26 13:30 ./ drwxr-xr-x 20 root root 4096 11月 26 01:28 ../ drwxrwxr-x 6 kir 500 4096 6月 30 20:13 iNodeManager/ drwxr-x--- 16 kir kir 4096 11月 26 01:51 kir/ kir@kir:/home$ cd iNodeManager/ kir@kir:/home/iNodeManager$ ll total 19712 drwxrwxr-x 6 kir 500 4096 6月 30 20:13 ./ drwxr-xr-x 4 root root 4096 11月 26 13:30 ../ -rw-rw-r-- 1 kir 500 1125104 6月 30 20:13 7za drwxrwxr-x 2 kir 500 4096 6月 30 20:13 imageformats/ -rwxrwxr-x 1 kir 500 810603 6月 30 20:13 iNodeManager* -rw-rw-r-- 1 kir 500 300 6月 30 20:13 iNode.vif -rw-rw-r-- 1 kir 500 63 6月 30 20:13 install64.sh -rw-rw-r-- 1 kir 500 959 6月 30 20:13 install64.sh.bak -rw-rw-r-- 1 kir 500 18079733 6月 30 20:13 lib64.tar.gz -rw-rw-r-- 1 kir 500 926 6月 30 20:13 makeDeb.sh drwxrwxr-x 2 kir 500 4096 6月 30 20:13 platforms/ -rw-rw-r-- 1 kir 500 117337 6月 30 20:13 qt_zh_CN.qm drwxrwxr-x 2 kir 500 4096 6月 30 20:13 Resources/ drwxrwxr-x 2 kir 500 4096 6月 30 20:13 template/ -rw-rw-r-- 1 kir 500 41 6月 30 20:13 uninstall64.sh -rw-rw-r-- 1 kir 500 924 6月 30 20:13 uninstall64.sh.bak kir@kir:/home/iNodeManager$ sudo chmod u+x install64.sh kir@kir:/home/iNodeManager$ kir@kir:/home/iNodeManager$ sudo sh install64.sh lib64/ lib64/libQt5DBus.so.5.1.1 lib64/libQt5DBus.so.5.1 lib64/libQt5DBus.so.5 lib64/libicudata.so.51.1 lib64/libicudata.so.51 lib64/libicui18n.so.51.1 lib64/libicui18n.so.51 lib64/libQt5Core.so.5.1.1 lib64/libQt5Core.so.5.1 lib64/libQt5Core.so.5 lib64/libQt5Gui.so.5.1.1 lib64/libQt5Xml.so.5.1.1 lib64/libQt5Xml.so.5.1 lib64/libQt5Xml.so.5 lib64/libicuuc.so.51.1 lib64/libicuuc.so.51 lib64/libQt5Network.so.5 lib64/libQt5Gui.so.5.1 lib64/libQt5Gui.so.5 lib64/libQt5Widgets.so.5.1.1 lib64/libQt5Network.so.5.1.1 lib64/libQt5Widgets.so.5.1 lib64/libQt5Widgets.so.5 lib64/libQt5Network.so.5.1 kir@kir:/home/iNodeManager$ 启动管理中心和定制客户端 启动管理中心（图形化界面操作），路径位于/home/iNodeManager\n仅勾选 SSL VPN 一项（按需勾选），点击 Advanced\n添加 网关地址 （与防火墙上配置的网关 SSLVPNGW 一致），点击 OK，点击 Finish\n填写一个标题，勾选第一项\n定制完成后 生成的客户端文件位于/home/iNodeManager/iNodeSetup\nkir@kir:/home/iNodeManager$ cd iNodeSetup/ kir@kir:/home/iNodeManager/iNodeSetup$ ll total 25260 drwxrwxr-x 2 kir kir 4096 11月 26 13:39 ./ drwxrwxr-x 11 kir 500 4096 11月 26 13:39 ../ -rw-rw-r-- 1 kir kir 25857547 11月 26 13:39 \u0026#39;iNodeClient_Linux64_7.3 (E0598).tar.gz\u0026#39; kir@kir:/home/iNodeManager/iNodeSetup$ 安装 iNode 客户端 将iNodeClient_Linux64_7.3 (E0598).tar.gz文件解压，并移动 iNodeClient 文件夹至/home目录 kir@kir:/home/iNodeManager/iNodeSetup$ kir@kir:/home/iNodeManager/iNodeSetup$ sudo tar -zxvf iNodeClient_Linux64_7.3\\ \\(E0598\\).tar.gz …… …… …… kir@kir:/home/iNodeManager/iNodeSetup$ ll total 25264 drwxrwxr-x 3 kir kir 4096 11月 26 13:44 ./ drwxrwxr-x 11 kir 500 4096 11月 26 13:39 ../ drwxr-xr-x 9 kir kir 4096 6月 30 20:07 iNodeClient/ -rw-rw-r-- 1 kir kir 25857547 11月 26 13:39 \u0026#39;iNodeClient_Linux64_7.3 (E0598).tar.gz\u0026#39; kir@kir:/home/iNodeManager/iNodeSetup$ sudo mv iNodeClient /home/ kir@kir:/home/iNodeManager/iNodeSetup$ cd /home/ kir@kir:/home$ ll total 20 drwxr-xr-x 5 root root 4096 11月 26 13:46 ./ drwxr-xr-x 20 root root 4096 11月 26 01:28 ../ drwxr-xr-x 9 kir kir 4096 6月 30 20:07 iNodeClient/ drwxrwxr-x 11 kir 500 4096 11月 26 13:39 iNodeManager/ drwxr-x--- 16 kir kir 4096 11月 26 01:51 kir/ kir@kir:/home$ 切换至iNodeClient 文件夹 ，执行 sh install_64.sh\nkir@kir:/home$ cd iNodeClient/ kir@kir:/home/iNodeClient$ sudo sh install_64.sh Nothing special for Ubuntu 22.04.1 LTS \\l Starting AuthenMngService: OK 启动 iNode 客户端 图形界面 进入/home/iNodeClient/.iNode目录（看不到.iNode 文件夹，先勾选显示隐藏文件）\n双击iNodeClient启动，创建一个连接（填写name,Username,Password)\nSSLVPN 拨号\n查看获取到的客户端地址，并测试\n防火墙查看 SSLVPN 会话信息 最后 我电脑Windows + Ubuntu 22.04 双系统，在现网环境中都可正常使用 SSLVPN Ubuntu 截图和写Markdown发博客不方便（最重要的 HCL 没有Linux版本），所以拉了个虚拟机 按照官方的安装指导手册以普通用户安装，最后定制生成客户端会无法生成文件，需要在解压后将iNodeManager文件夹所有者更改为当前普通用户 在客户端创建新连接时，认证类型要选择 Local，否则拨号后提示网关参数错误 在定制客户端最后一步有三个选项 Generate customized client setup program(生成一个安装包，常用) Generate customized client upgrade package(升级包，使用前本地已经安装有旧版本，理解为增量升级包) Generate lightweight client upgrade package(用于放在服务端，在防火墙的SSL VPN\u0026ndash;\u0026raquo;全局配置\u0026ndash;\u0026raquo;上传客户端文件位置，在浏览器输入SSLVPNGW:4443可已打开页面，底下一行有下载的链接，就是下载这个文件) ","date":"2022-11-26T16:34:36Z","permalink":"https://kiraster.github.io/posts/4eda38e9.html/","title":"Ubuntu 22.04 安装iNode管理中心和定制客户端"},{"content":"本文使用华三 HCL 模拟器搭建拓扑，实现 H3C 防火墙（v7）SSLVPN 实验\n后一篇文章中描述 在 Ubuntu 22.04 中安装 iNode 客户端拨号测试\n本来只想写 Ubuntu 安装 iNode 的，想想还是一起记录下来\n文中的所有操作方法都可在华三官网和搜索引擎找到\n拓扑图 基操 配置接口 IP 地址 接口划入安全域（untrust，trust），新建安全域 SSLVPN 配置路由（FW\u0026ndash;\u0026raquo; ROUTER:172.16.1.0/24，ROUTER\u0026ndash;\u0026raquo;FW:0.0.0.0/0） 配置安全策略互通（any） 防火墙配置 SSLVPN 配置 SSLVPN 网关 Gateway Name: SSLVPNGW\nIP Address: 172.31.100.234\nport: 4443\n配置 IP 接入接口 安全域： SSLVPN\n指定IP地址：172.31.200.254/24\n本机接收可不选\n创建SSL VPN客户端地址池 地址池名称： SSLVPNPOOL\n172.31.200.10 - 172.31.200.100\n配置SSL VPN访问实例 访问实例： KIRIP 关联网关：SSLVPNGW url acl: None IP业务：\n​\tIP接入接口：SSLVPN-AC1 INTERFACE\n​ 客户端地址池：SSLVPNPOOL\nIP接入资源：添加要被VPN接入客户端访问的网络 : ROUTERLIST:\n​\t172.16.1.0/24\n​\t……\n不配置快捷方式，next\n配置资源组\n资源组名称：RESOURCEGROUP 指定路由接入VPN：子网资源 客户端地址池：SSLVPNPOOL 客户端掩码：24 acl：3999 (新建acl，rule permit ip) 完成配置，使能访问实例（勾上）\n创建 SSLVPN 用户 填写用户名\u0026ndash;\u0026raquo;勾选SSL VPN\n授权属性： SSL VPN 策略组： resourcegroup\nWindows平台 iNode 客户端测试 新建场景\u0026ndash;\u0026raquo;创建连接 查看连接状态和分配到的客户端地址 访问资源和跟踪路径 ","date":"2022-11-26T15:12:31Z","permalink":"https://kiraster.github.io/posts/ed57c1e2.html/","title":"H3C 防火墙（v7）SSLVPN 实验配置"},{"content":"深信服漏洞扫描系统（基线核查）执行漏扫任务，检测出华三 F5060 防火墙存在CVE 2015-0204,CVE 1999-0524漏洞，处理过程记录。\nSSL/TLS:已弃用的TLSv1.0和TLSv1.1协议检测(CVE-2015-0204) {% blockquote %}\n漏洞描述：\nCVE-2015-0204:OpenSSL是OpenSSL团队开发的一个开源的能够实现安全套接层（SSL v2/v3）和安全传输层（TLS v1）协议的通用加密库，它支持多种加密算法，包括对称密码、哈希算法、安全散列算法等. OpenSSL的s3_clnt.c文件中的‘ssl3_get_key_exchange’函数存在安全漏洞.远程攻击者可通过提供临时的RSA密钥利用该漏洞实施RSA-to-EXPORT_RSA降级攻击，加快暴力破解进度.以下版本受到影响：OpenSSL 0.9.8zd之前版本，1.0.0p之前1.0.0版本，1.0.1k之前1.0.1版本.\n{% endblockquote %}\n分析处理：\n根据描述是某些 TLS 版本存在该漏洞，那么解决思路就指向：把这些有漏洞的 TLS 版本不启用不就完事了。事实也是如此 待按步骤操作完后，iNode 客户端就拨不上了（配置了 SSLVPN 服务），提示找不到网关 起初以为是加密套件去掉的太多了（还有其他漏洞，诸如：CVE-2002-20001，CVE-2016-2183，CVE-2016-2183,，CVE-2016-6329，CVE-2013-2566，CVE-2015-2808， CVE-2015-4000，CVE-2015-0204），处理上面这些漏洞，看着漏洞描述去除了一些加密套件 又把这些去掉的加密套件加上测试了一轮，客户端还是拨号失败，直到把 TLS 1.0 加上，拨上了。 问题指向了 iNode 客户端，经过上官网下载最新版 iNode 定制了一个新版本客户端，无意中发现有个 TLS 版本的选项（只有TLS 1.0 和 TLS1.2可选），瞬间拨云见雾 大概率是这个防火墙自带的客户端版本默认使用了 TLS 1.0，而这个TLS 1.0 刚好处在漏洞描述中的受影响版本内 一轮操作后，漏扫设备不再检测出这个漏洞 ICMP权限许可和访问控制问题漏洞(CVE-1999-0524) {% blockquote %}\n漏洞描述：\nICMP信息如netmask和timestamp允许任意主机访问.\n{% endblockquote %}\n分析处理：\n根据描述，此漏洞属于信息级别，不在低危漏洞及以上范围\n网络上已经有很多文章描述和处理这个漏洞\n按照这个时间看，1999 年 CVE 收录和确认的漏洞，为什么过了20年 ICMP 协议还不处理？亦或是无法处理？\n解决方法有两个\n配置一条安全策略阻断攻击者发送的 ICMP TYPE 13 CODE0 和 ICMP TYPE 17 CODE 0 的报文到达设备 配置高级 ACL 阻断攻击者发送的 ICMP TYPE 13 CODE0 和 ICMP TYPE 17 CODE 0 的报文到达设备 防火墙的本地IP地址有多个，使用 ACL 的话会繁琐，所以配置了安全策略\n交换机和路由器设备，可以使用配置高级 ACL 的方式进行规避\n# 配置高级 ACL acl advanced 3456 description FIX_FOR_CVE-1999-0524 rule 0 deny icmp icmp-type timestamp-request rule 5 deny icmp icmp-type 17 0 rule 10 permit ip # 接口过滤调用 interface Vlan-interface XXX packet-filter 3456 inbound hardware-count # ","date":"2022-11-13T16:27:57Z","permalink":"https://kiraster.github.io/posts/6d4cdc14.html/","title":"H3C防火墙（v7）CVE2015-0204/CVE1999-0524"},{"content":"在一个项目中，或者说在一个不使用 VRRP 组网并且没有进行负载分担的核心网络中，项目初始时并没有刻意的去规划 生成树 这个协议。以华三设备为例，交换机默认开启了 MSTP 协议，所以在建设时有意或者无意的导致交换机的环路并不会使整个网络因此瘫痪.\n关于生成树协议的工作原理，不在本文的要说明的范围内，可以自行Google或到各厂商官网查询，本文中用到的术语以华三厂商为例，可能与其他厂商叫法不一样，但是我想看这篇文的观众都知道，生成树协议不是私有协议（MSTP由IEEE制定的802.1s标准定义）。\n写这篇文是想探讨一下一个网络中使用默认的 MSTP 可能导致的一些问题和关于生成树的调整\n下面使用 HCL 搭建了一个经典的 核心/汇聚/接入 的三层网络，刻意构造的一个环路。\n分析网络中的生成树 在实际项目中，是很难确定最小的mac的交换机就是核心交换机，这样导致的结果就是生成树的根桥不一定就在核心交换机上，上图的实验拓扑中也刻意的把mac大的两台交换机放在了核心上\n通过命令查看，核心交换机 (CORE_SW1) 聚合组101 为 ROOT 根端口，根桥是 32768.186d-08c1-0100\n{% blockquote %}\n根端口 所谓根端口，是指非根桥设备上离根桥最近的端口。根端口负责与根桥进行通信。非根桥设备上有且只有一个根端口，根桥上没有根端口。\n{% endblockquote %}\n\u0026lt;CORE_SW1\u0026gt;dis stp brief MST ID Port Role STP State Protection 0 Bridge-Aggregation101 ROOT FORWARDING NONE 0 Bridge-Aggregation102 DESI FORWARDING NONE \u0026lt;CORE_SW1\u0026gt; \u0026lt;CORE_SW1\u0026gt;dis stp ro \u0026lt;CORE_SW1\u0026gt;dis stp root MST ID Root Bridge ID ExtPathCost IntPathCost Root Port 0 32768.186d-08c1-0100 58 0 BAGG101 \u0026lt;CORE_SW1\u0026gt; 为什么会出现这种情况\n首先根据 MST 域 的定义，结合 H3C 官网说明，判断出上图中每个交换机都是不同 MST 域，上面拓扑图中本质就由 6 个 MST 域组成，尽管它们域的配置除了域名不一样，其他参数都一样。剩下的就是 MST 域与 MST 域 的生成树关系。\n{% blockquote %}\nMST域 MST域（Multiple Spanning Tree Regions，多生成树域）是由交换网络中的多台设备以及它们之间的网段所构成。这些设备具有下列特点： · 都开启了生成树协议。 · 域名相同。 · VLAN与MSTI间映射关系的配置相同。 · MSTP修订级别的配置相同。 · 这些设备之间有物理链路连通\n{% endblockquote %}\n{% blockquote %}\nCIST CIST（Common and Internal Spanning Tree，公共和内部生成树）是一棵连接交换网络内所有设备的单生成树，所有MST域的IST再加上CST就共同构成了整个交换网络的一棵完整的单生成树，即CIST。\nCIST生成树的计算 通过比较BPDU后，在整个网络中选择一个优先级最高的设备作为CIST的根桥。在每个MST域内MSTP通过计算生成IST；同时MSTP将每个MST域作为单台设备对待，通过计算在域间生成CST。CST和IST构成了整个网络的CIST。\n{% endblockquote %}\n可能导致的问题 依照上面拓扑图搭建网络会出现什么问题\n查看 AGGE_SW1 生成树信息，发现汇聚交换机下联接入交换机的端口是 Alternate Port 角色，不转发业务流量。造成的具体表现就是从核心交换机方向的流量要回到 ACC_SW1 上的终端设备会绕道 ACC_SW2 再到 ACC_SW1 的终端。是不是很不合理\n\u0026lt;AGGE_SW1\u0026gt;dis stp brief MST ID Port Role STP State Protection 0 Bridge-Aggregation23 DESI FORWARDING NONE 0 GigabitEthernet1/0/1 ALTE DISCARDING NONE 0 GigabitEthernet1/0/2 ROOT FORWARDING NONE \u0026lt;AGGE_SW1\u0026gt; 解决之道 要扭转 说2 中这种不合理的流量路径，方法也很简单，保证核心交换机是根桥即可\n配置核心交换机为根桥\n[CORE_SW1]stp instance 0 root primary 最后 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 欢迎“来电”来函探讨。 ","date":"2022-11-04T13:28:31Z","permalink":"https://kiraster.github.io/posts/8eea84ef.html/","title":"关于组网中使用默认MSTP的问题"},{"content":"交流供电端至独立电源（交流电源线） 标准 通信机房用阻燃软结构电缆，标识（RVVZ（ZRVVR))\nRVVZ电缆是采用细丝合股多层复绞形式，具有良好的柔软性，弯曲性能高，同时具有高阻燃性能。 R——软 V——聚氯乙烯护套 V——聚氯乙烯绝缘 Z——阻燃 RVVZ电缆常见型号 RVZ\u0026ndash;铜芯阻燃聚氯乙烯绝缘软电缆　RVVZ\u0026ndash;铜芯阻燃聚氯乙烯绝缘和护套软电缆 RVVZ22\u0026ndash;铜芯阻燃聚氯乙烯绝缘和护套钢带铠装软电缆 RVFH\u0026ndash;铜芯阻燃聚氯乙烯绝缘防火软电缆 RVVFH\u0026ndash;铜芯阻燃聚氯乙烯绝缘和护套防火软电缆 RVVFH22\u0026ndash;铜芯阻燃聚氯乙烯绝缘和护套钢带铠装防火软电缆\n电压等级 RVVZ、RVVZ22、RVVFH、RVVFH22型号的电缆为0.6/1KV。\n适用范围 适用于电信、邮电、铁路、化工、消防、通信等通信机房配电系统的内部连接线，既适合于固定敷设也可做移动电缆使用，在特殊环境中尤为适用，本产品适用于通信机房、移动机站及高层建筑等电源的输、配电系统中**．交流额定电压**O.6／1kV及以下阻燃、耐火软电缆。\nRVV和RVVZ的区别\n1、RVV一般叫做软电线，RVVZ(ZR-VVR)一般叫软电缆。\n2、电压等级：RVV：300/500V， RVVZ：0.6/1KV\n3、使用场合\n​\tRVV：主要应用于电器、仪表和电子设备及自动化装置用电源线、控制线及信号传输线，具体可用于防盗报警系统、楼宇对讲系统等。\n​\tRVVZ：适用于交流额定电压为0.6/1KV及以下对柔软度要求非常高的的输配电线路上。\n选用建议 选用 3 芯 RVVZ 标准的线缆用于供电插座至 H3C DG-30-S24II 电源的交流供电。 线缆标识： $$ RVVZ--O.6／1kV --3* 1.0 m{m}^2 $$ 独立电源至工业交换机接入端（直流电源线） 标准 根据官网资料查询，直流电源线的要求:\n铜制线缆\n线径：0.5mm^2 或 20AWG\u0026ndash;3mm^2 或 12 AWG\n美国线规（英文是American wire gauge，缩写为AWG），是一种区分导线直径的标准，又被称为 Brown \u0026amp; Sharpe线规。这种标准化线规系统于1857年起在美国开始使用。导线的直径与导线承载电流的能力有很大关系。线规数字越小，表示线材直径越粗，所能承载的电流就越大；反之，线规数字越大，表示线材直径越细，所能承载的电流就越小。 AWG表适用于单根、实心、圆形的导线。 选用建议(CWG 标准选购) 线芯：最小截面积为0.5mm^2， 最大截面积 3mm^2 的范围内选购线缆\n线芯数： 2芯\n套线： RVV软护套线\n线缆标识 $$ RVV - 2* 1.0 m{m}^2 $$","date":"2022-07-30T22:53:41Z","permalink":"https://kiraster.github.io/posts/cadda170.html/","title":"工业交换机电源线缆选择"},{"content":"最近发现我这个小破博客网站访问贼慢 ，FancyBox下的图片打开不是显示相册的模式而是跳转到图床网站显示，起初以为是网络不稳定，平时也不怎么关注，今天才注意到是cdn资源访问异常。\n{% colorquote info %} Thank you all for your tests, feedback and support. I am personally sorry for the issues we had today.\nWe can consider the issue as resolved, now its a question of DNS propagation getting to everyone.\nOur official announcement regarding the problems today:\nUnfortunately today jsDelivr unexpectedly lost its ICP license in China. As effect the regional CDN disabled our account.\nThis resulted in the extended outage we had in mainland China and Taiwan.\nOther regions were unaffected.\nWe understand how difficult it was for our users to experience this unique situation.\nFrom now on all Chinese traffic will be served by \u0026ldquo;near China\u0026rdquo; locations provided by global CDN providers.\nThis will have the additional benefit of better failover logic in the future. {% endcolorquote %}\n以上大概意思是 jsDelivr ICP 证书在中国大陆失效，无法访问jsDelivr资源。\n再看看github上的说法，GFW 巴拉巴拉……\n通过搜索引擎发现，当然还是有解决方法能处理这种情况。\n心情好了再弄吧，心累。\n……\n","date":"2022-06-08T15:07:03Z","permalink":"https://kiraster.github.io/posts/ded21811.html/","title":"CDN_error"},{"content":" 针对上一版的脚本进行改进 增加嵌套一层 ‘ Try……finally: ’ ，代码执行末尾提示 “按任意键退出” 修改代码中预定义的登陆账号密码为 input 和 getpass 手动输入 修改文件当前目录为代码自动获取 os.getcwd() 修改执行完成后显示 “A log file is available in……” 记录log路径 想改多线程，threading 模块逻辑没搞清楚 两个脚本 01 # File： py_net.py # Time： 2022/05/13 12:20:35 # Author： Kir # Ver： 2.0 # Description： AutoOutput/SSH/Log import time from netmiko import ConnectHandler, NetMikoAuthenticationException, NetMikoTimeoutException import os import re import msvcrt import getpass try: # 校验账户交给netmiko模块，仅输入 login_user = input(\u0026#39;Login:\u0026#39;) login_pwd = getpass.getpass(\u0026#39;Passwd:\u0026#39;) # 时间格式蒸鹅心，冒号不能用做文件名字符 time_str1 = time.strftime(\u0026#39;%Y%m%d\u0026#39;, time.localtime()) time_str2 = time.strftime(\u0026#39;%H%M%S\u0026#39;, time.localtime()) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) # 获取当前工作目录 path = os.getcwd() title = \u0026#34;%s\u0026#34; % time_str1 # mkdir path \u0026amp; touch file new_path = os.path.join(path, title) config_path = \u0026#34;%s\\\\configuration_backup\u0026#34; % new_path if not os.path.isdir(new_path): os.makedirs(new_path) if not os.path.isdir(config_path): os.makedirs(config_path) # 创建日志文件，记录运行结果 log_fo = open( \u0026#39;%s\\\\%s.log\u0026#39; % (config_path, time_str1), \u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, ) log_fo.write(\u0026#39;\\n\u0026#39; + \u0026#34;==========START TIME \u0026#34; + time_str3 + \u0026#34;=========\u0026#34; + \u0026#39;\\n\u0026#39;) # 读取 ip_list.txt 里的 ip 地址 ip_list = open(\u0026#39;ip_list.txt\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;ascii\u0026#39;) ip_addr = ip_list.readlines() ip_list.close() # display 命令 cmd_list = open(\u0026#39;cmd_list.txt\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;ascii\u0026#39;) cmd_line = cmd_list.readlines() cmd_list.close() # 遍历 ip_addr 列表里面的 ip 进行连接 for ip in iter(ip_addr): try: S5130 = { \u0026#39;device_type\u0026#39;: \u0026#39;hp_comware\u0026#39;, \u0026#39;ip\u0026#39;: ip, \u0026#39;username\u0026#39;: login_user, \u0026#39;password\u0026#39;: login_pwd, } net_connect = ConnectHandler(**S5130) # 禁用输出屏幕分屏 screen_d = net_connect.send_command(\u0026#39;screen-length disable\u0026#39;) # current_time as part of filename time_str2 = time.strftime(\u0026#39;%H%M%S\u0026#39;, time.localtime()) # sysname as part of fielname sysn = net_connect.send_command(\u0026#39;dis cur | inc sysname\u0026#39;) # split 空格分割回显内容 sysn = re.split(r\u0026#39;[ ]+\u0026#39;, sysn) sysn = sysn[2] # 创建文件, 格式为 sysname + time_str2 config_fo = open(\u0026#39;%s\\\\%s_%s_config.txt\u0026#39; % (config_path, sysn, time_str2), \u0026#39;a\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) print(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; Successfully connected to \u0026#39; + ip) log_fo.write(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; Successfully connected to \u0026#39; + ip) for cmd in iter(cmd_line): # 发送 cmd cmd_result = net_connect.send_command(cmd) print(cmd) print(cmd_result) print( \u0026#39;===================================================================\u0026#39; ) config_fo.write( \u0026#39;\\n\u0026#39; + \u0026#39;===================================================================\u0026#39; + \u0026#39;\\n\u0026#39; + cmd + \u0026#39;\\n\u0026#39; + cmd_result) net_connect.disconnect() config_fo.close() except (EOFError, NetMikoTimeoutException): print(\u0026#39;Can not connect to Device \u0026#39; + ip) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) log_fo.write(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; Can not connect to Device \u0026#39; + ip) except (EOFError, NetMikoAuthenticationException): print(\u0026#39;username/password wrong! \u0026#39; + ip) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) log_fo.write(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; username/password wrong! \u0026#39; + ip) time_str4 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) log_fo.write(\u0026#39;\\n\u0026#39; + \u0026#34;==========END TIME \u0026#34; + time_str4 + \u0026#34;==========\u0026#34; + \u0026#39;\\n\u0026#39;) log_fo.close() print(\u0026#39;\\n\u0026#39;) print(\u0026#39;A log file is available in \u0026#39; + \u0026#39;\\\u0026#34;\u0026#39; + config_path + \u0026#39;\\\\\u0026#39; + time_str1 + \u0026#39;.log\u0026#39; + \u0026#39;\\\u0026#34;\u0026#39;) print(\u0026#39;\\n\u0026#39;) finally: print(\u0026#39;Press any key to quit program.\u0026#39;) ord(msvcrt.getch()) 02 # File： py_net_config.py # Time： 2022/05/13 12:19:59 # Author： Kir # Ver： 2.0 # Description：AutoConfig/SSH/Log import time from netmiko import ConnectHandler, NetMikoAuthenticationException, NetMikoTimeoutException import os import re import msvcrt import getpass try: # 校验账户交给netmiko模块，仅输入 login_user = input(\u0026#39;Login:\u0026#39;) login_pwd = getpass.getpass(\u0026#39;Passwd:\u0026#39;) # 时间格式蒸鹅心，冒号不能用做文件名字符 time_str1 = time.strftime(\u0026#39;%Y%m%d\u0026#39;, time.localtime()) time_str2 = time.strftime(\u0026#39;%H%M%S\u0026#39;, time.localtime()) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) # 获取当前工作目录 path = os.getcwd() title = \u0026#34;%s\u0026#34; % time_str1 # mkdir path \u0026amp; touch file new_path = os.path.join(path, title) config_path = \u0026#34;%s\\\\configure_device\u0026#34; % new_path if not os.path.isdir(new_path): os.makedirs(new_path) if not os.path.isdir(config_path): os.makedirs(config_path) # 创建日志文件，记录运行结果 log_fo = open( \u0026#39;%s\\\\%s.log\u0026#39; % (config_path, time_str1), \u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, ) log_fo.write(\u0026#39;\\n\u0026#39; + \u0026#34;==========START TIME \u0026#34; + time_str3 + \u0026#34;=========\u0026#34; + \u0026#39;\\n\u0026#39;) # 读取 ip_list.txt 里的 ip 地址 ip_list = open(\u0026#39;ip_list.txt\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;ascii\u0026#39;) ip_addr = ip_list.readlines() ip_list.close() # 读取 cmd_config_list.txt 文件的配置命令 cmd_config_list = open(\u0026#39;cmd_config_list.txt\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;ascii\u0026#39;) cmd_line = cmd_config_list.readlines() print(\u0026#39;AddCommand-line: \u0026#39; + str(cmd_line)) cmd_config_list.close() # 遍历 ip_addr 列表里面的 ip 进行连接 for ip in iter(ip_addr): try: S5130 = { \u0026#39;device_type\u0026#39;: \u0026#39;hp_comware\u0026#39;, \u0026#39;ip\u0026#39;: ip, \u0026#39;username\u0026#39;: login_user, \u0026#39;password\u0026#39;: login_pwd, } net_connect = ConnectHandler(**S5130) # 禁用输出屏幕分屏 screen_d = net_connect.send_command(\u0026#39;screen-length disable\u0026#39;) # current_time as part of filename time_str2 = time.strftime(\u0026#39;%H%M%S\u0026#39;, time.localtime()) # sysname as part of fielname sysn = net_connect.send_command(\u0026#39;dis cur | inc sysname\u0026#39;) # split 空格分割回显内容 sysn = re.split(r\u0026#39;[ ]+\u0026#39;, sysn) sysn = sysn[2] # 创建文件, 格式为 sysname + time_str2 config_fo = open(\u0026#39;%s\\\\%s_%s_add_config.txt\u0026#39; % (config_path, sysn, time_str2), \u0026#39;a\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) print(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; Successfully connected to \u0026#39; + ip + \u0026#39; Configuring...\u0026#39;) log_fo.write(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; Configuration complete: \u0026#39; + \u0026#39; Successfully connected to \u0026#39; + ip) # 发送 cmd_line cmd_result = net_connect.send_config_set(cmd_line) print(cmd_result) print( \u0026#39;===================================================================\u0026#39; ) config_fo.write( \u0026#39;\\n\u0026#39; + \u0026#39;===================================================================\u0026#39; + \u0026#39;\\n\u0026#39; + cmd_result) net_connect.disconnect() config_fo.close() except (EOFError, NetMikoTimeoutException): print(\u0026#39;Can not connect to Device \u0026#39; + ip) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) log_fo.write(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; Configuration Fail: \u0026#39; + \u0026#39; Can not connect to Device! \u0026#39; + ip) except (EOFError, NetMikoAuthenticationException): print(\u0026#39;username/password wrong! \u0026#39; + ip) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) log_fo.write(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; Configuration Fail: \u0026#39; + \u0026#39; username/password wrong! \u0026#39; + ip) time_str4 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) log_fo.write(\u0026#39;\\n\u0026#39; + \u0026#34;==========END TIME \u0026#34; + time_str4 + \u0026#34;==========\u0026#34; + \u0026#39;\\n\u0026#39;) log_fo.close() print(\u0026#39;\\n\u0026#39;) print(\u0026#39;A log file is available in \u0026#39; + \u0026#39;\\\u0026#34;\u0026#39; + config_path + \u0026#39;\\\\\u0026#39; + time_str1 + \u0026#39;.log\u0026#39; + \u0026#39;\\\u0026#34;\u0026#39;) print(\u0026#39;\\n\u0026#39;) finally: print(\u0026#39;Press any key to quit program.\u0026#39;) ord(msvcrt.getch()) 参考资料: - Python-交换机自动化巡检脚本笔记 by 02EVA on 2021-04-22 : https://blog.csdn.net/weixin_42065669/article/details/116009445 -「Python 网络自动化」Netmiko ——Netmiko 常用方法 by 某呆啊 on 2021-02-04 : https://blog.csdn.net/q965844841qq/article/details/113619281 - Python 逐行读取txt 文件并生成列表 by 诺亚方包 on 2020-05-19 : https://blog.csdn.net/weixin_40973138/article/details/106209020 - Python 使用 Netmiko 连接 H3C 网络设备 by 某呆 on 2021-02-03 : https://555.xdai.vip/posts/26e9de3c.html - H3C交换机python命令下发脚本 by xuwenfang1989 on 2018-08-27 : https://blog.51cto.com/u_1339643/2164819 - Python实现“按任意键返回”和无回显输入 by dongfuguo on 2020-03-25 : https://blog.csdn.net/dongfuguo/article/details/105103446 - Python3文件路径/目录获取教程 by 诸子流 on 2020-07-09 : `https://www.cnblogs.com/lsdb/p/13265688.html - 如何让python不打印转义字符串？by 流芳 on 2020-07-07 : https://www.py.cn/jishu/jichu/19480.html ","date":"2022-05-13T13:59:08Z","permalink":"https://kiraster.github.io/posts/2699eb47.html/","title":"H3C_Python_SSH_Config_Auto_2"},{"content":" Python 脚本 SSH 登陆华三设备，使用定义好的 display 脚本批量导出配置和一些设备状态 Python 脚本 SSH 登陆华三设备，使用定义好的配置命令批量增加配置 主要使用的是 netmiko 这个模块里的 ConnectHandler 命令 单线程 脚本运行完成后输出 成功和失败的记录log ip_list.txt，cmd_list.txt，cmd_config_list.txt 格式简单，修改方便 未做多账号密码的 if 语句判断 肯定有冗余繁重的代码 脚本文件 py01.py import time from netmiko import ConnectHandler, NetMikoAuthenticationException, NetMikoTimeoutException import os import re time_str1 = time.strftime(\u0026#39;%Y_%m_%d\u0026#39;, time.localtime()) time_str2 = time.strftime(\u0026#39;%H%M%S\u0026#39;, time.localtime()) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) path = \u0026#34;F:\\\\XXXXX\\\\py_net\u0026#34; title = \u0026#34;%s\u0026#34; % time_str1 # mkdir path \u0026amp; touch file new_path = os.path.join(path, title) config_path = \u0026#34;%s\\\\configuration_backup\u0026#34; % new_path if not os.path.isdir(new_path): os.makedirs(new_path) if not os.path.isdir(config_path): os.makedirs(config_path) # 创建日志文件，记录运行结果 log_fo = open(\u0026#39;%s\\\\%s.log\u0026#39; % (config_path, time_str1), \u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) log_fo.write(\u0026#39;\\n\u0026#39; + \u0026#34;==========START TIME \u0026#34; + time_str3 + \u0026#34;=========\u0026#34; + \u0026#39;\\n\u0026#39;) # 读取 ip_list.txt 里的 ip 地址 ip_list = open(\u0026#39;ip_list.txt\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;ascii\u0026#39;) ip_addr = ip_list.readlines() ip_list.close() # display 命令 cmd_list = open(\u0026#39;cmd_list.txt\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;ascii\u0026#39;) cmd_line = cmd_list.readlines() cmd_list.close() # 遍历 ip_addr 列表里面的 ip 进行连接 for ip in iter(ip_addr): try: S5130 = { \u0026#39;device_type\u0026#39;: \u0026#39;hp_comware\u0026#39;, \u0026#39;ip\u0026#39;: ip, \u0026#39;username\u0026#39;: \u0026#39;admin\u0026#39;, \u0026#39;password\u0026#39;: \u0026#39;xxxxxxxxxx\u0026#39;, } net_connect = ConnectHandler(**S5130) # 禁用输出屏幕分屏 screen_d = net_connect.send_command(\u0026#39;screen-length disable\u0026#39;) # current_time as part of filename time_str2 = time.strftime(\u0026#39;%H%M%S\u0026#39;, time.localtime()) # sysname as part of fielname sysn = net_connect.send_command(\u0026#39;dis cur | inc sysname\u0026#39;) # split 空格分割回显内容 sysn = re.split(r\u0026#39;[ ]+\u0026#39;, sysn) sysn = sysn[2] # 创建文件, 格式为 sysname + time_str2 config_fo = open(\u0026#39;%s\\\\%s_%s_config.txt\u0026#39; % (config_path, sysn, time_str2), \u0026#39;a\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) print(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; Successfully connected to \u0026#39; + ip) log_fo.write(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; Successfully connected to \u0026#39; + ip) for cmd in iter(cmd_line): cmd_result = net_connect.send_command(cmd) print(cmd) print(cmd_result) print(\u0026#39;===================================================================\u0026#39;) config_fo.write(\u0026#39;\\n\u0026#39; + \u0026#39;===================================================================\u0026#39; + \u0026#39;\\n\u0026#39; + cmd + \u0026#39;\\n\u0026#39; + cmd_result) net_connect.disconnect() config_fo.close() except (EOFError, NetMikoTimeoutException): print(\u0026#39;Can not connect to Device \u0026#39; + ip) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) log_fo.write(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; Can not connect to Device \u0026#39; + ip) except (EOFError, NetMikoAuthenticationException): print(\u0026#39;username/password wrong! \u0026#39; + ip) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) log_fo.write(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; username/password wrong! \u0026#39; + ip) time_str4 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) log_fo.write(\u0026#39;\\n\u0026#39; + \u0026#34;==========END TIME \u0026#34; + time_str4 + \u0026#34;==========\u0026#34; + \u0026#39;\\n\u0026#39;) log_fo.close() print(log_fo) py02.py import time from netmiko import ConnectHandler, NetMikoAuthenticationException, NetMikoTimeoutException import os import re time_str1 = time.strftime(\u0026#39;%Y_%m_%d\u0026#39;, time.localtime()) time_str2 = time.strftime(\u0026#39;%H%M%S\u0026#39;, time.localtime()) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) path = \u0026#34;F:\\\\XXXXX\\\\py_net\u0026#34; title = \u0026#34;%s\u0026#34; % time_str1 # mkdir file \u0026amp; touch file new_path = os.path.join(path, title) config_path = \u0026#34;%s\\\\configure_device\u0026#34; % new_path if not os.path.isdir(new_path): os.makedirs(new_path) if not os.path.isdir(config_path): os.makedirs(config_path) # 创建日志文件，记录运行结果 log_fo = open(\u0026#39;%s\\\\%s.log\u0026#39; % (config_path, time_str1), \u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) log_fo.write(\u0026#39;\\n\u0026#39; + \u0026#34;==========START TIME \u0026#34; + time_str3 + \u0026#34;=========\u0026#34; + \u0026#39;\\n\u0026#39;) # 读取 ip_list.txt 里的 ip 地址 ip_list = open(\u0026#39;ip_list.txt\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;ascii\u0026#39;) ip_addr = ip_list.readlines() ip_list.close() # 读取 cmd_config_list.txt 文件的配置命令 cmd_config_list = open(\u0026#39;cmd_config_list.txt\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;ascii\u0026#39;) cmd_line = cmd_config_list.readlines() print(cmd_line) cmd_config_list.close() # 遍历 ip_addr 列表里面的 ip 进行连接 for ip in iter(ip_addr): try: S5130 = { \u0026#39;device_type\u0026#39;: \u0026#39;hp_comware\u0026#39;, \u0026#39;ip\u0026#39;: ip, \u0026#39;username\u0026#39;: \u0026#39;admin\u0026#39;, \u0026#39;password\u0026#39;: \u0026#39;xxxxxxxxxx\u0026#39;, } net_connect = ConnectHandler(**S5130) # 禁用输出屏幕分屏 screen_d = net_connect.send_command(\u0026#39;screen-length disable\u0026#39;) # current_time as part of filename time_str2 = time.strftime(\u0026#39;%H%M%S\u0026#39;, time.localtime()) # sysname as part of fielname sysn = net_connect.send_command(\u0026#39;dis cur | inc sysname\u0026#39;) # split 空格分割回显内容 sysn = re.split(r\u0026#34;[ ]+\u0026#34;, sysn) sysn = sysn[2] # 创建文件, 格式为 sysname + time_str2 config_fo = open(\u0026#39;%s\\\\%s_%s_add_config.txt\u0026#39; % (config_path, sysn, time_str2), \u0026#39;a\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) print(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; Successfully connected to \u0026#39; + ip + \u0026#39; Configuring...\u0026#39;) log_fo.write(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; Configuration complete: \u0026#39; + \u0026#39; Successfully connected to \u0026#39; + ip) cmd_result = net_connect.send_config_set(cmd_line) print(cmd_result) print(\u0026#39;===================================================================\u0026#39;) config_fo.write(\u0026#39;\\n\u0026#39; + \u0026#39;===================================================================\u0026#39; + \u0026#39;\\n\u0026#39; + cmd_result) net_connect.disconnect() config_fo.close() except (EOFError, NetMikoTimeoutException): print(\u0026#39;Can not connect to Device \u0026#39; + ip) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) log_fo.write(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; Configuration Fail: \u0026#39; + \u0026#39; Can not connect to Device! \u0026#39; + ip) except (EOFError, NetMikoAuthenticationException): print(\u0026#39;username/password wrong! \u0026#39; + ip) time_str3 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) log_fo.write(time_str1 + \u0026#34;_\u0026#34; + time_str3 + \u0026#39; Configuration Fail: \u0026#39; + \u0026#39; username/password wrong! \u0026#39; + ip) time_str4 = time.strftime(\u0026#39;%H:%M:%S\u0026#39;, time.localtime()) log_fo.write(\u0026#39;\\n\u0026#39; + \u0026#34;==========END TIME \u0026#34; + time_str4 + \u0026#34;==========\u0026#34; + \u0026#39;\\n\u0026#39;) log_fo.close() print(log_fo) 运行环境 Python3，理论上 Python3 版本都可运行，没看到新版本更新日志说哪里有变动 在 win7 系统 3.8.10 版本运行测试无问题 在 win10 系统 3.9.7 版本运行测试无问题 在 win10 系统 3.10.4 版本运行测试无问题 安装 netmiko 测试连接 HCL_Setup_V3.0.1 模拟器设备无问题 测试连接真实 H3C 设备，无问题 运行速度取决与设备的连接反应和脚本行数 三个文件 ip_list.txt （faker）\n10.1.1.1 10.1.1.2 10.1.1.3 10.1.1.4 10.1.1.5 cmd_list.txt （faker）\ndisplay cur display ip interface brief display interface brief des display vlan display vlan brief display ip routing-table display version display cpu-usage display memory display power display fan display device manuinfo display device verbose display environment dir display irf display irf configuration display irf link display irf topology display link-aggregation summary display link-aggregation member-port display link-aggregation verbose display current-configuration configuration system display boot-loader save force # cmd_config_list.txt （faker）\nvlan 22 des MMT22 dis th int vlan 22 des MMT22 ip add 192.168.22.22 24 dis th 运行过程 py01.py 运行结束后会在 本 py01.py 文件所在的目录创建一个名为 20xx_xx_xx （运行此脚本当日年月日）的文件夹\npy02.py 运行结束后会在 本 py02.py 文件所在的目录创建一个名为 20xx_xx_xx（运行此脚本当日年月日） 的文件夹\n以上创建的文件夹，脚本会判断是否存在，如存在则跳过；不存在则创建\n假设已经各运行完成一次以上两个脚本，则名为 20xx_xx_xx 的文件夹下会创建 “configuration_backup” 和 “configure_device”两个文件夹\nconfiguration_backup 保存导出的配置和一些设备状态信息\nconfigure_device 保存批量增加配置的记录过程\n“configuration_backup” 和 “configure_device”两个文件夹下，会生成文件名称为 “ 20xx_xx_xx.log”（当天日期）的文件，用来记录执行成功和执行失败的log\n“configuration_backup” 和 “configure_device”两个文件夹下，有文件名称为 “sysname + time_str2_config.txt” （设备名+创建时间）的 TXT 文件，或 “sysname + time_str2_add_config.txt” （设备名+创建时间）的 TXT 文件\n参考资料: - Python-交换机自动化巡检脚本笔记 by 02EVA on 2021-04-22 : https://blog.csdn.net/weixin_42065669/article/details/116009445 -「Python 网络自动化」Netmiko ——Netmiko 常用方法 by 某呆啊 on 2021-02-04 : https://blog.csdn.net/q965844841qq/article/details/113619281 - Python 逐行读取txt 文件并生成列表 by 诺亚方包 on 2020-05-19 : https://blog.csdn.net/weixin_40973138/article/details/106209020 - Python 使用 Netmiko 连接 H3C 网络设备 by 某呆 on 2021-02-03 : https://555.xdai.vip/posts/26e9de3c.html - H3C交换机python命令下发脚本 by xuwenfang1989 on 2018-08-27 : https://blog.51cto.com/u_1339643/2164819 ","date":"2022-05-11T17:50:10Z","permalink":"https://kiraster.github.io/posts/54cb8229.html/","title":"H3C_Python_SSH_Config_Auto"},{"content":" 实验目的 验证 H3C 防火墙 IRF 堆叠和主备模式 基于项目中部分核心网络的模拟器测试 线路交叉互联的问题 实验描述 IP 地址规划和端口互联 互联设备 核心防火墙\u0026lt;\u0026ndash;\u0026gt;核心交换机 10.1.1.0/30 核心防火墙\u0026lt;\u0026ndash;\u0026gt;服务器汇聚 10.1.1.4/30 核心防火墙\u0026lt;\u0026ndash;\u0026gt;外联交换机 VLAN10:192.168.10.254 A端设备 端口 B端设备 端口 FW1 GE0/23 FW2 GE0/23 FW1 GE0/1 SW5 GE0/1 FW1 GE0/2 SW6 GE0/2 FW1 GE0/3 SW3 GE0/3 FW1 GE0/4 SW4 GE0/4 FW1 GE0/11 SW7 GE0/1 FW2 GE0/1 SW6 GE0/1 FW2 GE0/2 SW5 GE0/2 FW2 GE0/3 SW4 GE0/3 FW2 GE0/4 SW3 GE0/4 FW2 GE0/11 SW7 GE0/2 防火墙安全域划分 核心交换机：Trust\n服务器汇聚：Server\n外联交换机：Untrust\n配置思路 FW1 与 FW2 之间 IRF 堆叠；SW3 与 SW4 之间 IRF 堆叠；SW5 与 SW6 之间 IRF 堆叠； 设备互联的端口聚合配置，配置系统优先级和端口优先级，使流量优先流经“主”用设备 配置互联地址，确保逻辑直连的互通 配置防火墙安全域和安全策略 配置 PC IP地址确保与网关的连通性 配置静态路由确保网络互通 进行倒换倒回观察网络连通性 模拟线路故障观察网络连通性 配置文件 见文末 聊点什么 就线路交叉互联问题，与老友交谈，据他说这种互联方式可能导致丢包现象，例如，流量分别从SW3的G0/3接口和SW4的G0/4接口进入FW1，G0/4的流量会被认为非法流量而丢弃，盲猜是因为会话状态机模式设为严格模式，而运行中出现了来回路径不一致的问题导致丢包。\n就这个交叉互联问题与华三400聊了近半小时，对方给出的方案是按完美的主备处理方式进行组网，（在网络正常的情况下）即流量永远只走一边，只要防火墙上有一个端口出现故障，冗余组全部切换到备。\n主备模式下，设置冗余组，主成员下的端口有任一出现问题，就会整体切换到备，而备设备如在整体切换就有部分端口故障，此时主成员设备的UP状态的端口会在 DOWN 和 DOWN(redundancy down) 之间反复恒跳，而Status出现两个 Secondary，Slot1 的Track优先级也会随着端口的两个 DOWN 状态不同而变化。注意，此时网络并没有中断。\nRedundancy group 11 (ID 1): Node ID Slot Priority Status Track weight 1 Slot1 1 Secondary -1020 2 Slot2 1 Secondary -255 要严格控制流量走一边的情况，就需要接入层网上的设备互联都使用双线互联。而万一“主”设备上联到上一层“主”设备的线路故障了，那么恭喜你可能网络瘫痪了，举个例子，拓扑中SW3与SW11的G0/1接口down，因为SW11上联的两根线路做了聚合，SW11上联的流量会通过G0/2向上走，相当于在核心交换机的SW4上接了一台 PC ，你觉得流量再往上层该怎么走？走到FW2备成员？而FW2是备用状态不处理流量。写到这我才想起来原来华三400建议做两个聚合组是有道理的，SW4 G0/4和G0/3做一个聚合组，就可以人为限制流量又走到FW1，秒啊。\n继续上一条，不使用两组聚合的方式，关闭IRF的本地优先转发，核心交换机上就出现跨框流量，即进入SW4的流量要往上走，要绕道SW3上去，这明显不合理了。\n继续上一条，假如使用核心交换机上联防火墙4根线做一个三层聚合组，FW1往下回流量的时候，由于负载分担的方式，又有可能把流量回给SW4。综合一下，在聚合组配置selected-port maximum 1 同时配置lacp的端口优先级呢，是不是觉得这个方法又蠢又无奈又有用。\n对于要把外联区（SW7）的网关设置在防火墙上的问题，还有一种方式是用 RETH 接口，但是我模拟器配置了，且SW7 查看arp都能看到网关的条目了，就是不通，希望是模拟器bug了，有机会去真机上测试一下再回来聊聊。\n不知道是不是我的错觉，用HCL模拟器做这种冗余类实验，老是出现一些不能理解的问题，这边十万八千里shutdown个端口，那边会受影响那种。\nEnding 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 配置存阿里云盘了，这是链接：[分享的文件 ] 欢迎“来电”来函探讨。 ","date":"2022-05-03T01:09:15Z","permalink":"https://kiraster.github.io/posts/a89a05d3.html/","title":"HCL_FW_IRF_LAB"},{"content":"最近看了很多关于 IPv6 的内容。老早前，大概2000年前后运营商就开始研究推进发展 IPv6 网络技术了，可能是是由于某些我等不知道的原因，这个推进的进程所演化出的表象让我等普通网民没什么感觉。部分科研机构、高校、金融、IT 大厂已经在使用了，一个比较大的使用群体也就是家用部分普及的不大开（我猜的，没有依据）。\nIPv6 相对于 IPv4 有种种的优势，我最有印象的几个是没有广播这个概念、“真 万物互联”、良好的包扩展结构，相对于 IPv4 不存在把什么什么封装进 IPv4 头部后面的字节……巴拉巴拉\n既然是实验，先上图：\nStart 介绍一下这个拓扑包含的内容：\nA head 部分\n从运营商处申请到 240E:0:0:1500::/60 前缀，互联地址为静态 IPv6 ：240E:0:0:15:: PC 网关在 SW19 / SW20，配置负载分担 （HSRP）；使用 MST ；PC 地址为无状态获取，同时获取除地址外的其他 DHCP 参数 核心交换机与 R5 运行 OSPFv3, A head 和 A branch1 / A branch2 组建基于 IPv6 的 DMVPN (mGRE) A branch1 部分\n从运营商处申请到 2409:0:0:2600::/60 前缀，互联地址为静态 IPv6 2409:0:0:26:: A branch2 / B head 部分\n使用 PPPOE 拨号接入 ISP ，WAN 动态 IPv6 地址，并且获取到 PD 用于内部网络 其他站点如图所示\nR3 为 ISP IPv4 接入路由器，连接 R3 的三个站点除配置了 Tunnel 外，还支持 NAT 访问互联网 为什么是就配置了这三个站点的 NAT，因为本人电脑内存不够（运行 NAT 的路由器要分配更多内存） 6RD 的站点内部为 IPv6 网络 IPv6 Over IPv4 的 站点互通配置了静态或者动态路由协议 为了测试，ISP 网络中均配置了环回接口的 IPv4/IPv6 地址，例如：\nR2\ninterface Loopback0 ip address 10.2.2.2 255.255.255.255 ipv6 address 2008::2/128\n除 Manual 和 GRE Tunnel 外，站点所有 IPv6 地址均可互通\nDesign \u0026amp; Configuration Note：ISP Network 内部运行 OSPF/OSPFv3，不展开说明。\nA head 配置 ! -- R5 ! interface Loopback0 ip address 10.5.5.5 255.255.255.255 ipv6 address FD00::5/128 // 惟一本地地址，不可在互联上路由 ipv6 enable ipv6 ospf 100 area 0 ! interface Ethernet0/0 ipv6 address 240E:0:0:15::5/64 // 与 ISP 互联地址 ipv6 enable ! interface Ethernet0/1 ipv6 enable ipv6 ospf 100 area 0 ipv6 ospf network point-to-point ! interface Ethernet0/2 ipv6 enable ipv6 ospf 100 area 0 ipv6 ospf network point-to-point ! ipv6 router ospf 100 router-id 10.5.5.5 default-information originate // OSPFv3 下发默认路由 ! ipv6 route ::/0 240E:0:0:15::1 // 指向 ISP 的默认路由 ! -- DMVPN interface Tunnel1 description DMVPN_HUB no ip address ipv6 address FD00:A::1/64 ipv6 eigrp 90 ipv6 nhrp network-id 100 tunnel source Ethernet0/0 tunnel mode gre multipoint ipv6 ! ipv6 router eigrp 90 // HUB 与 SPOKE 之间运行 EIGRP,IPv6 multicast over mGRE tunnel is not supported. neighbor FE80::A8BB:CCFF:FE00:600 Tunnel1 // 手动指邻居 neighbor FE80::A8BB:CCFF:FE00:700 Tunnel1 // 手动指邻居 eigrp router-id 10.5.5.5 redistribute ospf 100 metric 10000 100 255 1 1500 // 重分布 OSPF 进 EIGRP 便于分支站点访问总部网络 ! ! -- SW19 ! ipv6 dhcp pool O-POOL // DHCP 参数 dns-server 2008::1 dns-server 2008::2 domain-name a.com ! spanning-tree mode mst // mst 配置 spanning-tree mst configuration name a.com.hub revision 2 instance 10 vlan 10 instance 20 vlan 20 ! spanning-tree mst 10 priority 24576 // 实例 10 的主根桥 spanning-tree mst 20 priority 28672 // 实例 20 的备根桥 ! interface Loopback0 ip address 10.19.19.19 255.255.255.255 ipv6 address FD00::19/128 ipv6 ospf 100 area 0 ! interface Port-channel1 // SW19 SW20 之间的端口聚合 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk ! interface Ethernet0/0 switchport access vlan 519 // 与 R5 互联端口 ! interface Ethernet0/1 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk ! interface Ethernet0/2 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk channel-group 1 mode active ! interface Ethernet0/3 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk channel-group 1 mode active ! interface Vlan10 no ip address standby version 2 // HSRP 配置 standby 10 ipv6 autoconfig standby 10 priority 120 // 优先级120，设置为 Active 端 standby 10 preempt delay minimum 30 // 抢占延迟 30s ipv6 address 240E:0:0:1501::1/64 ipv6 enable ipv6 nd other-config-flag // O 位 ipv6 dhcp server O-POOL // 分配给终端 DHCP 其他参数 ipv6 ospf 100 area 0 ipv6 ospf network point-to-point ! interface Vlan20 no ip address standby version 2 standby 20 ipv6 autoconfig standby 20 preempt delay minimum 30 ipv6 address 240E:0:0:1502::1/64 ipv6 enable ipv6 nd other-config-flag ipv6 dhcp server O-POOL ipv6 ospf 100 area 0 ipv6 ospf network point-to-point ! interface Vlan519 // 与 R5 互联建立 OSPFV4 邻居 no ip address ipv6 enable ipv6 ospf 100 area 0 ipv6 ospf network point-to-point ! ipv6 router ospf 100 router-id 10.19.19.19 ! ! -- SW20 ! ipv6 dhcp pool O-POOL dns-server 2008::1 dns-server 2008::2 domain-name a.com ! spanning-tree mode mst spanning-tree extend system-id ! spanning-tree mst configuration name a.com.hub revision 2 instance 10 vlan 10 instance 20 vlan 20 ! spanning-tree mst 10 priority 28672 spanning-tree mst 20 priority 24576 ! interface Loopback0 ip address 10.20.20.20 255.255.255.255 ipv6 address FD00::20/128 ipv6 ospf 100 area 0 ! interface Port-channel1 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk ! interface Ethernet0/0 switchport access vlan 520 ! interface Ethernet0/2 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk channel-group 1 mode passive ! interface Ethernet0/3 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk channel-group 1 mode passive ! interface Vlan10 no ip address standby version 2 standby 10 ipv6 autoconfig standby 10 preempt delay minimum 30 ipv6 address 240E:0:0:1501::2/64 ipv6 enable ipv6 nd other-config-flag ipv6 dhcp server O-POOL ipv6 ospf 100 area 0 ipv6 ospf network point-to-point ! interface Vlan20 no ip address standby version 2 // HSRP 配置 standby 20 ipv6 autoconfig standby 20 priority 120 // 优先级120，设置为 Active 端 standby 20 preempt delay minimum 30 // 抢占延迟 30s ipv6 address 240E:0:0:1502::2/64 ipv6 enable ipv6 nd other-config-flag ipv6 dhcp server O-POOL ipv6 ospf 100 area 0 ipv6 ospf network point-to-point ! interface Vlan520 no ip address ipv6 enable ipv6 ospf 100 area 0 ipv6 ospf network point-to-point ! ipv6 router ospf 100 router-id 10.20.20.20 ! ! -- SW21 ! spanning-tree mode mst spanning-tree mst configuration name a.com.hub revision 2 instance 10 vlan 10 instance 20 vlan 20 ! interface Ethernet0/0 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk ! interface Ethernet0/1 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk ! interface Ethernet0/2 switchport access vlan 10 ! interface Ethernet0/3 switchport access vlan 20 ! A branch1 配置 ! -- R6 ! ipv6 dhcp pool O-POOL dns-server 2008::1 dns-server 2008::2 domain-name a.com ! interface Tunnel1 // DMVPN description DMVPN_BRANCH_1 no ip address ipv6 address FD00:A::2/64 ipv6 eigrp 90 // EIGRP 启用 ipv6 nhrp map FD00:A::1/64 240E:0:0:15::5 // 映射 FD00:A::1 R5 的公网 IPv6 地址 ipv6 nhrp map multicast 240E:0:0:15::5 ipv6 nhrp network-id 100 ipv6 nhrp nhs FD00:A::1 tunnel source Ethernet0/0 tunnel mode gre multipoint ipv6 ! interface Ethernet0/0 no ip address duplex auto ipv6 address 2409:0:0:26::6/64 ipv6 address autoconfig default //生成指向 ISP 默认路由 ipv6 enable ! interface Ethernet0/1 no ip address duplex auto ipv6 address 2409:0:0:2600::6/64 ipv6 enable ipv6 nd other-config-flag ipv6 eigrp 90 // EIGRP 启用 ipv6 dhcp server O-POOL ! ipv6 router eigrp 90 //运行 EIGRP,IPv6 multicast over mGRE tunnel is not supported. neighbor FE80::A8BB:CCFF:FE00:500 Tunnel1 // 手动指邻居 neighbor FE80::A8BB:CCFF:FE00:700 Tunnel1 // 手动指邻居 eigrp router-id 10.6.6.6 ! A branch2 / B head 配置 ! -- R7 ! ipv6 dhcp pool O-POOL dns-server 2008::1 dns-server 2008::2 domain-name a.com ! interface Tunnel1 // DMVPN description DMVPN_BRANCH_2 no ip address ipv6 address FD00:A::3/64 ipv6 eigrp 90 // EIGRP 启用 ipv6 nhrp map FD00:A::1/64 240E:0:0:15::5 ipv6 nhrp map multicast 240E:0:0:15::5 ipv6 nhrp network-id 100 ipv6 nhrp nhs FD00:A::1 tunnel source Dialer1 // 出接口为 Dialer tunnel mode gre multipoint ipv6 ! interface Ethernet0/0 no ip address duplex auto pppoe enable group global pppoe-client dial-pool-number 1 ! interface Ethernet0/1 no ip address duplex auto ipv6 address INTRA_PD ::7/64 // 使用获取到的前缀配置接口IPv6地址 ipv6 enable ipv6 nd other-config-flag ipv6 eigrp 90 // EIGRP 启用 ipv6 dhcp server O-POOL // DHCP 参数下发 ! interface Dialer1 // PPPOE 拨号 mtu 1492 no ip address encapsulation ppp dialer pool 1 dialer-group 1 ipv6 address dhcp ipv6 address autoconfig default ipv6 enable ipv6 mtu 1492 ipv6 dhcp client pd INTRA_PD //获取前缀，命名 INTRA_PD ppp authentication pap callin ppp pap sent-username user1 password 0 user1 ! ipv6 router eigrp 90 // 运行 EIGRP,IPv6 multicast over mGRE tunnel is not supported. neighbor FE80::A8BB:CCFF:FE00:500 Tunnel1 // 手动指邻居 neighbor FE80::A8BB:CCFF:FE00:600 Tunnel1 // 手动指邻居 eigrp router-id 10.7.7.7 ! ----------------------------------------------------------------------------------------- ! -- R8 ipv6 dhcp pool O-POOL dns-server 2008::1 dns-server 2008::2 domain-name b.com ! interface Ethernet0/0 no ip address duplex auto pppoe enable group global pppoe-client dial-pool-number 1 ! interface Ethernet0/1 no ip address duplex auto ipv6 address INTRA_PD ::8/64 ipv6 enable ipv6 nd other-config-flag ipv6 dhcp server O-POOL // DHCP 参数下发 ! interface Dialer1 mtu 1492 no ip address encapsulation ppp dialer pool 1 dialer-group 1 ipv6 address dhcp ipv6 address autoconfig default ipv6 enable ipv6 mtu 1492 ipv6 dhcp client pd INTRA_PD ppp authentication pap callin ppp pap sent-username user2 password 0 user2 ! ! -- R2 PPPOE SERVER ! ipv6 dhcp pool DHCPV6POOL //配置 PD 池 prefix-delegation pool POOL-2 ! username user1 password 0 user1 // 用于 PPPOE 拨号认证 username user2 password 0 user2 // 用于 PPPOE 拨号认证 ! bba-group pppoe GROUP-1 virtual-template 1 // 绑定模版1 ! interface Loopback11 // 这个地址用于复用，不知道Cisco为什么这般设计，直接在模版下配不就行了 no ip address ipv6 address 2409:0:0:2::2/60 ipv6 enable ! interface Ethernet0/1 no ip address duplex auto ipv6 enable pppoe enable group GROUP-1 // 调用 ! interface Virtual-Template1 description PPPOE-GROUP-1 mtu 1492 no ip address peer default ipv6 pool PPPOE-PEER-POOL // 为拨号客户端对端配置 IPv6 的地址 ipv6 unnumbered Loopback11 // 复用 ipv6 enable ipv6 mtu 1492 ipv6 nd managed-config-flag no ipv6 nd ra suppress ipv6 dhcp server DHCPV6POOL // PD 下发 ppp authentication pap ! ipv6 local pool POOL-2 2409:0:0:2780::/60 64 ipv6 local pool PPPOE-PEER-POOL 2409:0:0:2220::/60 64 ! ISATAP Tunnel ! -- R9 ! interface Tunnel1 // ISATAP Tunnel no ip address no ip redirects ipv6 address 2409:0:0:2900::/64 eui-64 ipv6 enable no ipv6 nd ra suppress tunnel source Ethernet0/1 tunnel mode ipv6ip isatap ! interface Ethernet0/0 no ip address duplex auto ipv6 address 2409:0:0:29::9/64 ipv6 enable ! interface Ethernet0/1 ip address 192.168.9.254 255.255.255.0 duplex auto ! ipv6 route ::/0 2409:0:0:29::2 ! GRE Tunnel ! -- R15 ! interface Tunnel1 // GRE Tunnel no ip address ipv6 enable ipv6 ospf 100 area 0 tunnel source Ethernet0/0 tunnel destination 200.1.103.10 // R10 WAN 地址 ! interface Ethernet0/0 ip address 200.1.154.15 255.255.255.0 duplex auto ! interface Ethernet0/1 ip address 192.168.15.254 255.255.255.0 duplex auto ipv6 address FD00:F::F/64 // 惟一本地地址 ipv6 enable ipv6 ospf 100 area 0 ! ip route 0.0.0.0 0.0.0.0 200.1.154.4 ! ipv6 router ospf 100 router-id 10.15.15.15 ! ! -- R10 ! interface Tunnel1 // GRE Tunnel no ip address ipv6 enable ipv6 ospf 100 area 0 tunnel source Ethernet0/0 tunnel destination 200.1.154.15 // R15 WAN 地址 ! interface Ethernet0/0 ip address 200.1.103.10 255.255.255.0 ip nat outside ip virtual-reassembly in duplex auto ! interface Ethernet0/1 ip address 192.168.10.254 255.255.255.0 ip nat inside ip virtual-reassembly in duplex auto ipv6 address FD00:A::A/64 // 惟一本地IPv6地址 ipv6 enable ipv6 ospf 100 area 0 ! ip nat inside source list 10 interface Ethernet0/0 overload // IPv4 NAT ip route 0.0.0.0 0.0.0.0 200.1.103.3 ! ipv6 router ospf 100 router-id 10.10.10.10 ! access-list 10 permit 192.168.10.0 0.0.0.255 ! 6to4 Tunnel and Realy ! -- R14 ! interface Tunnel1 // 6to4 Tunnel no ip address no ip redirects ipv6 unnumbered Ethernet0/0 ipv6 enable tunnel source Ethernet0/0 tunnel mode ipv6ip 6to4 ! interface Ethernet0/0 ip address 200.1.144.14 255.255.255.0 duplex auto ipv6 address 2408:0:0:E4::E/64 // 与 R4 互联的 IPv6 地址 ! interface Ethernet0/1 no ip address duplex auto ipv6 address 2002:C801:900E::E/64 // 6to4 地址 ipv6 enable ! ip route 0.0.0.0 0.0.0.0 200.1.144.4 ! ipv6 route 2002::/16 Tunnel1 // 站点互通 ipv6 route ::/0 2408:0:0:E4::4 // 访问 ISP IPv6 网络 ! ! -- R11 ! interface Tunnel1 // 6to4 Tunnel no ip address no ip redirects ipv6 enable tunnel source Ethernet0/0 tunnel mode ipv6ip 6to4 ! interface Ethernet0/0 ip address 200.1.113.11 255.255.255.0 ip nat outside ip virtual-reassembly in duplex auto ! interface Ethernet0/1 ip address 192.168.11.254 255.255.255.0 ip nat inside ip virtual-reassembly in duplex auto ipv6 address 2002:C801:710B::B/64 // 6to4 地址 ipv6 enable ! ip nat inside source list 10 interface Ethernet0/0 overload // IPv4 NAT ip route 0.0.0.0 0.0.0.0 200.1.113.3 ! ipv6 route 2002::/16 Tunnel1 // 站点互通 ipv6 route ::/0 2002:C801:900E::E // 访问IPv6 互联 下一跳 到 R14 中继 转发 ! access-list 10 permit 192.168.11.0 0.0.0.255 ! Manual Tunnel ! -- R13 ! interface Tunnel1 // Manual Tunnel no ip address ipv6 enable ipv6 rip RIPNG enable // 启用 RIPNG tunnel source Ethernet0/0 tunnel mode ipv6ip tunnel destination 200.1.123.12 ! interface Ethernet0/0 ip address 200.1.134.13 255.255.255.0 duplex auto ! interface Ethernet0/1 no ip address duplex auto ipv6 address FC00:D::D/64 // 惟一本地IPv6地址 ipv6 enable ipv6 rip RIPNG enable // 启用 RIPNG ! ip route 0.0.0.0 0.0.0.0 200.1.134.4 ! ipv6 router rip RIPNG // 站点互通 RIPNG ! ! -- R12 ! interface Tunnel1 // Manual Tunnel no ip address ipv6 enable ipv6 rip RIPNG enable // 启用 RIPNG tunnel source Ethernet0/0 tunnel mode ipv6ip tunnel destination 200.1.134.13 ! interface Ethernet0/0 ip address 200.1.123.12 255.255.255.0 ip nat outside ip virtual-reassembly in duplex auto ! interface Ethernet0/1 ip address 192.168.12.254 255.255.255.0 ip nat inside ip virtual-reassembly in duplex auto ipv6 address FC00:C::C/64 // 惟一本地IPv6地址 ipv6 enable ipv6 rip RIPNG enable ! ip nat inside source list 10 interface Ethernet0/0 overload // IPv4 NAT ip route 0.0.0.0 0.0.0.0 200.1.123.3 ! ipv6 router rip RIPNG // 站点互通 RIPNG ! access-list 10 permit 192.168.12.0 0.0.0.255 ! 6RD Tunnel ! -- R16 ! ipv6 general-prefix 6RD 6rd Tunnel1 // 从Tunnel 1 获取 ISP 通用前缀 命名为6RD ! interface Tunnel1 // 6RD Tunnel no ip address no ip redirects ipv6 address 6RD ::/128 // 通过命名为6RD 的通用前缀构建 IPv6 地址 ipv6 enable tunnel source Ethernet0/0 tunnel mode ipv6ip 6rd // 模式 tunnel 6rd ipv4 prefix-len 16 // IPv4 通用前缀 ，不设置通用后缀 tunnel 6rd prefix 2408:1617::/32 //ISP 设定的 IPv6 前缀 tunnel 6rd br 200.1.4.4 // BR 地址，位于 ISP ! interface Ethernet0/0 ip address 200.1.164.16 255.255.255.0 duplex auto ! interface Ethernet0/1 no ip address duplex auto ipv6 address 2408:1617:A410:F::F/64 // 通过 ISP 设定的前缀 + IPv4 通用前缀构造，IPv4通用前缀占去16位，而通用后缀没有设置，所以就是164.16，转16进制 ipv6 enable ! ip route 0.0.0.0 0.0.0.0 200.1.164.4 ! ipv6 route 2408:1617::/32 Tunnel1 // 站点互访 ipv6 route ::/0 Tunnel1 2408:1617:404:: // 访问 IPv6 互联网 ! ! -- R17 ! ipv6 general-prefix 6RD 6rd Tunnel1 ! interface Tunnel1 no ip address no ip redirects ipv6 address 6RD ::/128 ipv6 enable tunnel source Ethernet0/0 tunnel mode ipv6ip 6rd tunnel 6rd ipv4 prefix-len 16 tunnel 6rd prefix 2408:1617::/32 tunnel 6rd br 200.1.4.4 ! interface Ethernet0/0 ip address 200.1.174.17 255.255.255.0 duplex auto ! interface Ethernet0/1 no ip address duplex auto ipv6 address 2408:1617:AE11:11::11/64 // // 通过 ISP 设定的前缀 + IPv4 通用前缀构造，IPv4通用前缀占去16位，而通用后缀没有设置，所以就是174.17，转16进制 ipv6 enable ! ip route 0.0.0.0 0.0.0.0 200.1.174.4 ! ipv6 route 2408:1617::/32 Tunnel1 ipv6 route ::/0 Tunnel1 2408:1617:404:: ! ! -- R4 ! ipv6 general-prefix 6RD 6rd Tunnel1 ! interface Loopback1 ip address 200.1.4.4 255.255.255.255 ! interface Tunnel1 no ip address no ip redirects ipv6 address 6RD ::/128 ipv6 enable tunnel source Loopback1 // 指定源，6RD 网络 IPv4 可达，还有一种说法是，可以配置anycast，6RD 网络就近访问 tunnel mode ipv6ip 6rd tunnel 6rd ipv4 prefix-len 16 tunnel 6rd prefix 2408:1617::/32 ! ipv6 route 2408:1617::/32 Tunnel1 // 站点访问IPv6 网络 返回流量 ! Test \u0026amp; Observation PC 23\nping PC 24 ping R5 Loopback0 ping 位于 ISP Network 的 R3 Loopback0 ping 位于 A branch1 的 PC 25 ping 位于 B head 的 PC 26 ping 位于 6to4 Tunnel site2 的 PC 28 ping 位于 6RD Tunnel site1 的 PC 30 PC 25\nping 位于 A head 的 PC 24 ping 位于 A branch2 的 E0/1 接口 PC 26\nping 位于 ISP Network 的 R4 Loopback0 ping 位于 A head 的 PC 24 ping 位于 6RD Tunnel site1 的 PC 30 PC 27\nping GRE Tunnel site1 的 E0/1 接口 ping 位于 ISP Network 的 R1 Loopback0 （IPv4） PC 28\nping 位于 6to4 Tunnel site1 E0/1 接口 ping 位于 ISP Network 的 R1 Loopback0 （IPv6） ping 位于 ISP Network 的 R1 Loopback0 （IPv4） PC 29\nping 位于 Manual Tunnel site1 E0/1 接口 ping 位于 ISP Network 的 R1 Loopback0 （IPv4） PC 30\nping 位于 6RD Tunnel site2 E0/1 接口 ping 位于 ISP Network 的 R1 Loopback0 （IPv6） Ending 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 配置存阿里云盘了，这是链接：[分享的文件 ] 欢迎“来电”来函探讨。 ","date":"2022-04-03T07:18:36Z","permalink":"https://kiraster.github.io/posts/2e964a67.html/","title":"IPv6 各隧道Tunnel使用Lab"},{"content":"在B站看了一个UP主（155和150 ）上传的视频，感觉挺有意思的，就搭拓扑玩一玩。现在这个视频已经不见了，视频里使用的eNSP模拟器搭建的，我用PNET搭建，模拟器类型不关键。已经删减了一些内容，并加了一些实验需求。\n实验主要涉及到的BGP技术的运用，包括有BGP邻居建立、路由加载、路由传递、BGP联盟、路由聚合、路由拆分、团体属性、路由选路、正则表达式、路由过滤、BGP特性、路由阻尼等。\n拓扑如图：\n实验需求 BGP邻居建立 eBGP之间使用接口建立(联盟内部子AS eBGP除外)，iBGP使用环回接口Lo0建立 R2、R7、R9使用对等体组方式配置 R4、R7、R9为路由反射器 BGP路由加载 R5将ISIS重分布进BGP，R6、R7、R8将ISIS重分布进BGP\nR5 router bgp 64100 redistribute isis level-1 R6、R7、R8 router bgp 64200 redistribute isis level-2 R5能够正常接收到100.1.1.X的路由，R4不能使用next-hop-self\nR4 route-map SET_NH permit 10 set ip next-hop 120.1.4.4 router bgp 64100 neighbor iBGP route-map SET_NH out BGP路由传递 100.1.1.x之间可以通信\nR3 neighbor 200.1.103.10 as-override R6 neighbor 200.1.116.11 as-override R7 neighbor 200.1.127.12 as-override R3、R6、R7针对AS 64520移除私有AS号\nR3 router bgp 64100 neighbor 200.1.103.10 remove-private-as all replace-as R6 router bgp 64200 neighbor 200.1.116.11 remove-private-as all replace-as R7 router bgp 64200 neighbor 200.1.127.12 remove-private-as all replace-as AS 64540 内部联邦配置\nR11 router bgp 64530 bgp log-neighbor-changes bgp confederation identifier 64540 bgp confederation peers 64531 neighbor 100.1.1.12 remote-as 64531 neighbor 100.1.1.12 disable-connected-check neighbor 100.1.1.12 update-source Loopback0 neighbor 100.1.1.12 next-hop-self neighbor 200.1.116.6 remote-as 64200 R12 router bgp 64531 bgp log-neighbor-changes bgp confederation identifier 64540 bgp confederation peers 64530 redistribute eigrp 90 neighbor 100.1.1.11 remote-as 64530 neighbor 100.1.1.11 disable-connected-check neighbor 100.1.1.11 update-source Loopback0 neighbor 100.1.1.11 next-hop-self neighbor 100.1.1.13 remote-as 64531 neighbor 100.1.1.13 update-source Loopback0 neighbor 100.1.1.13 next-hop-self neighbor 200.1.127.7 remote-as 64200 R13 router bgp 64531 bgp log-neighbor-changes bgp confederation identifier 64540 network 111.1.2.0 mask 255.255.255.0 network 111.1.3.0 mask 255.255.255.0 aggregate-address 111.1.0.0 255.255.0.0 as-set summary-only neighbor 100.1.1.12 remote-as 64531 neighbor 100.1.1.12 update-source Loopback0 BGP路由聚合、路由拆分 R5、R6、R7、R8对AS内的互联地址与主机路由汇总为子网掩码为16位的聚合路由（例如：120.1.0.0/16），并防止路由回愦\nR5 router bgp 64100 aggregate-address 123.1.0.0 255.255.0.0 as-set summary-only aggregate-address 120.1.0.0 255.255.0.0 as-set summary-only R6、R7、R8 router bgp 64200 aggregate-address 145.1.0.0 255.255.0.0 as-set summary-only aggregate-address 140.1.0.0 255.255.0.0 as-set summary-only R5的汇总主机路由，不抑制120.1.4.4/32和 120.1.5.5/32\nR5 ip prefix-list UNSUPPRESS seq 5 permit 120.1.4.4/32 ip prefix-list UNSUPPRESS seq 10 permit 120.1.5.5/32 route-map UNSUPPRESS permit 10 match ip address prefix-list UNSUPPRESS router bgp 64100 neighbor 120.1.4.4 unsuppress-map UNSUPPRESS R6、R7、R8的汇总主机路由，仅抑制145.1.9.9/32 ，并调整聚合路由起源属性为 igp\nR6、R7、R8 ip prefix-list SUPPRESS seq 5 permit 140.1.9.9/32 route-map SUPPRESS permit 10 match ip address prefix-list SUPPRESS route-map SET_IGP permit 10 set origin igp router bgp 64200 aggregate-address 140.1.0.0 255.255.0.0 as-set summary-only attribute-map SET_IGP suppress-map SUPPRESS R1去往111.1.0.0/24和111.1.1.0/24下一跳走R5；R2去往111.1.2.0/24和111.1.3.0/24下一跳走R8\nR1 ip prefix-list SOURCE_AS64100 seq 5 permit 200.1.15.5/32 ip prefix-list huizong seq 5 permit 111.1.0.0/16 ip prefix-list mingxi seq 5 permit 111.1.0.0/24 ip prefix-list mingxi seq 10 permit 111.1.1.0/24 route-map mingxi permit 10 set ip address prefix-list mingxi set community no-export route-map huizong permit 10 match ip address prefix-list huizong match ip route-source prefix-list SOURCE_AS64100 router bgp 64520 bgp inject-map mingxi exist-map huizong copy-attributes R2 ip prefix-list SOURCE_AS64200 seq 5 permit 200.1.28.8/32 ip prefix-list huizong seq 5 permit 111.1.0.0/16 ip prefix-list mingxi seq 5 permit 111.1.2.0/24 ip prefix-list mingxi seq 10 permit 111.1.3.0/24 route-map mingxi permit 10 set ip address prefix-list mingxi set community no-export route-map huizong permit 10 match ip address prefix-list huizong match ip route-source prefix-list SOURCE_AS64200 router bgp 64520 bgp inject-map mingxi exist-map huizong copy-attributes BGP选路(MED、AS-Path、Local-Pref) R8上配置，实现AS 64200访问 120.1.X.X，X为偶数，走R4和R8互联链路；X为奇数，走R3和R6互联链路\nR8 access-list 10 permit 120.1.0.0 0.0.254.254 access-list 20 permit 120.1.1.1 0.0.254.254 route-map SET_LP permit 10 match ip address 10 set local-preference 120 route-map SET_LP permit 20 match ip address 20 set local-preference 99 route-map SET_LP permit 30 router bgp 64200 neighbor 200.1.48.4 route-map SET_LP in R6、R8上配置，实现AS 64100 访问 140.1.X.X/32，X为偶数，走R4和R8互联链路；X为奇数，走R3和R6互联链路\nR6 access-list 30 permit 140.1.0.0 0.0.254.254 access-list 40 permit 140.1.1.1 0.0.254.254 route-map SET_MED permit 10 match ip address 30 set metric 200 route-map SET_MED permit 20 match ip address 40 set metric 100 route-map SET_MED permit 30 router bgp 64200 neighbor 200.1.36.3 route-map SET_MED out R8 access-list 30 permit 140.1.0.0 0.0.254.254 access-list 40 permit 140.1.1.1 0.0.254.254 route-map SET_MED permit 10 match ip address 30 set metric 100 route-map SET_MED permit 20 match ip address 40 set metric 200 route-map SET_MED permit 30 router bgp 64200 neighbor 200.1.48.4 route-map SET_MED out R1上对起始于AS 64540的任意前缀，AS 64520总是通过R2转发（路由拆分的明细条目除外）\n配置 ip as-path列表，匹配AS 64540 开头的路径路由条目，route-map 设置追加AS号使路径变长 R1 ip as-path access-list 100 permit _64540$ route-map AS_PREPEND permit 10 match as-path 100 set as-path prepend last-as 3 router bgp 64520 neighbor 200.1.15.5 route-map AS_PREPEND in BGP路由过滤 R6、R7仅通告 200.1.XY.0/24 与 100.1.1.X/32的路由到 R11、R12\nroute-map 设置匹配，向R11，R12通告路由进行过滤 R6 ip prefix-list ADV_TO_64540 seq 5 permit 200.1.0.0/16 le 24 ip prefix-list ADV_TO_64540 seq 10 permit 100.1.1.0/24 le 32 route-map ADV_TO_64540 permit 10 match ip address prefix-list ADV_TO_64540 router bgp 64200 neighbor 200.1.116.11 route-map ADV_TO_64540 out R7 ip prefix-list ADV_TO_64540 seq 5 permit 200.1.0.0/16 le 24 ip prefix-list ADV_TO_64540 seq 10 permit 100.1.1.0/24 le 32 route-map ADV_TO_64540 permit 10 match ip address prefix-list ADV_TO_64540 router bgp 64200 neighbor 200.1.127.12 route-map ADV_TO_64540 out R3、R10上配置ORF，使AS 64100仅通告 200.1.XY.0/24 与 100.1.1.X/32的前缀到R10\n通过向对等体通告ORF能力可以激活这一feature。表示接受从对等体来的，前缀列表，并把这个前缀列表应用到针对对等体的出站方向。 R10 ip prefix-list FROM_64100 seq 5 permit 200.1.0.0/16 le 24 ip prefix-list FROM_64100 seq 10 permit 100.1.1.0/24 le 32 router bgp 64540 neighbor 200.1.103.3 capability orf prefix-list send neighbor 200.1.103.3 prefix-list FROM_64100 in R3 router bgp 64100 neighbor 200.1.103.10 capability orf prefix-list receive BGP 特性 AS 64520 不作为传输型AS 不能使用BGP路由过滤\nno-export团体属性 R1 route-map SET_COMM permit 10 set community no-export router bgp 64520 neighbor 10.1.2.2 send-community neighbor 10.1.2.2 route-map SET_COMM out R2 route-map SET_COMM permit 10 set community no-export router bgp 64520 neighbor 10.1.1.1 send-community neighbor 10.1.1.1 route-map SET_COMM out R1与R2之间的iBGP邻居启用MD5认证，密码为cisco\nR1 neighbor 10.1.1.1 password cisco R2 neighbor 10.1.2.2 password cisco R3上配置，若100.1.1.10/32不稳定，震荡2次抑制传递，并在5min后自动恢复\n配置BGP路由惩罚 R3 ip prefix-list DAMPENING seq 5 permit 100.1.1.10/32 route-map DAMPENING permit 10 match ip address prefix-list DAMPENING set dampening 4 750 2000 16 router bgp 64100 bgp dampening route-map DAMPENING R1上配置，若100.1.1.10路由条目存在，通告默认路由到R2\nR1 ip prefix-list EXIST_10 seq 5 permit 100.1.1.10/32 route-map DEFAULT_CONDITION permit 10 match ip address prefix-list EXIST_10 set community no-export router bgp 64520 neighbor 10.1.2.2 default-originate route-map DEFAULT_CONDITION Ending 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 配置存阿里云盘了，这是链接：[分享的文件 ] 欢迎“来电”来函探讨。 ","date":"2022-02-25T01:32:49Z","permalink":"https://kiraster.github.io/posts/48f55792.html/","title":"BGP综合实验拓扑"},{"content":"来自 以太网帧格式 {% blockquote %}\n以太帧类型\n以太帧有很多种类型。不同类型的帧具有不同的格式和MTU值。但在同种物理媒体上都可同时存在。\n以太网第二版[note 3] 或者称之为Ethernet II 帧，DIX帧，是最常见的帧类型。并通常直接被IP协议使用。\nNovell的非标准IEEE 802.3帧变种。\nIEEE 802.2 逻辑链路控制 (LLC) 帧\n子网接入协议(SNAP)帧\n所有四种以太帧类型都可包含一个IEEE 802.1Q选项来确定它属于哪个 VLAN 以及他的IEEE 802.1p优先级(QoS)。这个封装由IEEE 802.3ac定义并将帧大小从64字节扩充到1522字节(注：不包含7个前导字节和1个字节的帧开始符以及12个帧间距字节)。\nIEEE 802.1Q标签，如果出现，需要放在源地址字段和以太类型或长度字段的中间。这个标签的前两个字节是标签协议标识符(TPID)值0x8100。这与没有标签帧的以太类型/长度字段的位置相同，所以以太类型0x8100就表示包含标签的帧，而实际的以太类型/长度字段则放在Q-标签的后面。TPID后面是两个字节的标签控制信息(TCI)。(IEEE 802.1p 优先级(QoS)和 VLAN ID)。Q标签后面就是通常的帧内容。\nEthernet II\n以太 II 帧 (也称作DIX以太网，是以这个设计的主要成员，DEC,Intel和Xerox的名字命名的。[1]),把紧接在目标和源MAC地址后面的这个两字节定义为以太网帧数据类型字段。\n例如，一个0x0800的以太类型说明这个帧包含的是IPv4数据报。同样的，一个0x0806的以太类型说明这个帧是一个ARP帧，0x8100说明这是一个IEEE 802.1Q帧，而0x86DD说明这是一个IPv6帧。\n当这个工业界的标准通过正式的IEEE标准化过程后，在802.3标准中以太类型字段变成了一个(数据)长度字段。(最初的以太包通过包括他们的帧来确定它们的长度，而不是以一个明确的数值。)但是包的接收层仍需知道如何解析包，因此标准要求将IEEE802.2头跟在长度字段后面，定义包的类型。多年之后，802.3x-1997标准，一个802.3标准的后继版本，正式允许两种类型的数据包同时存在。实际上，两种数据包都被广泛使用，而最初的以太数据包在以太局域网中被广泛应用，因为他的简便和低开销。\n为了允许一些使用以太II版本的数据报和一些使用802.3封装的最初版本的数据包能够在同一个以太网段使用，以太类型值必须大于等于1536(0x0600)。这个值比802.3数据包的最大长度1500byte (0x05DC)要更大。因此如果这个字段的值大于等于1536，则这个帧是以太II帧，而那个字段是类型字段。否则(小于1500而大于46字节)，他是一个IEEE 802.3帧，而那个字段是长度字段。1500～1536(不包含)的数值未定义。[2] {% endblockquote %}\nPart 2 前阵子去处理一个无线局域网的接入故障问题，组网结构是二层旁挂隧道转发组网，反映的问题是无线终端接入慢，甚至连接不上 WIFI，在查看了设备后，发现有大量的无线终端获取不到IP地址，我想问题的根本在此。 组网结构如上图，AP地址段 VLAN 和 STA 地址段 VLAN 不同，AP 的 STA 的 DHCP server 在汇聚交换机上（DHCP 的网关均设置在汇聚交换机上？），汇聚连接各楼层的非网管 PoE 交换机，查看了汇聚交换机配置，虽说是隧道转发，但连接楼层交换机的接口全放行了业务 STA 的 VLAN（我觉得这是个错误配置），\n决定改直接转发，扩大 STA 地址池范围，修改租期为更短时间，手动调优一次（该单位因装修调整过线路和AP，再加上AP布放相当不合理（壁挂安装，楼层里 AP 相隔两三米斜对角线安装））\n修改完配置后，问题更大了，仅有少数无线终端能获取IP正常接入，绝大多无线终端无法接入无线网络，长时间处在获取 IP 地址，然而修改成隧道转发后，可正常接入。最终排查出最大的可能性是这非网管交换机的问题，无法转发透传包含两个及以上的 802.1Q 的数据帧到汇聚交换机，这就触及本人知识盲区了，折腾了许久。\n接下来有两种方案，一是修改 AP 和 STA 的地址网段和 VLAN 为同一个，二是还是使用隧道转发，第一个方案改动太大了，最终使用第二方案。\n回来后一顿搜索非网管交换机的工作原理，有说非网管交换机所有口都是属于 VLAN 1 的说法，这简直是胡说八道的。有说能否转发带 VLAN tag 数据和该交换机支持转发的最大传输单元（MTU）有关系，我查了各大非网管交换机的特性参数，均没有提及这一个参数。理论上这个参数确实会影响转发，就是说非网管交换机设定了一个转发的最大帧长度，当交换机接收到大于这个设定的帧长度就丢弃不转发，毕竟支持更大帧转发意味着消耗更多的硬件资源，基于成本控制我是可以理解硬件厂商这么做的原因。而且像 Jambo frame 这种格式在我接触到的项目中毕竟小众，使用场景比标准的802.3要少的多。\n也翻看了一些做了测试的网站文章，也没有一个定论说肯定支持转发或不支持转发802.1q的数据帧，看多了都使我抑郁了，更多的是论坛下的一些讨论。\n长教训了，这哪怕换成工作在物理层的 HUB 都能正常工作，反而……，看来将来再遇到这种非网管PoE交换机接入的情况要相当注意了，别再踩坑了。\n还有个别 AP 未上线问题，查看原因 Negotiation CAPWAP tunnel failed ，就去检查物理线路吧，特别是使用光收发这种设备的，【能不能通，能通有丢包，AP就是不上线】\nEnding 文中可能有些内容术语表述的不规范，请见谅。 欢迎“来电”来函探讨。 ","date":"2021-12-27T16:33:28Z","permalink":"https://kiraster.github.io/posts/e906be86.html/","title":"来自非网管交换机的教训"},{"content":"最近翻看 《CCNP ROUTE(642-902)学习指南 》，没错就是 2015 年之前 CCNP 改版前的那本，现在最新的认证考试已不是这个编号和课程了。诶，不聊这些，这不重要。\n现在把时间线拉回当年那个技术发展的时候，你要是说技术过时了，不好意思今年我还在某现网中看到设备运行 RIPv2 和 OSPF 两种协议的重分发。这也不重要。\n本文权当自己学习和回忆。\nPart 1 单点单向重分发\n下图所示 ，在 R1 上进行单向重分发（RIP 重分发进入 OSPF），R2 不进行重分发操作。\n观察 R2 上的路由表发现去往 RIP 外部网络 10.0.0.0 的路由下一跳地址是 R1 的 12.1.1.1 ，产生了次优路由。正确路径的下一跳应是 R3 的 23.1.1.3 。\n产生这条次优路由的原因是 R1 进行的重分发，产生 5 类 LSA 传递到 R2 上，最终 Cisco 路由器根据对比管理距离大小选择加载了 OSPF (110) 的路由。\n既然知道了加载这条路由的原因，解决方法有：1、阻断重分发而来的 LSA ，使 R2 自始至终只有 RIP 的路由，这么做虽然能临时使 R2 选择最优路径，但是当 R2 和 R3 之间的链路出现问题，通过 R2 去往 10.0.0.0 外部网络将不可达，不是一个好方法；2、修改 OSPF 外部路由的管理距离，使之大于 RIP （120），这样处理就可以使 R2 选择加载 RIP 学习到的路由，这是可行的。\n! -- 方式 1 ，定义 ACL 匹配外部网络，在 OSPF 进程下针对该 ACL 修改管理距离 ! access-list 10 permit 10.0.0.0 0.255.255.255 ! router ospf 100 distance 121 0.0.0.0 255.255.255.255 10 ! ! -- 方式 2 ，直接在 OSPF 进程下针对外部网络修改管理距离 ! router ospf 100 distance ospf external 121 ! 无论使用哪种方式，都会得到下图所示路由表。\nPart 2 多点单向重分发\n下图所示 ，在 R1 和 R2 上进行单向重分发（RIP 重分发进入 OSPF）。\n观察 R2 上的路由表发现去往 RIP 外部网络 10.0.0.0 的路由下一跳地址是 R1 的 12.1.1.1 ，产生了次优路由。正确路径的下一跳应是 R3 的 23.1.1.3 。R1 上执行 clear ip ospf redistribution 命令，再观察 R1 路由表发现去往 RIP 外部网络 10.0.0.0 的路由下一跳地址是 R1 的 12.1.1.2 ，产生了次优路由。正确路径的下一跳应是 R3 的 13.1.1.3 。\n产生次优路由的原因和 Part 1 中是类似的，解决方法类似。\nPart 3 多点多向重分发\n下图所示 ，在 R1 和 R2 上进行双向重分发。\n观察 R1 和 R2 去往 EIGRP 外部网络 192.168.1.0 和 192.168.2.0 的路由表项，发现 R1 上去往外部网络路径下一跳是 R2 ，R2 上去往外部网络路径下一跳是 R1 ，出现了次优路由和路由环路。\n产生上述问题的原因是，在 R1 上把 EIGRP 重分发进 OSPF ，R2 上又把重分发进 OSPF 的路由重分发回 EIGRP ，R1 上收到 R2 和 R3 发过来关于 192.168.1.0/192.168.2.0 的外部路由更新，对比度量值后，选取度量值小的加载到路由表。R1 上查看输出：\n**解决方法：**阻断重分发进对方路由域的路由更新再次重分发回原路由域 。定义名称为 in2ospf 的 route-map ，序号 10 的语句对匹配 TAG 为 100 的路由条目拒绝重分发；序号 20 的语句对 TAG 不是 100 的路由条目设置 TAG 为 200 。定义名称为 in2eigrp 的 route-map ，序号 10 的语句对匹配 TAG 为 200 的路由条目拒绝重分发；序号 20 的语句对 TAG 不是 200 的路由条目设置 TAG 为 100 。\n! -- R2 上定义 route-map ，R1 上也做这样的操作 ! route-map in2ospf deny 10 match tag 100 ! route-map in2ospf permit 20 set tag 200 ! route-map in2eigrp deny 10 match tag 200 ! route-map in2eigrp permit 20 set tag 100 ! ! -- 重分发时调用 route-map ，R1 上也做这样的操作 ! router eigrp 100 redistribute ospf 100 metric 10000 100 255 1 1500 route-map in2eigrp ! router ospf 100 redistribute eigrp 100 metric 100 subnets route-map in2ospf ! 还可以使用更精简的方式\n! -- R2 上定义 route-map ，R1 上也做这样 ! route-map R-TAGS deny 10 match tag 100 ! route-map R-TAGS permit 20 set tag 100 ! ! -- 重分发时调用 route-map ，R1 上也做这样的操作 ! router eigrp 100 redistribute ospf 100 metric 10000 100 255 1 1500 route-map R-TAGS ! router ospf 100 redistribute eigrp 100 metric 100 subnets route-map R-TAGS ! 做完以上步骤后，查看 R1 和 R2 的路由表，发现环路路由问题解决了，但是还存在次优路由。\n修改 OSPF 外部路由的管理距离，使之大于 EIGRP 外部路由 （170），这样处理就可以使路由器选择加载 EIGRP 学习到的外部路由。\n! -- 方式 1 ，定义 ACL 匹配外部网络，在 OSPF 进程下针对该 ACL 修改管理距离 ! access-list 10 permit 192.168.1.0 0.0.0.255 access-list 10 permit 192.168.2.0 0.0.0.255 ! router ospf 100 distance 171 0.0.0.0 255.255.255.255 10 ! ! -- 方式 2 ，直接在 OSPF 进程下针对外部网络修改管理距离 ! router ospf 100 distance ospf external 171 ! 最终解决问题\nEnding 做路由重分发的时候要考虑到操作后是否产生环路路由、次优路由和网络不可达的情况。 对于产生环路路由、次优路由和网络不可达的情况，要是合理使用 route-map、修改管理距离等手段修正。 当然合理的规划网络也很重要。必要的进行路由汇总，设置 passive-interface ……，使设备路由表尽可能的精简而又能高效的完成转发工作，这是很好的思路。 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 欢迎“来电”来函探讨。 ","date":"2021-11-28T15:10:27Z","permalink":"https://kiraster.github.io/posts/1b6d0fec.html/","title":"几种重分发方式可能带来的问题和处理"},{"content":"前段时间我的台式机电源嗝屁了，不得不掏出吃灰近四年的旧电源来顶一顶，祸不单行，这旧电源也出毛病，目测是供电不足，挂载了三块硬盘，开个 VMware 虚拟机做实验，老是自动频繁的弹出一块机械硬盘，望了望旁边还有一个联想品牌机的机箱（带电源，最大功率只有 280W ），想想要不给它个机会，抱着试一试的想法拆下来插上电，居然能带的动（其实我查过整机功率了，是带的动，显卡用亮机卡了不解释），所以进行了一场“岁土转生”。\n首先感谢的是，品牌机没有对电源插口做特殊化，主板和 CPU 供电接口通用，看了看电源标签上的参数也通用。唯一的问题是主板连接前面板跳线的插口，联想搞了自己个标准。\n图：电源、重启、指示灯跳线的插头\n图：前面板音频插头\n图：前面板 USB 插头\n这……完全不对劲啊，首先针座和针头就对不上。这时候就要动脑和搜索引擎里遨游了。首先查找到联想机箱原主板的针脚，看下图，列出了各针脚的说明。\n用根牙签把联想机箱跳线插座上的线头挑出来，然后对应组装机主板的说明进行排列组合使之在组装机主板能使用（见下图），第一次我把电源指示灯正负接反了（这也不能怪我，联想的板子上没标正负），调换过后就正常了。\n其实在这个正负问题上我还折腾了好一会儿，一开始以为都是按左边针脚是正，右边针脚是负来对应的，打开机箱头部查看电路板发现指示灯也没有正负标识，查了 LED 哪个针脚是正负，查到了，LED 灯珠里小的那一边是正（涨知识了）\n接下来处理前面板的音频插口跳线，查看网上的介绍说明（搜索引擎搜：联想前置音频13针转9针），满满的都是复制粘贴的内容，我就不贴出来了，一番操作后得到如下图样式插头。总是有妖，明明照着教程撸的，测试的时候左右声道反了，又返工对换一对线。^*^\n接下来处理前置 USB 线，查看网上的介绍说明（联想USB接口11针的怎么接主板9针接口？ ）\n联想前置USB接口接法： 市面上普通主板九针接法 VCC，DATA-，DATA+，GND 空 VCC，DATA-，DATA+，GND 线的颜色是: 红 白 绿 黑 红 白 绿 黑 联想主板上的F-usb 11针前置接法又不同了, 经常会遇到联想机箱+组装主板 ，一不小心，将前置线接上组装主板上,结果烧坏了前置usb控制板. 1 2 9 10 都是黑线，3 5 7依次是红白绿，4 6 8依次是棕蓝黄,11是空着的. 顺次是这个的 1 3 5 7 9 11 2 4 6 8 10 ⑴⑵⑼⑽是地线，⑶⑷是VCC，也就是电源正极，⑸⑹是DATA－，⑺⑻是DATA+，⑾是空针 按照这个说明，只需把插头的 3-5-7-8 这四列对应接到主板针脚上即可，不需要改插座头。为了安全起见，我还是掏出了万用表测量了一下自己的组装机主板是否对应这个正负输出（接错线的话确实有点小危险，5 V 直接短路可是要冒烟的）。\n终于折腾完了，把组装机的主板塞进了品牌机的机箱，目前前面板各项功能正常。由于使用了这个 280 W 的电源，这就彻底使我和大型网游“绝缘”了，不过也有好些年不抡游戏了。值得说一句，联想10年前的机箱用料十足，机箱的设计也挺好，给个好评她。这么一折腾才发现处处是学问，不能轻视电脑组装拧螺丝。\n","date":"2021-11-23T18:35:54Z","permalink":"https://kiraster.github.io/posts/1f544ac3.html/","title":"把组装机主板塞到品牌机机箱"},{"content":"红茶三杯的原文 ：【有点儿意思系列 02】哎哟喂停不下来了 ，看完原文描述，我想到的是用 NAT 转换目的地址的方式解决，经过实验验证后，也说明了这个方法是可行的。做完实验后又想还有没有其他方法实现呢，想到用霸道的 PBR ，也能实现，不过这个方法我个人觉得比较傻。\n背景描述：\nR1、R2为两台出口路由器，分别连接电信及网通的广域网出口线路； R1、R2、SW1、SW2运行OSPF，R1配置指向网通的静态路由并部署静态路由到OSPF的路由重发布，R2则向OSPF域发布缺省路由。换而言之，内网访问网通的流量缺省走R1，而访问其他Internet资源的流量走R2出去； 内网有两种服务器：一是向网通公网用户提供服务的服务器，以及向电信公网用户提供服务的服务器。为了使得这两台服务器能够被外网访问，在R1上将网通服务器映射到网通公网地址220.12.15.x/27，而在R2上把电信服务器映射到电信公网地址202.112.12.x/24。 完成上述部署后，网通的公网用户使用目的地址220.12.15.x可以访问网通服务器，电信外网用户通过202.112.12.x可以访问电信服务器。但是电信外网用户使用220.12.15.x地址却无法正常访问网通服务器。请分析原因，并提出解决方案。 Solution Part 1 详细的配置我就不贴文中了，可到文章末尾链接自取。\n先说明一下拓扑在中的设备：CNC_User 和 Telecom_User 是用 PNETLab 的 Docker Chrome Node 设备（打开界面是是一个 Chrome 浏览器，用命令行登陆发现是个 Linux 系统），内网服务器用的是 Docker Apache （命令行登后发现是 Linux 系统，开启了 Apache 服务）。本次实验模拟外网客户端访问内网映射到公网的 HTTP 服务。\n首先，日常配置 VLAN、VRRP、OSPF、NAT……\n一顿操作后，实现上面提到的 1 - 3 的需求及 4 中的前半部分需求。*电信外网用户使用220.12.15.x地址却无法正常访问网通服务器。*原因在于电信用户访问220.12.15.x地址来回路径不一致导致 TCP 会话超时（拓扑中模拟访问 HTTP）,解决方案就是使来回路径一致（皮）。\nPart 2 没有添加配置前，查看 Telecom_User 访问网通服务器 的情况。\n从图中可以看出 Telecom_User （202.112.13.2）电信用户向网通服务器映射地址（220.12.15.1）发出目的端口为 80 的 TCP 的数据包，而 R2 上电信的公网 IP （202.112.12.1）回应了 TCP ，证实了前面提到的 来回路径不一致（其实从内网路由表也可看出），后面数据包逐渐黑化了。\n在 R1 上添加公网访问网通服务器的目的地址 NAT 转换配置\n! -- R1 配置 ! -- 配置公网访问网通服务器转换的 NAT 地址池 ip nat pool to_cnc_server 172.16.1.100 172.16.1.110 netmask 255.255.255.0 ! -- 配置（outside list）任一公网地址访问 R1 上公网 IP 的 80 端口 access-list 101 permit tcp any host 220.12.15.1 eq www ! -- 配置目的地址 NAT 转换 ip nat outside source list 101 pool to_cnc_server ! -- 配置 NAT 地址池网段静态路由，用于回程触发 NAT 转换 ip route 172.16.1.0 255.255.255.0 220.12.15.2 ! 配置完成测试结果如下：\n电信外网用户使用220.12.15.x地址正常访问网通服务器。\n查看 R1 NAT 映射表，有目的地址 NAT 转换，注意观察 Outside local 和 Outside global\n原理就是让 网通服务器 回程的数据包从 R1 出去。在 R1 上配置目的地址 NAT 转换。这时从网通服务上看就是源地址为 172.16.1.100 - 172.16.1.110 的地址访问的自身，回包也就回这个地址段。待回包至 R1 ，查找路由表发现 172.16.1.0 网段下一跳地址是 220.12.15.2 （手动配置的静态路由），触发 NAT 转换（此处查找 NAT 映射表项），源地址转成 R1 网通公网 IP地址回包最终至电信用户。此处配置的 172.16.1.0 网段静态路由是触发 NAT 转换，如果不配置，R1 就把网通服务器发过来的数据包丢弃了。\n普及一下 NAT 执行的顺序，查看思科官网(NAT Order of Operation )\nPart 3 Part 2 中使用 目的地址 NAT 转换的手段使得来回路径一致，那有什么办法能使网通服务器回包强制从 R1 的公网 IP 地址端口出去呢？— PBR。从 SW1 上就开始把网通服务器回包路径扭到 R1 上，R1 再把数据强行从公网接口丢出去。\n清除 Part 2 增加的配置，SW1、R1 添加如下配置：\n! -- SW1 配置 ! access-list 101 permit ip host 192.168.10.1 any ! route-map acc_telecom_remote permit 10 match ip address 101 set ip next-hop 10.10.10.2 ! interface Vlan10 ip policy route-map acc_telecom_remote ! ! -- R1 配置 ! access-list 102 permit ip host 192.168.10.1 any ! route-map acc_telecom_remote permit 10 match ip address 102 set ip next-hop 220.12.15.2 ! interface Ethernet0/2 ip policy route-map acc_telecom_remote ! 配置完成测试结果如下：\n电信外网用户使用220.12.15.x地址正常访问网通服务器。\n查看 R1 NAT 映射表，没有目的地址 NAT 转换，但是触发了正常流量上网的 PAT，注意观察 Outside local 和 Outside global\nEnding 原文后边加两台防火墙的测试我就不做了（古董 AMD 台式机跑不起 ASAv），大概的考察点还是 数据包来回路径一致的问题 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 配置存阿里云盘了，这是链接：[分享的文件 ] 欢迎“来电”来函探讨。 ","date":"2021-11-18T13:10:41Z","permalink":"https://kiraster.github.io/posts/1fa3e02b.html/","title":"No.004 Simple Case"},{"content":"红茶三杯的原文 ：【有点儿意思系列 04】哎哟喂停不下来了 ，根据问题延续中的表述， 实验拓扑增加了两台出口路由器，两台防火墙，一台服务器。本次拓扑实验依托上一个拓扑演变而来，大部分基础配置与上一个相同，如果您是初次看到本文，请参阅上文 【No.002 Simple Case 】，本文不在赘述。\n可能你看到拓扑中防火墙名称就懵了，我解释一下，由于我这是台古董级 AMD CPU 的电脑，跑不起 Cisco ASAv 的镜像（报错：Unsupport CPU type，无限重启），再加上内存有限，就不折腾了，考虑到文中只提到 NAT 的需求，我就用两台路由器换个图标和名称代替了。最终实现了原文中源地址转换及静态映射的需求，虽然牺牲了安全策略配置和 HA 配置。\n极致极简，拓扑中的 Open_Server 同样是用路由器模拟的，实验中将实现 Open_Server 的 SSH 服务映射到公网地址提供访问。\nPart 1 Step 1：修改 Core-SW1 和 Core-SW2 配置 ! --- Core-SW1 配置，增加与 Faker_FW1 互联地址，OSPF 宣告互联地址 ! interface Ethernet0/3 no switchport ip vrf forwarding vpn_internet ip address 192.168.100.5 255.255.255.252 ! router ospf 200 vrf vpn_internet network 192.168.100.5 0.0.0.0 area 0 ! ! --- Core-SW2 配置，增加与 Faker_FW2 互联地址，OSPF 宣告互联地址 ! interface Ethernet0/3 no switchport ip vrf forwarding vpn_internet ip address 192.168.100.1 255.255.255.252 ! router ospf 200 vrf vpn_internet network 192.168.100.1 0.0.0.0 area 0 ! Step 2：修改 OBR-SW1 和 OBR-SW2 配置 ! --- OBR-SW1 配置，配置与 R1 互联地址，OSPF 宣告互联地址,去除原先的 NAT 相关配置和去除 OSPF 注入默认路由 ! interface Ethernet0/1 no switchport ip vrf forwarding vpn_internet ip address 20.20.20.1 255.255.255.252 ip ospf network point-to-point ! router ospf 200 vrf vpn_internet network 20.20.20.1 0.0.0.0 area 0 ! ! --- OBR-SW2 配置，配置与 R2 互联地址，OSPF 宣告互联地址,去除原先的 NAT 相关配置和去除 OSPF 注入默认路由 ! interface Ethernet0/0 no switchport ip vrf forwarding vpn_internet ip address 20.20.20.10 255.255.255.252 ip ospf network point-to-point ! router ospf 200 vrf vpn_internet network 20.20.20.10 0.0.0.0 area 0 ! Step 3：配置 R1 和 R2 ! --- R1 配置，配置互联地址，OSPF 宣告互联地址 ! --- 配置中包含了 NAT 配置，当两台防火墙宕机后仍可保持内网与互联网通信 ! ip vrf vpn_internet rd 20:20 route-target export 200:200 route-target import 200:200 ! interface Ethernet0/0 ip vrf forwarding vpn_internet ip address 200.1.1.1 255.255.255.248 ip nat outside ip virtual-reassembly in duplex auto ! interface Ethernet0/1 ip vrf forwarding vpn_internet ip address 20.20.20.2 255.255.255.252 ip nat inside ip virtual-reassembly in ip ospf network point-to-point duplex auto ! interface Ethernet0/2 ip vrf forwarding vpn_internet ip address 20.20.20.5 255.255.255.252 ip nat inside ip virtual-reassembly in ip ospf network point-to-point duplex auto ! router ospf 200 vrf vpn_internet router-id 111.111.111.111 network 20.20.20.2 0.0.0.0 area 0 network 20.20.20.5 0.0.0.0 area 0 network 200.1.1.1 0.0.0.0 area 0 default-information originate metric 11 metric-type 1 ! ip nat inside source list 10 interface Ethernet0/0 vrf vpn_internet overload ! ip route vrf vpn_internet 0.0.0.0 0.0.0.0 200.1.1.6 ! access-list 10 permit 192.168.50.0 0.0.0.255 ! ! --- R2 配置，配置互联地址，OSPF 宣告互联地址 ! --- 配置中包含了 NAT 配置，当两台防火墙宕机后仍可保持内网与互联网通信 ! interface Ethernet0/0 ip vrf forwarding vpn_internet ip address 20.20.20.9 255.255.255.252 ip nat inside ip virtual-reassembly in ip ospf network point-to-point duplex auto ! interface Ethernet0/1 ip vrf forwarding vpn_internet ip address 200.1.1.2 255.255.255.248 ip nat outside ip virtual-reassembly in duplex auto ! interface Ethernet0/2 ip vrf forwarding vpn_internet ip address 20.20.20.6 255.255.255.252 ip nat inside ip virtual-reassembly in ip ospf network point-to-point duplex auto ! router ospf 200 vrf vpn_internet router-id 222.222.222.222 network 20.20.20.6 0.0.0.0 area 0 network 20.20.20.9 0.0.0.0 area 0 network 200.1.1.2 0.0.0.0 area 0 default-information originate metric 10 metric-type 1 ! ip nat inside source list 10 interface Ethernet0/1 vrf vpn_internet overload ! ip route vrf vpn_internet 0.0.0.0 0.0.0.0 200.1.1.6 ! access-list 10 permit 192.168.50.0 0.0.0.255 ! Step 4：Internet 配置，Faker_FW1、Faker_FW2 基础配置 ! --- Internet 配置 ! interface Loopback0 ip address 1.2.3.4 255.255.255.255 ! interface Ethernet0/0 switchport access vlan 123 ! interface Vlan123 ip address 200.1.1.6 255.255.255.248 ! ! --- Faker_FW1 配置 ! --- 200.1.1.3 是 NAT 和 映射使用的公网地址 ! interface Loopback0 ip address 200.1.1.3 255.255.255.255 ! interface Ethernet0/0 ip address 192.168.100.6 255.255.255.252 ! ! --- Faker_FW2 配置 ! --- 200.1.1.4 是 NAT 和 映射使用的公网地址 ! interface Loopback0 ip address 200.1.1.4 255.255.255.255 ! interface Ethernet0/0 ip address 192.168.100.2 255.255.255.252 ! Part 2 配置完第一部分， Biz_B_PC 可以 ping 通 Internet 的 1.2.3.4，路径是： Core-SW2 -\u0026gt; OBR-SW2 -\u0026gt; R2，而从 Internet 开启 debug ip icmp 观察到：Internet 返回 reply 报文远端地址是 R2 的外网接口 IP 地址（200.1.1.2）。 根据原文中的描述，“ 防火墙与核心交换机为仅有一条物理线路。另外，由于增加了防火墙，因此将原先部署在出口路由器（拓扑中没有画出来）上的NAT下沉到防火墙上，由防火墙来部署源地址转换及静态映射。防火墙出公网的下一跳是OBR-SW交换机，两者使用私有IP地址三层对接。”\n也就是 NAT 和映射的功能交给了防火墙设备，然后防火墙出公网的下一跳是出口设备，联想到防火墙与出口路由器之间创建一条隧道，内网去往公网的 inside source IP 地址在防火墙上进行 NAT 后直接走隧道至出口路由器，再路由出去。我在两台防火墙上配置的环回接口地址就是转换用的。\nStep 1：配置 Faker_FW 与出口路由器建立 GRE 隧道 ! --- Faker_FW2 配置 ! --- NAT 和 映射使用的公网地址 interface Loopback0 ip address 200.1.1.4 255.255.255.255 ! --- 使用 e0/0 接口地址与 R2 的 e0/0 接口地址建立隧道，并配置 nat outside interface Tunnel0 ip address 1.1.1.2 255.255.255.252 ip nat outside ip virtual-reassembly in tunnel source 192.168.100.2 tunnel destination 20.20.20.9 ! --- 配置 nat inside interface Ethernet0/0 ip nat inside ! --- 配置 NAT overload 和 静态映射（将内网 Open_Server 的 SSH 端口映射到公网的 2222 端口） ip nat pool nat-pat 200.1.1.4 200.1.1.4 prefix-length 29 ip nat inside source list 10 pool nat-pat overload ip nat inside source static tcp 192.168.50.200 22 200.1.1.4 2222 extendable ! --- 配置默认路由和必要的静态路由 ip route 0.0.0.0 0.0.0.0 Tunnel0 ip route 20.20.20.8 255.255.255.252 192.168.100.1 ip route 192.168.50.0 255.255.255.0 192.168.100.1 ! --- 配置 inside source list access-list 10 permit 192.168.50.0 0.0.0.255 ! ! --- R2 配置 ! --- 使用 e0/0 接口地址与 Faker_FW2 的 e0/0 接口地址建立隧道 interface Tunnel0 ip vrf forwarding vpn_internet ip address 1.1.1.1 255.255.255.252 tunnel source 20.20.20.9 tunnel destination 192.168.100.2 tunnel vrf vpn_internet ! --- 配置需要走隧道的 VRF 静态路由，内网地址回程路由 track 跟踪 ip route vrf vpn_internet 192.168.50.0 255.255.255.0 Tunnel0 track 1 ip route vrf vpn_internet 200.1.1.4 255.255.255.255 Tunnel0 ! --- 配置 SLA 监测隧道对端的连通性 ip sla 1 icmp-echo 192.168.100.2 source-interface Ethernet0/0 vrf vpn_internet ip sla schedule 1 life forever start-time now ! track 1 ip sla 1 reachability ! ! --- Faker_FW1 配置 ! --- NAT 和 映射使用的公网地址 interface Loopback0 ip address 200.1.1.3 255.255.255.255 ! --- 使用 e0/0 接口地址与 R1 的 e0/1 接口地址建立隧道，并配置 nat outside interface Tunnel0 ip address 2.2.2.1 255.255.255.252 ip nat outside ip virtual-reassembly in tunnel source 192.168.100.6 tunnel destination 20.20.20.2 ! --- 配置 nat inside interface Ethernet0/0 ip nat inside ! --- 配置 NAT overload 和 静态映射 ip nat pool nat-pat 200.1.1.3 200.1.1.3 prefix-length 29 ip nat inside source list 10 pool nat-pat overload ip nat inside source static tcp 192.168.50.200 22 200.1.1.3 2222 extendable ! --- 配置默认路由和必要的静态路由 ip route 0.0.0.0 0.0.0.0 Tunnel0 ip route 20.20.20.0 255.255.255.252 192.168.100.5 ip route 192.168.50.0 255.255.255.0 192.168.100.5 ! ! --- 配置 inside source list access-list 10 permit 192.168.50.0 0.0.0.255 ! ! --- R1 配置 ! --- 使用 e0/1 接口地址与 Faker_FW2 的 e0/0 接口地址建立隧道 interface Tunnel0 ip vrf forwarding vpn_internet ip address 2.2.2.2 255.255.255.252 tunnel source 20.20.20.2 tunnel destination 192.168.100.6 tunnel vrf vpn_internet ! --- 配置需要走隧道的 VRF 静态路由，内网地址回程路由 track 跟踪 ip route vrf vpn_internet 192.168.50.0 255.255.255.0 Tunnel0 track 1 ip route vrf vpn_internet 200.1.1.3 255.255.255.255 Tunnel0 ! --- 配置 SLA 监测隧道对端的连通性 ip sla 1 icmp-echo 192.168.100.6 source-interface Ethernet0/1 vrf vpn_internet ip sla schedule 1 life forever start-time now ! track 1 ip sla 1 reachability ! Step 2：配置 Core-SW 静态路由使上网流量下一跳设备为防火墙 ! --- Core-SW1 配置 ! ip route vrf vpn_internet 0.0.0.0 0.0.0.0 192.168.100.6 track 1 ! ip sla 1 icmp-echo 192.168.100.6 source-interface Ethernet0/3 vrf vpn_internet frequency 5 ! track 1 ip sla 1 reachability ! ! --- Core-SW2 配置 ! ip route vrf vpn_internet 0.0.0.0 0.0.0.0 192.168.100.2 track 1 ! ip sla 1 icmp-echo 192.168.100.2 source-interface Ethernet0/3 vrf vpn_internet frequency 5 ! track 1 ip sla 1 reachability ! 完成配置到这个步骤，再观察内网到 Internet 的流量路径,： Core-SW2 -\u0026gt; Faker_FW2 -\u0026gt; R2，而从 Internet 开启 debug ip icmp 观察到：Internet 返回的 reply 报文远端地址是 Faker_FW2 配置的 NAT 转换地址（200.1.1.4）。\n配置 Open_Server 和测试公网 SSH 访问\n! --- Open_Server 配置 ! interface Ethernet0/0 ip address 192.168.50.200 255.255.255.0 ! ip route 0.0.0.0 0.0.0.0 192.168.50.254 ! ! --- 配置 SSH SERVICES ! ip domain name test.com ! crypto key generate rsa 1024 ! ip ssh version 2 ! line vty 0 4 login local transport input ssh ! username cisco password 0 cisco ! enable password cisco ! NAT 静态映射已在 【Part 2 \u0026ndash; Step 1】 中配置，将 Open_Server 的 22 端口映射到被访问公网 IP 地址的 2222 端口。测试结果如图：\nPart 3 网络冗余的设计\n本实验中探讨的是在网络中某段线路通断的情况下 Biz_B_PC 访问 Internet 环回接口地址 1.2.3.4 的路径切换。网络正常情况下，访问路径如下图：\n情况 1：（假设 Faker_FW1、Core-SW1、OBR-SW1、R1 设备都正常，线路也正常 ）\n当 Core-SW2 的 e0/3 状态为 DOWN；\n当 Core-SW2 的 e0/0 状态为 DOWN；\n当 OBR-SW2 的 e0/0 状态为 DOWN；\n当 Core-SW2 的 e1/3 链路协议 DOWN；\n以上四个条件有一个为真，即其中出现一个接口为 DOWN 状态， Core-SW2 降低 内网 VRRP 组的优先级， 同时将内网 VRRP 组切换至 Backup 状态，内网上网流量路径切换至 Core-SW1 进行转发。\n情况 2：（假设 Faker_FW2、 Core-SW2、OBR-SW2、R2 设备都正常，线路也正常 ）\n当 Core-SW1 的 e0/3 状态为 DOWN；\n当 Core-SW1 的 e0/0 状态为 DOWN；\n当 OBR-SW1 的 e0/1 状态为 DOWN；\n当 Core-SW1 的 e1/3 链路协议 DOWN；\n以上四个条件有一个为真，即其中出现一个接口为 DOWN 状态， Core-SW1 降低 内网 VRRP 组的优先级，不进行 VRRP 状态切换。\n情况 3：\n当 A 组条件任一条件为真和 B 组任一条件为真时，此时 Core-SW1 和 Core-SW2 都降低 VRRP 组优先级，由于设置了 Core-SW2 的 VRRP 优先级为 120 （ Core-SW1 默认优先级 100），两台设备同时降低相同的优先级 21 。此时的 VRRP Master 设备是 Core-SW2 ，上网流量路径：Core-SW2 -\u0026gt; OBR-SW2 -\u0026gt; R2 ，在 R2 上进行 NAT 最终出公网；当 B 组中的条件是：OBR-SW2 的 e0/0 状态为 DOWN，上网流量路径：Core-SW2 -\u0026gt; OBR-SW2 -\u0026gt; OBR-SW1-\u0026gt; R1，在 R1 上进行 NAT 最终出公网。\n分别手动 shutdown 以上任一条件中的接口（以 Core-SW2 的 e0/3 和 e1/3 为例），观察 Track 和 VRRP 状态的变化如下图：\n! --- Core-SW2 配置 ! ip sla 1 icmp-echo 192.168.100.2 source-interface Ethernet0/3 vrf vpn_internet frequency 5 ip sla 2 icmp-echo 10.10.10.9 source-interface Ethernet0/0.200 vrf vpn_internet frequency 5 ip sla 3 icmp-echo 20.20.20.10 source-interface Ethernet0/0.200 vrf vpn_internet frequency 5 ip sla group schedule 11 1-3 schedule-together start-time now life forever ! track 1 ip sla 1 ! track 2 ip sla 2 ! track 3 ip sla 3 ! track 4 interface Ethernet1/3 line-protocol ! track 11 list boolean and object 1 object 2 object 3 object 4 ! interface Vlan50 vrrp 50 priority 120 vrrp 50 track 11 decrement 21 ! ! --- Core-SW1 配置 ! ip sla 1 icmp-echo 192.168.100.6 source-interface Ethernet0/3 vrf vpn_internet frequency 5 ip sla 2 icmp-echo 10.10.10.1 source-interface Ethernet0/0.200 vrf vpn_internet frequency 5 ip sla 3 icmp-echo 20.20.20.1 source-interface Ethernet0/0.200 vrf vpn_internet frequency 5 ip sla group schedule 11 1-3 schedule-together start-time now life forever ! track 1 ip sla 1 reachability ! track 2 ip sla 2 reachability ! track 3 ip sla 3 reachability ! track 4 interface Ethernet1/3 line-protocol ! track 11 list boolean and object 1 object 2 object 3 object 4 ! interface Vlan50 vrrp 50 ip 192.168.50.254 vrrp 50 track 11 decrement 21 ! Ending 码完字了，还是那句话（挺耗时间的）。尽管还有不满意的地方，比如还可以再完善配置，添加更多的配置参数，考虑更多扩展需求想解决思路，但是这是个“无底洞”。 文中可能有些配置未提及或内容术语表述的不规范，请见谅。 配置存阿里云盘了，这是链接：[分享的文件 ] 欢迎“来电”来函探讨。 ","date":"2021-11-11T13:44:43Z","permalink":"https://kiraster.github.io/posts/62d0e673.html/","title":"No.003 Simple Case"},{"content":"来自红茶三杯的原文:【有点儿意思系列 04】哎哟喂停不下来了 当时看完 Case 的需求我是不想理会的，不就是 VRF 隔离么，我压根没往配置 ACL 这个方向去，其实看需求已经暗示的非常明显了，“始终”，“完全隔离” 等等字眼。再加上 VRRP（远离思科设备多年，不玩 HSRP 了，模拟器做不了堆叠啊） 的冗余方案。但是 “问题后续” 这段话引起了我的兴趣，还是从这个拓扑开始吧（其实我已经做完两个拓扑在码这篇文章的时候），话不多说，开干。\nStep 1：配置接入层交换机（SW5、SW6、SW7） 创建 VLAN ，上联 Core-SW 的端口配置 Trunk 放行 VLAN，把连接 PC 的端口划入对应 VLAN\n! -- SW5 配置， 根据需求业务 A 有多个 VLAN ，就敷衍一下配置VLAN10,VLAN20 ! vlan 10 vlan 20 ! interface Ethernet0/0 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk ! interface Ethernet0/1 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk ! interface Ethernet0/2 switchport access vlan 10 ! SW6、SW7 如法炮制即可。\nStep 2：配置 Core_SW1 和 Core_SW2 创建 VLAN10、VLAN20、VLAN50，创建 VRF 定义为 vpn_biz 和 vpn_internet\n! --- Core_SW1 和 Core_SW2 配置 ! vlan 10 vlan 20 vlan 50 ! ! --- 其实用不到 RD 和 RT ，在 MPLS-VPN 引入的时候才用，为了看起来好看点 ip vrf vpn_biz rd 10:10 route-target export 100:100 route-target import 100:100 ! ip vrf vpn_internet rd 20:20 route-target export 200:200 route-target import 200:200 ! 配置 Core-SW1 与 Core-SW2 之间的 Port-channel，配置 Core-SW 和下联 SW5、SW6、SW7 的 Trunk\n! --- Core_SW1 和 Core_SW2 配置 ! interface Port-channel1 switchport trunk allowed vlan 10,20,50 switchport trunk encapsulation dot1q switchport mode trunk ! interface Ethernet0/1 switchport trunk allowed vlan 10,20,50 switchport trunk encapsulation dot1q switchport mode trunk channel-group 1 mode active ! interface Ethernet0/2 switchport trunk allowed vlan 10,20,50 switchport trunk encapsulation dot1q switchport mode trunk channel-group 1 mode active ! interface Ethernet1/1 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk ! interface Ethernet1/2 switchport trunk allowed vlan 10,20 switchport trunk encapsulation dot1q switchport mode trunk ! interface Ethernet1/3 switchport trunk allowed vlan 50 switchport trunk encapsulation dot1q switchport mode trunk ! 创建 VLAN 接口并绑定 VRF，配置 IP 地址，配置 VRRP\n! --- Core_SW1 配置 ! interface Vlan10 ip vrf forwarding vpn_biz ip address 192.168.10.252 255.255.255.0 vrrp 10 ip 192.168.10.254 vrrp 10 priority 120 ! interface Vlan20 ip vrf forwarding vpn_biz ip address 192.168.20.252 255.255.255.0 vrrp 20 ip 192.168.20.254 vrrp 20 priority 120 ! interface Vlan50 ip vrf forwarding vpn_internet ip address 192.168.50.252 255.255.255.0 vrrp 50 ip 192.168.50.254 ! ! --- Core_SW2 配置 ! interface Vlan10 ip vrf forwarding vpn_biz ip address 192.168.10.253 255.255.255.0 vrrp 10 ip 192.168.10.254 ! interface Vlan20 ip vrf forwarding vpn_biz ip address 192.168.20.253 255.255.255.0 vrrp 20 ip 192.168.20.254 ! interface Vlan50 ip vrf forwarding vpn_internet ip address 192.168.50.253 255.255.255.0 vrrp 50 ip 192.168.50.254 vrrp 50 priority 120 ! 配置 Core-SW1 与 OBR-SW1 ，Core-SW2 与 OBR-SW2 互联的接口 IP 地址，并配置 OSPF 网络类型为点对点\n! --- Core_SW1 配置 ! interface Ethernet0/0.100 encapsulation dot1Q 100 ip vrf forwarding vpn_biz ip address 10.10.10.2 255.255.255.252 ip ospf network point-to-point ! interface Ethernet0/0.200 encapsulation dot1Q 200 ip vrf forwarding vpn_internet ip address 10.10.10.2 255.255.255.252 ip ospf network point-to-point ! ! --- Core_SW2 配置 ! interface Ethernet0/0.100 encapsulation dot1Q 100 ip vrf forwarding vpn_biz ip address 10.10.10.10 255.255.255.252 ip ospf network point-to-point ! interface Ethernet0/0.200 encapsulation dot1Q 200 ip vrf forwarding vpn_internet ip address 10.10.10.10 255.255.255.252 ip ospf network point-to-point ! Step 3：配置 OBR-SW1 和 OBR-SW2 配置创建 VRF 定义为 vpn_biz 和 vpn_internet，配置互联接口 IP 地址\n! --- OBR-SW1 配置 ! ip vrf vpn_biz rd 10:10 route-target export 100:100 route-target import 100:100 ! ip vrf vpn_internet rd 20:20 route-target export 200:200 route-target import 200:200 ! ! interface Ethernet0/0 no switchport ip vrf forwarding vpn_biz ip address 100.1.1.1 255.255.255.252 ip ospf network point-to-point ! interface Ethernet0/1 no switchport ip vrf forwarding vpn_internet ip address 200.1.1.5 255.255.255.252 ! interface Ethernet0/2.100 encapsulation dot1Q 100 ip vrf forwarding vpn_biz ip address 10.10.10.5 255.255.255.252 ip ospf network point-to-point ! interface Ethernet0/2.200 encapsulation dot1Q 200 ip vrf forwarding vpn_internet ip address 10.10.10.5 255.255.255.252 ip ospf network point-to-point ! interface Ethernet0/3.100 encapsulation dot1Q 100 ip vrf forwarding vpn_biz ip address 10.10.10.1 255.255.255.252 ip ospf network point-to-point ! interface Ethernet0/3.200 encapsulation dot1Q 200 ip vrf forwarding vpn_internet ip address 10.10.10.1 255.255.255.252 ip ospf network point-to-point ! ! --- OBR-SW2 配置 ! ip vrf vpn_biz rd 10:10 route-target export 100:100 route-target import 100:100 ! ip vrf vpn_internet rd 20:20 route-target export 200:200 route-target import 200:200 ! ! interface Ethernet0/0 no switchport ip vrf forwarding vpn_internet ip address 200.1.1.1 255.255.255.252 ! interface Ethernet0/1 no switchport ip vrf forwarding vpn_biz ip address 100.1.1.5 255.255.255.252 ip ospf network point-to-point ! interface Ethernet0/2.100 encapsulation dot1Q 100 ip vrf forwarding vpn_biz ip address 10.10.10.6 255.255.255.252 ip ospf network point-to-point ! interface Ethernet0/2.200 encapsulation dot1Q 200 ip vrf forwarding vpn_internet ip address 10.10.10.6 255.255.255.252 ip ospf network point-to-point ! interface Ethernet0/3.100 encapsulation dot1Q 100 ip vrf forwarding vpn_biz ip address 10.10.10.9 255.255.255.252 ip ospf network point-to-point ! interface Ethernet0/3.200 encapsulation dot1Q 200 ip vrf forwarding vpn_internet ip address 10.10.10.9 255.255.255.252 ip ospf network point-to-point ! Step 4：配置 Biz_A_Remote 配置创建 VRF 定义为 vpn_biz，配置互联接口 IP 地址，配置环回接口作为测试地址\n! --- Biz_A_Remote 配置 ! ip vrf vpn_biz rd 10:10 route-target export 100:100 route-target import 100:100 ! ! interface Loopback0 ip vrf forwarding vpn_biz ip address 192.168.30.111 255.255.255.255 ip ospf network point-to-point ! interface Ethernet0/0 no switchport ip vrf forwarding vpn_biz ip address 100.1.1.2 255.255.255.252 ip ospf network point-to-point ! interface Ethernet0/1 no switchport ip vrf forwarding vpn_biz ip address 100.1.1.6 255.255.255.252 ip ospf network point-to-point ! Step 5：配置 Internet 配置接口 IP 地址和环回接口即可，现实环境中，运营商的设备控制不了\n! --- Internet 配置 ! interface Loopback0 ip address 1.2.3.4 255.255.255.255 ! interface Ethernet0/0 ip address 200.1.1.2 255.255.255.252 duplex auto ! interface Ethernet0/1 ip address 200.1.1.6 255.255.255.252 duplex auto ! Step 6：配置 OSPF 为了简化配置过程，我全网使用 Area 0 ，生产环境中该划分区域的不要偷懒。\n! --- Core_SW1 配置 ! router ospf 100 vrf vpn_biz router-id 1.1.1.1 network 10.10.10.2 0.0.0.0 area 0 network 192.168.10.252 0.0.0.0 area 0 network 192.168.20.252 0.0.0.0 area 0 ! router ospf 200 vrf vpn_internet router-id 1.1.1.2 network 10.10.10.2 0.0.0.0 area 0 network 192.168.50.252 0.0.0.0 area 0 ! ! --- Core_SW2 配置 ! router ospf 100 vrf vpn_biz router-id 2.2.2.1 network 10.10.10.10 0.0.0.0 area 0 network 192.168.10.253 0.0.0.0 area 0 network 192.168.20.253 0.0.0.0 area 0 ! router ospf 200 vrf vpn_internet router-id 2.2.2.2 network 10.10.10.10 0.0.0.0 area 0 network 192.168.50.253 0.0.0.0 area 0 ! ! --- OBR-SW1 配置 ! router ospf 100 vrf vpn_biz router-id 11.11.11.1 network 10.10.10.1 0.0.0.0 area 0 network 10.10.10.5 0.0.0.0 area 0 network 100.1.1.1 0.0.0.0 area 0 ! router ospf 200 vrf vpn_internet router-id 11.11.11.2 network 10.10.10.1 0.0.0.0 area 0 network 10.10.10.5 0.0.0.0 area 0 default-information originate always ! ip route vrf vpn_internet 0.0.0.0 0.0.0.0 200.1.1.6 ! ! --- OBR-SW2 配置 ! router ospf 100 vrf vpn_biz router-id 22.22.22.1 network 10.10.10.6 0.0.0.0 area 0 network 10.10.10.9 0.0.0.0 area 0 network 100.1.1.5 0.0.0.0 area 0 ! router ospf 200 vrf vpn_internet router-id 22.22.22.2 network 10.10.10.6 0.0.0.0 area 0 network 10.10.10.9 0.0.0.0 area 0 default-information originate always ! ip route vrf vpn_internet 0.0.0.0 0.0.0.0 200.1.1.2 ! ! --- Biz_A_Remote 配置 ! router ospf 100 vrf vpn_biz router-id 3.3.3.1 network 100.1.1.2 0.0.0.0 area 0 network 100.1.1.6 0.0.0.0 area 0 network 192.168.30.111 0.0.0.0 area 0 ! Step 7：配置 NAT 其实在生产环境中用核心交换机作为互联网出口的情况不常见（我没见过），核心交换机的上行可能会有行为管理器、安全设备、路由器等设备，具体情况就要看客户单位对网络有什么样的需求和预算了。\n到这还有个问题，思科 CEF 和 NAT 貌似有冲突，去思科论坛看巴拉巴拉一大通大概是软件版本和硬件和处理器的类型等等问题，我这个是虚拟环境，不好判断是什么原因，放出看过的链接。各位如果知道是什么原因的请知会我，万分感谢。\nNAT not working with CEF Network Address Translation (NAT) FAQ NAT: CEF Punted packets 对于上述问题，经过试验可行的方法是在需要配置 NAT 参数的接口关闭路由高速缓存\n! --- OBR-SW1 配置 ! interface Ethernet0/1 ip nat outside no ip route-cache ! interface Ethernet0/2.200 ip nat inside no ip route-cache ! interface Ethernet0/3.200 ip nat inside no ip route-cache ! access-list 10 permit 192.168.50.0 0.0.0.255 ! ip nat inside source list 10 interface Ethernet0/1 overload ! ! --- OBR-SW2 配置 ! interface Ethernet0/0 ip nat outside no ip route-cache ! interface Ethernet0/2.200 ip nat inside no ip route-cache ! interface Ethernet0/3.200 ip nat inside no ip route-cache ! access-list 10 permit 192.168.50.0 0.0.0.255 ! ip nat inside source list 10 interface Ethernet0/0 overload ! Step 8：Test Biz_A_PC 和 Biz_B_PC 测试，发现两个网络之间不能互通。Biz_A_PC 能 ping 通 Biz_A_Remote 的环回地址 192.168.30.111；Biz_B_PC 能 ping 通 Internet 的环回地址 1.2.3.4 冗余测试\n由于这个拓扑实验和我写的下一篇文章有大量重叠部分，故放在下一篇文章中表述，本文中也没有添加配置。\n大概思路思路是通过 Track 关联降低 VRRP 的优先级使其成为 VRRP 的 Backup 组，流量路径自动切换至另一台设备。举个例子：当 Core-SW1 以出接口 e0/0 监测到与 OBR-SW1 直连线路不通或监测到 Biz_A_Remote 的 e0/0 不通(这是个 and 的关系，用编程语言的描述就是：条件 A 和条件 B 同时为 True，结果才为 True)，此时 SLA 监测状态为 Time-out ，在 VRRP 与 Track 联动下降低 VRRP 优先级使其成为 Backup 状态，Biz_A_PC 去往 Biz_A_Remote 的流量路径切换至 Core-SW2 ，途径：Core-SW2 \u0026ndash;\u0026gt; OBR-SW2 最终到达 Biz_A_Remote ，如图所示：\nEnding 总算码完了，其实还挺耗时间的写文章，但是对做拓扑实验做了梳理，其中还包含怎么清晰的表达我的思路和想表达的意思。 配置存阿里云盘了，这是链接：[分享的文件 ] 欢迎“来电”来函探讨。 下一篇文更有意思^_^，To be continued. ","date":"2021-11-10T11:37:50Z","permalink":"https://kiraster.github.io/posts/2da7a7a9.html/","title":"No.002 Simple Case"},{"content":"上文提到要 po 一篇文，现在发表一下自己的思路和配置。原文:【有点儿意思系列 06】一个看起来简单的案例 ，再上图。\nRequest and Solution PC1、PC2 分属 VLAN10 和 VLAN20；DHCP 服务器属 VLAN30 ，PC1 和 PC2 从 DHCP 服务器自动获取地址。\nS：根据上下文需求，确定 R3 和 R4 是热备组网。R3 和 R4 上配置子接口，配置 VRRP ；业务地址段和 DHCPServer 不在同一网段，所以需要在业务网段的网关上配置 DHCP 中继。实验中使用一台路由器模拟 DHCPServer，上面配置分配给 VLAN10,VLAN20 的地址池。\n! --- DHCPServer 配置 ! ip dhcp excluded-address 10.1.10.252 10.1.10.254 ip dhcp excluded-address 10.1.20.252 10.1.20.254 ! ip dhcp pool vlan10 network 10.1.10.0 255.255.255.0 default-router 10.1.10.254 ! ip dhcp pool vlan20 network 10.1.20.0 255.255.255.0 default-router 10.1.20.254 ! ! --- R3 配置 ! interface Ethernet0/1.10 encapsulation dot1Q 10 ip address 10.1.10.252 255.255.255.0 ip helper-address 10.1.30.1 vrrp 10 ip 10.1.10.254 vrrp 10 priority 120 vrrp 10 track 1 decrement 21 ! interface Ethernet0/1.20 encapsulation dot1Q 20 ip address 10.1.20.252 255.255.255.0 ip helper-address 10.1.30.1 vrrp 20 ip 10.1.20.254 ! interface Ethernet0/1.30 encapsulation dot1Q 30 ip address 10.1.30.252 255.255.255.0 vrrp 30 ip 10.1.30.254 vrrp 30 priority 120 vrrp 30 track 1 decrement 21 ! --- 网管地址网关 interface Ethernet0/1.99 encapsulation dot1Q 99 ip address 20.1.1.252 255.255.255.0 vrrp 99 ip 20.1.1.254 vrrp 99 priority 120 vrrp 99 track 1 decrement 21 ! SW4 是内网用户接入交换机（仅具二层功能），要求内网两个网段的用户均能 telnet 到该设备。\nS：配置 VLAN ，划分接口，配置 Trunk，配置默认网关和远程网管\n! --- SW4 配置 ! interface Ethernet0/0 switchport trunk allowed vlan 10,20,30,99 switchport trunk encapsulation dot1q switchport mode trunk ! interface Ethernet0/1 switchport trunk allowed vlan 10,20,30,99 switchport trunk encapsulation dot1q switchport mode trunk ! interface Ethernet1/1 switchport access vlan 10 ! interface Ethernet1/2 switchport access vlan 20 ! interface Ethernet1/3 switchport access vlan 30 ! --- 网管IP地址 interface Vlan99 ip address 20.1.1.10 255.255.255.0 ! -- 本想使用 ip default-gateway，但是不起作用，下面这条效果是一样 ip route 0.0.0.0 0.0.0.0 20.1.1.254 ! --- 网管配置 略 …… 由于 VPCS 不支持 Telnet ，此处使用 DHCPServer 做测试。\nR3 和 R4 作为内网用户的网关设备，互为热备份。\nS：这一条前面提过了，整个拓扑完整配置后边发，我打个包。\nR3、R4、SW2 及 SW3 上不允许出现任何手工配置的静态路由条目。\nS：好的，满足你。\nSW1 采用重发布的方式，将直连的服务器网段路由（如10.1.100.0/24）注入 EIGRP。\nS：好的，满足你。\n内网用户（PC1、PC2）访问核心服务器 Server（10.1.100.1）的数据流走向如下：\nPC1 访问 Server：R3 \u0026gt; R1 \u0026gt; SW2 \u0026gt; SW1 \u0026gt; Server；\nPC2 访问 Server：R4 \u0026gt; R2 \u0026gt; SW3 \u0026gt; SW1 \u0026gt; Server；\n沿途任何设备上到达 Server 的路由不允许出现负载均衡，且 PC 访问 Server 的流量往返路径一致。\nS：在配置完路由协议后，查看沿途设备路由表发现到达 Server 的路由出现负载均衡是正常现象，旁观大局，逐个处理就行。\n但是有一个现象我不知是模拟器的 Bug 还是镜像的问题，查看 SW3 和 SW4 ，总有一台设备到达 Server 的路由是这样的：\nD EX 10.1.100.0/24 [170/307200] 另一台学习到去往 Server 网段的路由是从上面这台学习到的外部路由，重启两台交换机的 OSPF 进程，这条路由又可能显示在第二台了。我又用 GNS3 做了测试，也是这种情况，按理说加载到路由表的不应该是管理距离为 110 的 OSPF 外部路由么？\n我思考了一番，可能是 OSPF 进程启动先后顺序的问题，先启动的交换机 OSPF 进程加载了 EIGRP 外部路由，而后启动的交换机 OSPF 进程学习到 EIGRP 外部路由和 OSPF 外部路由，按照规则选择了管理距离值较小的 OSPF 路由条目。\nPC1 访问 Server：R3 \u0026gt; R1 \u0026gt; SW2 \u0026gt; SW1 \u0026gt; Server；\n! --- R1 配置，修改 OSPF 入向接口的 cost ，使从 e0/0 收到去往10.1.100.0网段的路由更优 ! interface Ethernet0/1 ip ospf cost 11 ! ! --- SW2 配置, 在 OSPF 进程下过滤入方向收到的去往 10.1.100.0 网段的条目，为什么这么做呢，从后面需求看，断掉 SW2/SW3 与 SW1 的线路之一，去往 Server的流量就不需要经过断掉线路这台交换机，而且断掉线路还要流量经过这台设备，走了个直角线路，并不是最优路径 ! router ospf 200 distribute-list 10 in ! access-list 10 deny 10.1.100.0 0.0.0.255 access-list 10 permit any ! PC2 访问 Server ：R4 \u0026gt; R2 \u0026gt; SW3 \u0026gt; SW1 \u0026gt; Server；\n思路和 PC1 访问 Server 一样，逆推一下即可，不占用篇幅了（懒得码字）\nPC1 访问 Server 回程路径： Server\u0026gt; SW1 \u0026gt; SW2 \u0026gt; R1 \u0026gt;R3 ；\n! --- SW1 配置，观察到去往内网网段的路由条目是负载均衡，配置偏移列表和指定入向接口，增加希望不要出现在路由表里的条目 metric 偏移，影响路由表加载 ! router eigrp 100 offset-list 20 in 1024 Ethernet0/2 offset-list 10 in 1024 Ethernet0/1 ! access-list 10 permit 10.1.20.0 0.0.0.255 access-list 20 permit 10.1.10.0 0.0.0.255 ! ! --- SW2 配置，修改 e0/3 接口 cost，使得从该接口学习到去往 10.1.10.0 和 10.1.20.0 网段的路由不是最优路由 ! interface Ethernet0/3 ip ospf cost 11 ! PC2 访问 Server 回程路径： Server\u0026gt; SW1 \u0026gt; SW3 \u0026gt; R2 \u0026gt;R3 ；\n思路和 PC1 访问 Server 回程路径一样，逆推一下即可，不占用篇幅了（懒得码字）\n要求 SW2 和 SW3 访问 Server 都走最优路径，即 SW2 前往 Server 的数据流走 SW1，SW3 前往 Server 的数据流也直接到 SW1。\nS：这一条也佐证了我在上面说到的流量走直角路径不是最优的想法。说的通俗一点就是：SW1 上的有流量要去往 Server 只能从 e0/1 出去，不走直角。即使 SW1 上的出口线路故障了也不走，走的路径是：拓扑上的对角线。退一步来说当 SW2/SW3 的出口线路故障了，下联的 R1/R2 不会从 SW2/SW3 学习到去往 Server 的路由条目。SW2 也是这个道理。\nSW1 上关于 10.1.10.0/24 和 10.1.20.0/24 的路由不应该出现等价负载均衡，正常情况下访问 10.0/24 网段的数据流走 SW2，访问2 0.0/24 网段的数据流走 SW3。\nS：在 PC1/PC2 访问 Server 的回程路径时候已经解决这一条，不占用篇幅了（懒得码字）。\n当 SW1-SW2 之间的链路 DOWN 掉时，PC1 访问 Server 的数据流切换至路径： R3\u0026gt;R1\u0026gt;SW3\u0026gt;SW1\u0026gt;Server，且往返路径一致。而当 SW1-SW3 之间的链路 DOWN 掉时，PC2 应该仍然能够访问 Server，情况类似。\nS：正如我前面所说的：当 SW2/SW3 的出口线路故障了，下联的 R1/R2 也不会从 SW2/SW3 学习到去往 Server 的路由条目。此时去往 Server 的流量已经在 R1/R2 通过走对角线的路径来到 SW3/SW2 上。\n重点解决回程的路径。因为前面已经修改了 SW2 和 SW3 上的 e0/3 的 cost ，这就使得当 SW1-SW2 之间的链路 DOWN 掉或者 SW1-SW3 之间的链路 DOWN 掉时，SW3/SW2 去往 10.1.10.0 和 10.1.20.0 网段都是直线往下经过 R2 或者 R1 回程到业务网段，并不符合需求。需要添加策略路由 PBR 实现往返路径一致。\n! --- SW2 配置，配置匹配去往 10.1.20.0 网段的 ACL，配置 route-map 匹配 ACL ，设置去往10.1.20.0 网段的下一跳地址，配置 SLA 监测，最后在 e0/1 调用 ! access-list 101 permit ip any 10.1.20.0 0.0.0.255 ! route-map pbr_20.0 permit 10 match ip address 101 set ip next-hop verify-availability 10.1.254.105 1 track 1 ! ip sla 1 icmp-echo 10.1.254.105 source-interface Ethernet0/3 frequency 5 ! 设置 delay 是为了及时观察现象，实际生产环境不需这么做 track 1 ip sla 1 reachability delay down 5 up 3 ! ip sla schedule 1 life forever start-time now ! interface Ethernet0/1 ip policy route-map pbr_20.0 ! 当SW1-SW3之间的链路DOWN掉时，PC2应该仍然能够访问Server，情况类似。解决思路和上面一样，懒-码-字。\n当 SW2-R1 之间的链路 DOWN 掉时，PC1 访问 Server 的数据流切换至路径：R3\u0026gt;R1\u0026gt;SW3\u0026gt;SW1\u0026gt;Server，此时不要求流量往返路径完全一致。当 SW3-R2 之间的链路 DOWN 掉时，PC2 应该仍能够访问到 Server。\nS：当 SW2-R1 之间的链路 DOWN 掉时，R1 是能够从 SW3 学习到去往 Server 的路由的，只是回程的时候路径是： Server\u0026gt; SW1 \u0026gt; SW2 \u0026gt; R2 \u0026gt;R4 ，不要求流量往返路径完全一致，本条需求已经自动实现了。当SW3-R2之间的链路DOWN掉时同理。\nR3、R4 任意一台路由器与内网交换机直连链路 DOWN 掉，不影响内网 PC 访问外网。\nS：配置的 VRRP 可以实现。\n【可选】若 R3 的出口 DOWN 或 R1 的两条上联链路都 DOWN，以上两种情况，R3 都能检测到，要求此两种情况发生时内网用户访问 SERVER 都不受影响，R4 同理。\nS：R3 的出口 DOWN 或 R1 的两条上联链路都 DOWN，明显要求配置 SLA 特性，我的做法是在 SW3 和 SW2 上配置一个环回地址，R3/R4 检测这个地址的可达性。举例：当 R3 配置了监测 SW3 的环回地址可达性，无论是 R3 的出口 DOWN 或 R1 的两条上联链路都 DOWN 其中一个条件达成，都会导致监测失败不可达，再在相应的内网子接口下配置 Track 联动降低 VRRP 组的优先级，使其成为 Backup 状态，另一台路由器成为 Master ，此时内网用户访问 Server 路径自动切换不受影响（其实还是会掉包的，取决于你配置的监测周期，抢占延时，生成树协议）。R4 同理。\n（11月10日发现，可以使用 Track list 的方式实现）\n! --- R3 配置 interface Ethernet0/1.10 vrrp 10 track 1 decrement 21 ! ip sla 1 icmp-echo 33.33.33.33 source-interface Ethernet0/0 frequency 5 ip sla schedule 1 life forever start-time now ! track 1 ip sla 1 reachability delay down 5 up 3 ! Ending 配置存阿里云盘了，这是链接：[分享的文件 ] 欢迎“来电”来函探讨。 ","date":"2021-11-07T00:31:11Z","permalink":"https://kiraster.github.io/posts/8ac5ac4a.html/","title":"No.001 Simple Case"},{"content":"PNETLab (Packet Network Emulator Tool Lab)is a platform that allows you to download and share labs with the community. 这句话摘抄自官网 介绍，这是链接：What is PNETLab? 上网冲浪发现这个大宝贝，看完介绍心理痒痒就搞一搞，有个帖子介绍挺好，原文：【原创】超级推荐：网工必备模拟器PNETLab，附下载链接，全球第一篇最优质的帖子 。\nExperience 不能说和 EVE-NG “一模一样”，我对比过（可能是使用方法不规范，也可能是其他原因），之前用EVE-NG可以跑起整张 CCIE V5 H1 的拓扑（电脑的 CPU 和 RAM 未变动，系统换 WIN10 ，加了固态硬盘做系统盘），现在装了 PNETLab 只能跑 31台 还是 32 台设备（原谅老年人健忘）。\nHardware requirements 看了官网文档，我这古董 AMD CPU 不在硬件支持范围内（是不是这个原因跑不了那么多设备呢？），当看到这些说明的时候，我差点就把正在下载中的文件给取消了。最后安上了，我若安不好，当天便可以多睡几小时。\nPC/Laptop HW requirements CPU：Intel i5/i7 (4 Logical processors), Enabled Intel virtualization in BIOS RAM：8Gb HDD Space：40Gb Network：LAN/WLAN ---------------------------------------------------------------------------------------------------------- PNETLab Virtual machine requirements CPU：4/1 (Number of processors/Number of cores per processor) Enabled Intel VT-x/EPT virtualization engine RAM：6Gb or more HDD：40Gb or more Network：VMware NAT or Bridged network adapter Unsupported hardware and systems The following are currently not supported: • AMD CPU based PC or Server • VirtualBox virtualization • Citrix XenServer • Microsoft HyperV • Ubuntu 17.X or 18.x as platform PNETLab Supported Images 查看支持的镜像，还是挺多的，不知为何 H3C 不在列表里，看B站 UP 主视频把 H3C 的防火墙设备弄进去了，不过我挺少用 QEMU 的镜像（太吃内存了），Huawei/H3C 的实验还是用官方的模拟器。\n还有个事，就是现在 PNETLab Store 商店下载Lab不附带一起下载镜像了，要自己找镜像上传到目录，还好可以找之前 EVE-NG 的资源上传。\nLanguage \u0026amp; 汉化 看到 B 站视频有 UP 主用了汉化，我就还好，看这些英文不头疼。其实也简单，就是把里边的英文包复制一份到电脑，再打开里面的 JSON 文件，里面有两列，左边属性，右边 Web 界面显示的字符，把右边填上中文保存上传到 Chinese 的文件夹，再切换一下即可。\nHow to console to devices 有两种方式，跟 EVE-NG 不知道是哪个版本的方式一样。\n使用 HTML Console，在拓扑界面弹出一个小窗的方式，我个人就不太喜欢这么搞，不舒畅。 使用 Default Console，调用系统自带的默认程序打开，例如把 CRT 软件设置成系统默认，跟 EVE-NG 的 EVE-NG-Win-Client-Pack 这玩意儿“一模一样”。 Ending 欢乐的时光特别短，又到时候说88，还有很多需要探索的地方，不谈了，开饭。\n接下来我将用 PNETLab 搞一个实验，来自大佬红茶三杯 博客的原文:【有点儿意思系列 06】一个看起来简单的案例 ，弄完了写一篇文 po 出来，先看图。\n下一篇文链接： No.001 Simple Case - Kir\u0026rsquo;s Blog ","date":"2021-11-05T18:43:23Z","permalink":"https://kiraster.github.io/posts/13f1a9a7.html/","title":"PNETLab试用"},{"content":"Ti10 结束了，LGD 再次倒在了总决赛\n相信包括我在内的许多人都坚信今年的总冠军是 LGD，但是……\n回忆起之前，一到周末约上两条友肝这游戏到天亮的时光，就很快乐\n我已经基本不玩这游戏，因为这游戏太耗费时间了，成了云玩家\n赛事结束后看到微博上各种“哀嚎”，“愤怒”，“”谩骂“，“惋惜”，“揣测”……\n尽管各种情绪，但理智的思考后只有一句话：技不如人，甘拜下风\n你也别说什么五年了，该 CN DOTA 举一次盾了\n巧了，独联体区的玩家也是这么这么认为的\n最终该区的战队在第一次夺冠后隔了十年才再次夺冠\n……\n只希望有勇敢的追梦人继续追逐他们的梦想\n","date":"2021-10-18T15:44:23Z","permalink":"https://kiraster.github.io/posts/fae4c6b8.html/","title":"TI10"},{"content":"iNode 客户端设置 windows 端配置—网络中心添加 ","date":"2021-10-16T11:49:23Z","permalink":"https://kiraster.github.io/posts/ab889e59.html/","title":"H3C_连接L2TP的客户端设置(图片)"},{"content":"之前做了一个割接网络的项目，在过程中要测试网点和中心的几百条专线线路，心想要逐个 ping 测试个对端IP地址，在时间上，操作上根本不可行，整个割接时间有限定，又是在凌晨时间……限制比较多，刚好那段时间在玩 Python，就想着能不能做个脚本自己跑，最后实现了，而且生成 Excel 表格统计测试成功和测试失败的信息。\n操作 记录会话日志（log session） 设置会话属性参数（可单独设置串口会话、telnet 会话和 ssh 会话，右键会话属性修改即可） 设置 log file 参数（设置保存路径，选项，日志的开头和结束位置插入信息（脚本用于判断结束的位置）） 制作端口和 IP 信息的 txt 文件 说明：第一列为网络中心路由器接口，第二列为对端网点设备的 IP 地址（接口和IP我已经处理过了，假的，真的不会贴出来）\n编写 ping 测试 Python 脚本 脚本内容 # $language = \u0026#34;python\u0026#34; # $interface = \u0026#34;1.0\u0026#34; import os import SecureCRT def main(): crt.Screen.Synchronous = True with open(\u0026#39;F:/SR66_Test/SR66.txt\u0026#39;, \u0026#39;r\u0026#39;) as rfile: ping_list = rfile.readlines() # 遍历SR66文件里的每一行，把第1列赋值给 port_info，第二列赋值给 ping_ip for ping_info in ping_list: port_info = ping_info.split()[0] ping_ip = ping_info.split()[1] crt.Screen.Send(\u0026#39;\\r\u0026#39;) # 在路由器命令行界面输入#+port_info并回车，例如：#GE4/1/0.111 crt.Screen.Send(\u0026#39;#\u0026#39; + port_info + \u0026#39;\\r\u0026#39;) # 在路由器命令行界面输入ping -c + ping_ip并回车，例如：ping -c 3 100.10.142.30 crt.Screen.Send(\u0026#39;ping -c 3 \u0026#39; + ping_ip + \u0026#39;\\r\u0026#39;) main() SceureCRT 登陆路由器，点击 “Script” –\u0026gt; “Run” 选择脚本，运行脚本。运行时间取决于线路的正常连通和测试的数量 编写结果统计 Python 脚本 处理 ping 测试后的 log session 日志记录 提取 ping 测试的结果信息（会同时生成一个 result.txt 的文件） 对 result.txt 文件的信息进行处理生成 Excel 表格 脚本内容： # Author：KIRASTER # Time：2021/x/x x:x # Description： import os import re import xlsxwriter as xw from xlsxwriter import Workbook filename = \u0026#39;F:/SR66_Test/xxx.log\u0026#39; resultfilename = \u0026#39;F:/SR66_Test/result.txt\u0026#39; if os.path.exists(resultfilename): os.remove(resultfilename) result_txt = open(\u0026#39;F:/SR66_Test/result.txt\u0026#39;, \u0026#39;a\u0026#39;) with open(filename, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf8\u0026#39;) as file_to_read: while True: lines = file_to_read.readline() if \u0026#34;GE\u0026#34; in lines: # # 提取GE开头的行，也就是端口和IP信息的txt文件里的第一列，并且换行符替换制表符 result_line1 = re.sub(r\u0026#39;^.*?#_\u0026#39;, \u0026#39;\u0026#39;, lines) result_line1 = result_line1.replace(\u0026#34;\\n\u0026#34;, \u0026#34;\\t\u0026#34;) print(result_line1) result_txt.write(result_line1) if \u0026#34;--- Ping statistics\u0026#34; in lines: # 提取包含“--- Ping statistics”这一行，替换成“ping + IP”，并且换行符替换制表符 result_line2 = re.sub(r\u0026#39;^.*?for\u0026#39;, \u0026#39;ping\u0026#39;, lines) result_line2 = result_line2.replace(\u0026#34;-\u0026#34;, \u0026#34;\u0026#34;) result_line2 = result_line2.replace(\u0026#34;\\n\u0026#34;, \u0026#34;\\t\u0026#34;) print(result_line2) result_txt.write(result_line2) lines = next(file_to_read) # 提取下一行，替换成“result: 0.0% packet loss” result_line3 = re.sub(r\u0026#39;^.*?received,\u0026#39;, \u0026#39;result:\u0026#39;, lines) print(result_line3) result_txt.write(result_line3) result_txt.flush() if \u0026#34;结束记录时间\u0026#34; in lines: # 遍历到“结束记录时间”这行，中断循环 break workbook: Workbook = xw.Workbook(\u0026#39;F:/SR66_Test/result.xlsx\u0026#39;) sheet0 = workbook.add_worksheet(\u0026#39;测试结果\u0026#39;) centered = workbook.add_format({\u0026#39;align\u0026#39;: \u0026#39;center\u0026#39;}) red_style = workbook.add_format({ \u0026#34;fg_color\u0026#34;: \u0026#34;red\u0026#34;,\u0026#39;align\u0026#39;: \u0026#39;center\u0026#39;,\u0026#39;bold\u0026#39;: True}) green_style = workbook.add_format({ \u0026#34;fg_color\u0026#34;: \u0026#34;green\u0026#34;,\u0026#39;align\u0026#39;: \u0026#39;center\u0026#39;,\u0026#39;bold\u0026#39;: True}) blue_style = workbook.add_format({ \u0026#34;fg_color\u0026#34;: \u0026#34;#8DB4E2\u0026#34;,\u0026#39;align\u0026#39;: \u0026#39;center\u0026#39;}) sheet0.write(0, 0, \u0026#39;检测端口\u0026#39;, blue_style) sheet0.write(0, 1, \u0026#39;对端IP地址\u0026#39;, blue_style) sheet0.write(0, 2, \u0026#39;返回结果\u0026#39;, blue_style) sheet0.write(0, 3, \u0026#39;检测结果\u0026#39;, blue_style) sheet0.write(0, 4, \u0026#39;线路正常\u0026#39;, green_style) # sheet0.write(0, 5, \u0026#39;\u0026#39;, green_style) sheet0.write(0, 6, \u0026#39;检测失败\u0026#39;, red_style) # sheet0.write(0, 7, \u0026#39;\u0026#39;, red_style) sheet0.set_column(0, 0, width=20) sheet0.set_column(1, 1, width=24) sheet0.set_column(2, 2, width=28) sheet0.set_column(3, 3, width=12.38) sheet0.set_column(4, 4, width=12.38) sheet0.set_column(5, 5, width=5) sheet0.set_column(6, 6, width=12.38) sheet0.set_column(7, 7, width=5) sheet0.freeze_panes(1, 8, top_row=1) # sheet0.filter_column_list(\u0026#34;D\u0026#34;, [\u0026#39;正常\u0026#39;, \u0026#39;检测失败\u0026#39;]) sheet0.filter_column_list(3, \u0026#39;x = \u0026#34;正常\u0026#34;\u0026#39;) sheet0.write_formula(\u0026#39;D2\u0026#39;, \u0026#39;{=IF(ISNUMBER(FIND(\u0026#34;100.0%\u0026#34;,C2)),\u0026#34;检测失败\u0026#34;,IF(ISNUMBER(FIND(\u0026#34;0.0%\u0026#34;,C2)),\u0026#34;正常\u0026#34;))}\u0026#39;) sheet0.write_formula(\u0026#39;F1\u0026#39;, \u0026#39;{=SUMPRODUCT((D2:D999=\u0026#34;正常\u0026#34;)*1)}\u0026#39;) sheet0.write_formula(\u0026#39;H1\u0026#39;, \u0026#39;{=SUMPRODUCT((D2:D999=\u0026#34;检测失败\u0026#34;)*1)}\u0026#39;) with open(\u0026#39;D:/SR6608_Test/result.txt\u0026#39;) as file_object: lines = file_object.readlines() file_object.close() i = 1 x = 1 for xls_line in lines: if \u0026#34;GE\u0026#34; in xls_line: xls_line = xls_line.strip(\u0026#39;\\n\u0026#39;) xls_line = xls_line.split(\u0026#39;\\t\u0026#39;) print(xls_line) port_info = xls_line[0] ip_addr = xls_line[1] return_info = xls_line[2] sheet0.write(i, 0, port_info, ) sheet0.write(i, 1, ip_addr, ) sheet0.write(i, 2, return_info, ) # sheet0.write_formula(x, 3, \u0026#39;=IF(ISNUMBER(FIND(\u0026#34;100.0%\u0026#34;,C2)),\u0026#34;正常\u0026#34;,IF(ISNUMBER(FIND(\u0026#34;0.0%\u0026#34;,C2)),\u0026#34;检测失败\u0026#34;))\u0026#39;) i += 1 x += 1 workbook.close() ping 测试的 log session 文件 生成的 result.txt 文件 生成的 Exce 表格 ","date":"2021-10-16T01:17:37Z","permalink":"https://kiraster.github.io/posts/60e83b3d.html/","title":"H3C_线路测试脚本"},{"content":"自己日常操作的一些小命令和插件。\nbat启动 hexo 本地服务 前提条件：已完成博客搭建。\n@echo off start D:\\Program\u0026#34; \u0026#34;Files\\Git\\git-bash.exe --cd=D:/blog/blog -c \u0026#34;hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo s\u0026#34; 新建后缀为bat的脚本文件 复制以上命令粘贴（注意修改路径 ），保存 双击此脚本运行的结果相当于在你的 blog 路径下右键 “Git Bash Here” 并输入 “hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo s” 运行. bat 推送至 github 前提条件：已完成博客搭建和推送github的设置。\n@echo off start D:\\Program\u0026#34; \u0026#34;Files\\Git\\git-bash.exe --cd=D:/blog3/blog -c \u0026#34;hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d \u0026amp;\u0026amp; hexo s\u0026#34; 新建后缀为bat的脚本文件 复制以上命令粘贴（注意修改路径 ），保存 双击此脚本运行的结果相当于在你的blog路径下右键 “Git Bash Here” 并输入 “hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d \u0026amp;\u0026amp; hexo s” 运行（如果只输入 “hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d “ ，当命令执行完后会自动关闭命令窗口，无法得知推送是否成功，所以后边加”hexo s“，运行完成后确认推送成功，Ctrl+C结束即可） 文章页图片放大（灯箱效果） 相关链接：https://github.com/fancyapps/fancybox\n添加 js/css 到网站代码中，每个博客的存放代码的文件和位置可能不一样，有的是在 styl 文件中，有的可能在 EJS/PUG/SWIG 文件中，我使用的模版是在主题目录下的 _config.yml 文件中 css: - https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css js: - https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js - https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js 在 .md 文件里插入图片，添加代码 \u0026lt;a data-fancybox=\u0026#34;gallery\u0026#34; href=\u0026#34;big_1.jpg\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;small_1.jpg\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; # 其中 big_1.jpg 和 small_1.jpg 可以是一致的，可以设置 width 参数来设置网页图片显示为小图。例如: \u0026lt;a data-fancybox=\u0026#34;gallery\u0026#34; href=\u0026#34;https://i.loli.net/xxxxx.jpg\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://i.loli.net/xxxxx.jpg\u0026#34; width=\u0026#34;61.8%\u0026#34; /\u0026gt; \u0026lt;/a\u0026gt; 404 页面 相关链接：https://www.qq.com/404/\n虽然 blog 网站简单，访问出现 404 页面机会极少（除非在网址栏乱输入），但是还是操作一下。\n具体设置点上面网址。\n添加文章链接 abbrlink 安装插件 npm install hexo-abbrlink --save npm install eslint@4.x babel-eslint@8 --save-dev 修改网站根目录配置文件 _config_yml permalink: posts/:abbrlink.html abbrlink: alg: crc32 rep: hex alg 和 rep 不同组合生成的链接 crc16 \u0026amp; hex https://xx.github.io/posts/1234.html crc16 \u0026amp; dec https://xx.github.io/posts/12345.html crc32 \u0026amp; hex https://xx.github.io/posts/12345678.html crc32 \u0026amp; dec https://xx.github.io/posts/123456789a.html hexo g 生成后，md 文件的 Front-matter 增加 abbrlink 属性，值为生成的 ID 链接，发布文章后文章链接不随改变文章内容而改变。\n","date":"2021-10-14T23:03:52Z","permalink":"https://kiraster.github.io/posts/c1906682.html/","title":"我的一些blog常用小操作"},{"content":"我为什么要启用一个新 hexo 主题呢，没有什么特别的原因，单纯的想玩玩。而为什么要迁移到 GitHub 呢，这就故事很多了，下文详说。换主题换站点搞了好几天，对于不是专业搞代码的我确实折腾，不过乐在其中。看着浏览器历史里拉不到底的搜索记录和自己提的 To-Do List，我真是自己玩自己。\n感谢 先感谢上一个主题的作者（三·钻 TriDiamond ）让我搭了博客，再感谢现在这个主题（Le Phower\u0026rsquo;s ）的作者。\n关于 GiteePages 大概是四五月份，GiteePages上突然出了个公告说维护，一停就到八九月份。九月份我再去点开启服务，好家伙直接提示页面违规？我按提示去检查页面是 category 页面违规，what？ 一个文章分类页提示违规？自问没有什么敏感词在里头，页面加起来就几十个汉字，代码违规我就不懂了。我直接去生成的静态 html 页面把代码清空再发布就可以了，wtf？气不过的我直接关了服务晾了几个星期，后来有点空闲时间我开始折腾起来，就是弄现在的这个博客主题。直到我把内容制作好，再次启用 Pages 服务并截几张图做留念，就把博客仓库的文件清空了，当我把现在的代码上传到 Gitee 后点击启动服务，弹出实名认证，姓名，身份证正反面，手持身份证正反面，而没清空前可以发布成功，真是双标，你要是一视同仁我敬重你。我去查了邮箱没有收到任何通知，包括 Pages 服务停用的事情，这种办事方式我个人是不认同的，不尊重用户。随即我个人做出了抵制的举动，我清空了所有仓库（虽然也没什么太多内容），签名留下一句话，就去找注销账户的页面，再次震惊了我，流程（见图片），按照格式写封邮件\u0026ndash;加 QQ 群联系管理员\u0026ndash;再人工审核三五天，真 QQ 办公……想想算了，我嫌麻烦，还要耗费时间打交道。 Obsidian 主题页面留念 ","date":"2021-10-12T01:39:36Z","permalink":"https://kiraster.github.io/posts/f2af2fdc.html/","title":"关于新主题博客"},{"content":"“大梦初醒 荒唐了一生” \u0026ndash;马頔\n刚开始听到这首歌是一个混实习的关系户女孩，QQ 资料界面一直挂着这首歌\n当时只是觉得很平的一首歌，跟《董小姐》《成都》一个路数\n现在再听和看视频里原唱在舞台上一人一吉他的表演，才发现我自己大意了\n带感情的演唱，好像作者在表达不为人知的情感\n每个人听到一首歌，可能都会有自己的看法，或者没有看法只觉得：爽\n这是主观上的看法，都要尊重与自己不同观点的人的看法，你可以不同意，没必要去勉强、要求\n特意去翻了一下抖音上隐私设置里的黑名单：484\n有时候看短视频，看到讨厌的就不辞麻烦的点点点拉黑了\n有时候为了不误判还点进主页多看几个视频，确认无误后才动手\n你要问我为什么拉黑，我回答不喜欢\n你要问我什么原因，同上\n不解释，我自己心里有一些抽象的名词\n原则、底线、信仰、情感……\n……\n","date":"2021-10-08T00:24:02Z","permalink":"https://kiraster.github.io/posts/2703fb4a.html/","title":"大梦初醒 荒唐了一生"},{"content":"准备工作\n下载升级所需要的两个文件：\nS5500EI-BTM-721.btm（新版本 Bootrom 程序）\n名称: S5500EI-BTM-721.btm 大小: 483732 字节 (472 KiB) CRC32: 4B9436E9 CRC64: 928CB6227DE9AF69 SHA256: C0EDB2FA02C5F8804E8D983F4DD197F1D321C21C317ED5BB10BF002CB4973CE8 SHA1: F8B345BC2012C8183CE01F092E4181FC15495867 BLAKE2sp: 6A5E362D8A4DA8FA74B6A9F4568627FA07C53126DB67F5FF287C9BE893C33502 S5500EI-CMW520-R2222P12.bin（新版本主机软件）\n名称: S5500EI-CMW520-R2222P12.bin 大小: 14386411 字节 (13 MiB) CRC32: D2E2387E CRC64: 5806015C822E9D46 SHA256: 33F9948CF29DEEE01C2449DEC499E35AC1721331F6E73644526F9D2BF9B6C2E0 SHA1: 8D50B9BAD0E80F6DCE14E3C941D3E74CA8D72B96 BLAKE2sp: 7510F4902CE03E9ABF44E480C4DF642782818AAF9F400E8E8716AFC7F18C6BE2 登陆查看版本信息和 Flash 空间 查看当前主机软件版本和 Bootrom 版本 \u0026lt;XX-XX-S5500-1\u0026gt;display version H3C Comware Platform Software Comware Software, Version 5.20, Release 2202 Copyright (c) 2004-2010 Hangzhou H3C Tech. Co., Ltd. All rights reserved. H3C S5500-52C-EI uptime is 5 weeks, 3 days, 20 hours, 9 minutes H3C S5500-52C-EI with 1 Processor 256M bytes SDRAM 32768K bytes Flash Memory Hardware Version is REV.C CPLD Version is 002 Bootrom Version is 609 [SubSlot 0] 48GE+4SFP Hardware Version is REV.C 查看 Flash 剩余空间 \u0026lt;XX-XX-S5500-1\u0026gt;dir Directory of flash:/ 0 -rw- 10436470 Aug 11 2010 15:04:09 s5500ei-cmw520-r2202.bin 1 -rw- 17880 Sep 07 2021 15:25:30 startup.cfg 31496 KB total (21277 KB free) 确保Flash有14.1M以上剩余空间（新版本软件共14.1M）\n通过 FTP 实现远程加载文件 如 图 所示，FTP Server 与配置计算机是同一台计算机。远程登录到交换机上，执行FTP命令，从 FTP Server 上（假定IP地址为 2.2.2.1）下载主机程序 S5500EI-CMW520-R2222P12.bin 和 BOOTROM 程序 S5500EI-BTM-721.btm。\n备份 Flash 文件\n加载文件前使用 FTP 命令备份文件\n\u0026lt;XX-XX-S5500-1\u0026gt;ftp 2.2.2.1 Trying 2.2.2.1 ... Press CTRL+K to abort Connected to 2.2.2.1. 220 3Com 3CDaemon FTP 2.0 ready for new user User(2.2.2.1:(none)):123 331 Give me your password, please Password: 230 Logged in successfully [ftp] [ftp] put s5500ei-cmw520-r2202.bin [ftp] put startup.cfg [ftp] put ...... 第一步：通过 FTP 的相关命令将软件下载到本地交换机上。 [ftp] get S5500EI-BTM-721.btm 227 ÕýÔÚ½øÈë±»¶¯Ä£Ê½ (2,2,2,1,195,132) 125 ÕýÔÚÊ¹ÓÃÏÖ´æµÄÊý¾ÝÁ¬½Ó ......226 ÕýÔÚ¹Ø±ÕÊý¾ÝÁ¬½Ó; ÎÄ¼þ´«Êä³É¹¦Íê³É. FTP: 483732 byte(s) received in 7.111 second(s), 68.00K byte(s)/sec. [ftp] [ftp] get S5500EI-CMW520-R2222P12.bin 227 ÕýÔÚ½øÈë±»¶¯Ä£Ê½ (2,2,2,1,195,133) 125 ÕýÔÚÊ¹ÓÃÏÖ´æµÄÊý¾ÝÁ¬½Ó ...............................................226 ÕýÔÚ¹Ø±ÕÊý¾ÝÁ¬½Ó; ÎÄ¼þ´«Êä³É¹¦Íê³É. FTP: 14386411 byte(s) received in 197.289 second(s), 72.00K byte(s)/sec. [[ftp] bye 第二步：在交换机上升级 BOOTROM。 \u0026lt;XX-XX-S5500-1\u0026gt;bootrom update file flash:/s5500ei-btm-721.btm slot 1 This command will update bootrom file on the specified board(s), Continue? [Y/N]:y Now updating bootrom, please wait... Succeeded to update bootrom of Board 1. 第三步：在交换机上升级主机软件。 \u0026lt;XX-XX-S5500-1\u0026gt;boot-loader file flash:/s5500ei-cmw520-r2222p12.bin slot 1 main This command will set the boot file of the specified board. Continue? [Y/N]:y The specified file will be used as the main boot file at the next reboot on slot 1! \u0026lt;XX-XX-S5500-1\u0026gt;dis boot-loader Slot 1 The current boot app is: flash:/s5500ei-cmw520-r2202.bin The main boot app is: flash:/s5500ei-cmw520-r2222p12.bin The backup boot app is: flash:/ 第四步：重新启动交换机。 重起前请确认其他配置是否保存，防止重启后造成配置信息丢失。 重启设备后即可完成 BOOTROM 和主机软件的加载。 \u0026lt;XX-XX-S5500-1\u0026gt;reboot Start to check configuration with next startup configuration file, please wait.........DONE! This command will reboot the device. Continue? [Y/N]:y #Sep 14 15:51:46:49 2021 XX-XX-S5500-1 DEV/1/REBOOT: Reboot device by command. %Sep 14 15:51:46:163 2021 XX-XX-S5500-1 DEV/4/SYSTEM REBOOT: System is rebooting now. Starting...... *********************************************************** * * * H3C S5500-52C-EI BOOTROM, Version 721 * * * *********************************************************** Copyright (c) 2004-2013 Hangzhou H3C Tech. Co., Ltd. Creation date : Nov 12 2013, 01:59:13 CPU Clock Speed : 533MHz BUS Clock Speed : 133MHz Memory Size : 256MB Mac Address : 3822d60cd0f8 Press Ctrl-B to enter Boot Menu... 0 Auto-booting... Decompress Imageser interface aux0 is available. Press ENTER to get started. 查看升级后的版本信息 查看主机软件版本和 Bootrom 程序版本\n\u0026lt;XX-XX-S5500-1\u0026gt;dis version H3C Comware Platform Software Comware Software, Version 5.20, Release 2222P12 Copyright (c) 2004-2018 New H3C Technologies Co., Ltd. All rights reserved. H3C S5500-52C-EI uptime is 0 week, 0 day, 0 hour, 2 minutes H3C S5500-52C-EI with 1 Processor 256M bytes SDRAM 32768K bytes Flash Memory Hardware Version is REV.C CPLD Version is 002 Bootrom Version is 721 [SubSlot 0] 48GE+4SFP Hardware Version is REV.C 删除旧主机软件 \u0026lt;XX-XX-S5500-1\u0026gt;dir Directory of flash:/ 0 -rw- 10436470 Aug 11 2010 15:04:09 s5500ei-cmw520-r2202.bin 1 -rw- 17952 Sep 14 2021 15:36:21 startup.cfg 2 -rw- 483732 Sep 14 2021 15:31:57 s5500ei-btm-721.btm 3 -rw- 14386411 Sep 14 2021 15:35:42 s5500ei-cmw520-r2222p12.bin 4 drw- - Apr 26 2000 12:00:40 seclog 31496 KB total (6751 KB free) \u0026lt;XX-XX-S5500-1\u0026gt;delete /unreserved s5500ei-cmw520-r2202.bin The contents cannot be restored!!! Delete flash:/s5500ei-cmw520-r2202.bin?[Y/N]:y Deleting a file permanently will take a long time. Please wait... ........................................................................................ %Delete file flash:/s5500ei-cmw520-r2202.bin...Done. \u0026lt;XX-XX-S5500-1\u0026gt; \u0026lt;XX-XX-S5500-1\u0026gt; \u0026lt;XX-XX-S5500-1\u0026gt;dir Directory of flash:/ 0 -rw- 17952 Sep 14 2021 15:36:21 startup.cfg 1 -rw- 483732 Sep 14 2021 15:31:57 s5500ei-btm-721.btm 2 -rw- 14386411 Sep 14 2021 15:35:42 s5500ei-cmw520-r2222p12.bin 3 drw- - Apr 26 2000 12:00:40 seclog 31496 KB total (16943 KB free) 注意事项 加载主机软件必须通过 reboot 命令重起交换机后才能使加载成功。 如果 Flash 空间不够，可以先删除 Flash 中的无用文件，再进行软件的下载。 在加载过程中不可断电。 ","date":"2021-09-14T11:03:03Z","permalink":"https://kiraster.github.io/posts/e765d177.html/","title":"H3C_S5500-52C-EI升级步骤"},{"content":"实验拓扑和需求\n实验模拟的是一个总部和一个分支站点的网络，网络中总部和分支相同 VPN 实例网络互通，不同 VPN 实例网络相互隔离，总部 VPN2 中特殊主机 PC_8 需要访问位于分支网络中的 VPN1 网络\n思路和解决方法 网络设备中配置 VPN instance 用来隔离不同网络数据\n在不做特殊配置的情况下，不同 VPN 实例的网络是不能互相通信的\n然而在设备上 VPN 实例引入其他 VPN 实例网络又会造成不同实例间网络能互通的情况，进而要做各种 ACL 限制\n实验中并不涉及 MPLS VPN 的场景，有点类似 H3C 文档中 MCE 的情况，但是不涉及 CE、PE、RD、RT……\nRD 是用来做路由区分的，RT 是 BGP 协议中团体属性的内容，本实验中都不涉及，本来也考虑使用 MPLS VPN 的方式做，但是就当前这个场景完全不需要，客户只需要把原有不同的几套网络隔离，还要考虑到设备特性，设备性能等等\n实验中在路由经过的下一跳的设备上都要配置 VPN 实例，核心下联的二层设备不需要配置\n由于不使用引入其他 VPN 实例的方式，需要在总部路由器和总部交换机上配置 VPN 静态路由\n具体配置 SITE_SW # sysname SITE_SW # ip vpn-instance vpn1 # ip vpn-instance vpn2 # 配置rip 100 绑定VPN1，宣告与总部互联的网络和分支VPN1的网络 rip 100 vpn-instance vpn1 undo summary version 2 network 10.1.1.1 0.0.0.0 network 172.16.10.254 0.0.0.0 # 配置rip 200 绑定VPN2，宣告与总部互联的网络和分支VPN2的网络 rip 200 vpn-instance vpn2 undo summary version 2 network 20.1.1.1 0.0.0.0 network 172.16.20.254 0.0.0.0 # 不重要的dhcp dhcp enable # vlan 10 # vlan 20 # 不重要的dhcp dhcp server ip-pool vlan10 vpn-instance vpn1 gateway-list 172.16.10.254 network 172.16.10.0 mask 255.255.255.0 # 不重要的dhcp dhcp server ip-pool vlan20 vpn-instance vpn2 gateway-list 172.16.20.254 network 172.16.20.0 mask 255.255.255.0 # Vlan-interface10为VPN1网络网关 interface Vlan-interface10 ip binding vpn-instance vpn1 ip address 172.16.10.254 255.255.255.0 # Vlan-interface20为VPN1网络网关 interface Vlan-interface20 ip binding vpn-instance vpn2 ip address 172.16.20.254 255.255.255.0 # 与总部互联物理接口 interface GigabitEthernet1/0/3 port link-mode route # 使用子接口与总部互联，绑定VPN1 interface GigabitEthernet1/0/3.10 ip binding vpn-instance vpn1 ip address 10.1.1.1 255.255.255.252 # 使用子接口与总部互联，绑定VPN2 interface GigabitEthernet1/0/3.20 ip binding vpn-instance vpn2 ip address 20.1.1.1 255.255.255.252 # 不重要 interface GigabitEthernet1/0/1 port access vlan 10 stp edged-port # 不重要 interface GigabitEthernet1/0/2 port access vlan 20 stp edged-port # HQ_ROUTER # sysname HQ_ROUTER # ip vpn-instance vpn1 # ip vpn-instance vpn2 # 配置rip 100 绑定VPN1，宣告与分支互联的网络，与HQ_SW互联的网络，引入手动配置的去往PC_8主机的路由 rip 100 vpn-instance vpn1 undo summary version 2 network 10.1.1.2 0.0.0.0 network 100.1.1.1 0.0.0.0 import-route static # 配置rip 200 绑定VPN2，宣告与分支互联的网络，与HQ_SW互联的网络 rip 200 vpn-instance vpn2 undo summary version 2 network 20.1.1.2 0.0.0.0 network 100.1.1.1 0.0.0.0 # vlan 111 # vlan 222 # 与HQ_SW VPN1 互联vlanif接口 interface Vlan-interface111 ip binding vpn-instance vpn1 ip address 100.1.1.1 255.255.255.252 # 与HQ_SW VPN2 互联vlanif接口 interface Vlan-interface222 ip binding vpn-instance vpn2 ip address 100.1.1.1 255.255.255.252 # 与分支互联物理接口 interface GigabitEthernet0/0 port link-mode route combo enable copper # 使用子接口与分支互联，绑定VPN1 interface GigabitEthernet0/0.10 ip binding vpn-instance vpn1 ip address 10.1.1.2 255.255.255.252 vlan-type dot1q vid 10 # 使用子接口与分支互联，绑定VPN2 interface GigabitEthernet0/0.20 ip binding vpn-instance vpn2 ip address 20.1.1.2 255.255.255.252 vlan-type dot1q vid 20 # 与HQ_SW互联的物理接口 interface GigabitEthernet0/1 port link-mode bridge port link-type trunk port trunk permit vlan all combo enable copper # 在vpn1网络中配置的去往PC_8主机的路由 ip route-static vpn-instance vpn1 192.168.40.200 32 vpn-instance vpn2 100.1.1.2 # HQ_SW # sysname HQ_SW # ip vpn-instance vpn1 # ip vpn-instance vpn2 # 配置rip 100 绑定VPN1，宣告与HQ_ROUTER互联的网络和总部VPN1的网络，注意有一条路由过滤，因为在HQ_ROUTER中引入了手动配置的静态的路由，而在HQ_SW VPN1网络中不需要 rip 100 vpn-instance vpn1 undo summary version 2 network 100.1.1.2 0.0.0.0 network 192.168.30.254 0.0.0.0 filter-policy prefix-list filter_192.168.40.200 import # 配置rip 200 绑定VPN2，宣告与HQ_ROUTER互联的网络和总部VPN2的网络 rip 200 vpn-instance vpn2 undo summary version 2 network 100.1.1.2 0.0.0.0 network 192.168.40.254 0.0.0.0 # 不重要的dhcp dhcp enable # vlan 30 # vlan 40 # vlan 111 # vlan 222 # 不重要的dhcp dhcp server ip-pool vlan30 vpn-instance vpn1 gateway-list 192.168.30.254 network 192.168.30.0 mask 255.255.255.0 # 不重要的dhcp dhcp server ip-pool vlan40 vpn-instance vpn2 gateway-list 192.168.40.254 network 192.168.40.0 mask 255.255.255.0 forbidden-ip 192.168.40.200 # vlan30为VPN1网络网关 interface Vlan-interface30 ip binding vpn-instance vpn1 ip address 192.168.30.254 255.255.255.0 # vlan40为VPN1网络网关 interface Vlan-interface40 ip binding vpn-instance vpn2 ip address 192.168.40.254 255.255.255.0 packet-filter 3001 inbound # 与HQ_ROUTER VPN1 互联vlanif接口 interface Vlan-interface111 ip binding vpn-instance vpn1 ip address 100.1.1.2 255.255.255.252 # 与HQ_ROUTER VPN2 互联vlanif接口 interface Vlan-interface222 ip binding vpn-instance vpn2 ip address 100.1.1.2 255.255.255.252 # 与HQ_ROUTER互联的物理接口 interface GigabitEthernet1/0/1 port link-mode bridge port link-type trunk port trunk permit vlan all combo enable fiber # 配置前缀列表，过滤从HQ_ROUTER学习到的特殊主机路由 ip prefix-list filter_192.168.40.200 index 10 deny 192.168.40.2 32 ip prefix-list filter_192.168.40.200 index 20 permit 0.0.0.0 0 less-equal 32 # 配置总部VPN2网络到分支VPN1网络的路由 ip route-static vpn-instance vpn2 172.16.10.0 24 vpn-instance vpn1 100.1.1.1 # 限制除PC_8外去往分支VPN1网络的流量 acl advanced 3001 rule 0 permit ip source 192.168.40.200 0 destination 172.16.10.0 0.0.0.255 rule 5 deny ip source 192.168.40.0 0.0.0.255 destination 172.16.10.0 0.0.0.255 rule 10 permit ip # ","date":"2021-04-27T11:35:32Z","permalink":"https://kiraster.github.io/posts/eb7e5d69.html/","title":"HCL_VPN不同实例互通实验"},{"content":"上一篇博客写到如何运行脚本导出设备信息，这一篇介绍一下怎样在海量的设备信息中提取指定信息，本文中假设要提取的信息有设备名称、当前软件版本、设备运行时间、设备 CPU 使用率、设备内存使用率、设备序列号。后续可以根据这些信息使用 Python 脚本写入到巡检报告或者表格中。\n如何操作 没有提取前已导出的设备信息（保护隐私，使用 HCL 模拟器产生的设备信息） Python 脚本 # Author：KIRASTER # Time：2021/3/21 23:26 # Description：Device_info import os import re filename = \u0026#39;F:/111.txt\u0026#39; resultfilename = \u0026#39;F:/result.txt\u0026#39; if os.path.exists(resultfilename): os.remove(resultfilename) result_txt = open(\u0026#39;F:/result.txt\u0026#39;, \u0026#39;a\u0026#39;) with open(filename, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf8\u0026#39;) as file_to_read: while True: lines = file_to_read.readline() # 首行显示50个“=”号，提取设备版本信息，开头注释 if \u0026#34;display version\u0026#34; in lines: result_line01 = \u0026#39;=\u0026#39; * 50 + \u0026#39;\\n\u0026#39; result_line02 = \u0026#39;Device Name:\\t\u0026#39; + \u0026#39;\u0026#39;.join(re.findall(r\u0026#39;[\u0026lt;](.*?)[\u0026gt;]\u0026#39;, lines)) + \u0026#39;\\n\u0026#39; result_txt.write(result_line01) print(result_line01) print(result_line02) result_txt.write(result_line02) # 提取设备版本信息 if \u0026#34;Comware Software\u0026#34; in lines: result_line03 = \u0026#39;Comware Software:\\t\u0026#39; +\u0026#39;\u0026#39;.join(re.findall(\u0026#39;(?\u0026lt;=Software, ).*$\u0026#39;, lines)) + \u0026#39;\\n\u0026#39; print(result_line03) result_txt.write(result_line03) # 提取设备运行时间 if \u0026#34;uptime is\u0026#34; in lines: result_line04 = \u0026#39;Uptime:\\t\u0026#39; + \u0026#39;\u0026#39;.join(re.findall(\u0026#39;(?\u0026lt;=uptime is ).*$\u0026#39;, lines)) + \u0026#39;\\n\u0026#39; print(result_line04) result_txt.write(result_line04) # 提取设备序列号 if \u0026#34;DEVICE_SERIAL_NUMBER\u0026#34; in lines: result_line05 = \u0026#39;SN:\\t\u0026#39; + \u0026#39;\u0026#39;.join(re.findall(\u0026#39;(?\u0026lt;=:).*$\u0026#39;, lines)) + \u0026#39;\\n\u0026#39; result_line05 = result_line05.replace(\u0026#39; \u0026#39;, \u0026#39;\u0026#39;) print(result_line05) result_txt.write(result_line05) # 提取设备cpu使用率方式1 if \u0026#34;Slot 1 CPU 0 CPU usage:\u0026#34; in lines: result_line06 = next(file_to_read) result_line06 = result_line06[5:9] + \u0026#39;\\n\u0026#39; result_line06 = \u0026#39;cpu-usage:\\t\u0026#39; + result_line06.replace(\u0026#39; \u0026#39;, \u0026#39;\u0026#39;) print(result_line06) result_txt.write(result_line06) # 提取设备cpu使用率方式2 if \u0026#34;Slot 1 CPU usage:\u0026#34; in lines: result_line066 = next(file_to_read) result_line066 = result_line066[5:9] + \u0026#39;\\n\u0026#39; result_line066 = \u0026#39;cpu-usage:\\t\u0026#39; + result_line066.replace(\u0026#39; \u0026#39;, \u0026#39;\u0026#39;) print(result_line066) result_txt.write(result_line066) # 提取设备cpu使用率方式3 if \u0026#34;Unit CPU usage:\u0026#34; in lines: result_line0666 = next(file_to_read) result_line0666 = result_line0666[5:9] + \u0026#39;\\n\u0026#39; result_line0666 = \u0026#39;cpu-usage:\\t\u0026#39; + result_line0666.replace(\u0026#39; \u0026#39;, \u0026#39;\u0026#39;) print(result_line0666) result_txt.write(result_line0666) # 提取设备memory使用率方式1 if \u0026#34;Used Rate\u0026#34; in lines: result_line07 = lines[-4:] result_line07 = \u0026#39;memory-usage:\\t\u0026#39; + result_line07.replace(\u0026#39; \u0026#39;, \u0026#39;\u0026#39;) print(result_line07) result_txt.write(result_line07) # 提取设备memory使用率方式2 if \u0026#34;Mem:\u0026#34; in lines: result_line08 = lines[-6:] result_line08 = result_line08.replace(\u0026#39; \u0026#39;, \u0026#39;\u0026#39;) result_line08 = result_line08.replace(\u0026#39;%\u0026#39;, \u0026#39;\u0026#39;) result_line08 = 100 - float(result_line08) result_line08 = \u0026#39;%.1f%%\u0026#39; % result_line08 result_line08 = \u0026#39;memory-usage:\\t\u0026#39; + result_line08 + \u0026#39;\\n\u0026#39; print(result_line08) result_txt.write(result_line08) result_txt.flush() if \u0026#34;结束记录时间\u0026#34; in lines: break 生成信息 其他 本文中的脚本在实际工作中使用过，设备包含华三 V5 和 V7 版本的交换机、防火墙和无线控制器等 根据实际需要可以修改脚本中的内容提取更多信息 生成的文件为 word 或 excel 等都是可以实现的 ","date":"2021-04-22T16:33:36Z","permalink":"https://kiraster.github.io/posts/80e04e00.html/","title":"H3C_V5_V7设备巡检信息提取"},{"content":"脚本介绍和使用 这是一个巡检脚本，使用 CRT 软件登陆H3C设备，点击 “Script” \u0026ndash;\u0026gt; \u0026ldquo;Run\u0026rdquo; 选择脚本，运行脚本可得到需要收集的信息（当然你要打开 log 记录日志，相信你懂） 可以根据你的实际需要修改 “Send” 后面的内容 好久不更博客了，最近干了一些小项目，能写的我尽量写写…… #$language = \u0026#34;VBScript\u0026#34; #$interface = \u0026#34;1.0\u0026#34; crt.Screen.Synchronous = True \u0026#39; This automatically generated script may need to be \u0026#39; edited in order to work correctly. Sub Main crt.Screen.Send \u0026#34;#start right now\u0026#34;\u0026amp; chr(13) crt.Screen.WaitForString \u0026#34;\u0026gt;\u0026#34; crt.Screen.Send \u0026#34;screen-length disable\u0026#34; \u0026amp; chr(13) crt.Screen.Send \u0026#34;display cur \u0026#34; \u0026amp; chr(13) crt.Screen.Send \u0026#34;display ip interface brief\u0026#34; \u0026amp; chr(13) crt.Screen.Send \u0026#34;display interface brief des\u0026#34; \u0026amp; chr(13) crt.Screen.Send \u0026#34;display vlan\u0026#34; \u0026amp; chr(13) crt.Screen.Send \u0026#34;display vlan brief\u0026#34; \u0026amp; chr(13) crt.Screen.Send \u0026#34;display ip routing-table\u0026#34; \u0026amp; chr(13) crt.Screen.Send \u0026#34;display version\u0026#34; \u0026amp; chr(13) crt.Screen.Send \u0026#34;display cpu-usage\u0026#34; \u0026amp; chr(13) crt.Screen.Send \u0026#34;display memory\u0026#34; \u0026amp; chr(13) crt.Screen.Send \u0026#34;display device manuinfo\u0026#34; \u0026amp; chr(13) crt.Screen.Send \u0026#34;save force\u0026#34; \u0026amp; chr(13) crt.Screen.Send \u0026#34;save force\u0026#34; \u0026amp; chr(13) End Sub ","date":"2021-04-18T06:58:53Z","permalink":"https://kiraster.github.io/posts/21b002a6.html/","title":"H3C_SecureCRT巡检脚本"},{"content":"我的母亲，一个普通的平凡的中年妇女\n可能是由于家庭环境的缘故使得她文化水平不高\n她很唠叨，做事没什么主见，总是把自己弄的很忙的样子，总喜欢这扫扫那洗洗\n跟我说话总是用疑问句的方式，整个家庭存在这种现象，我除外\n她有着固有的传统思想方式，就是别人都怎么样我也要怎么样\n闲暇之余在家总是喜欢拿着手机看电视剧，说到手机，教她用智能手机对我来说简直是世纪难题，至今她能会那么一点使用的功能是电话、万能钥匙连wifi、视频软件看剧和手机充电，除此之外我已经放弃了，她也放弃了\n一天，她对我说烟头烟灰要丢烟灰缸不要直接丢镂空不套塑料袋的垃圾筐，转身就把桌上烟灰缸往垃圾筐一倒，垃圾筐没套塑料袋\n她还喜欢“狡辩”，这是针对我爸的\n……\n","date":"2021-02-12T09:19:43Z","permalink":"https://kiraster.github.io/posts/221a99d.html/","title":"我的母亲"},{"content":" 路由器出口策略配置说明 NQA # 配置探测电信DNS的NQA nqa entry admin isp_telecom_test type icmp-echo destination ip 202.103.224.68 //探测远端DNS地址 frequency 2000 //每间隔2秒探测一次 history-record enable //开启NQA历史记录保存功能 history-record number 5 //保存的最大历史记录个数为5条 next-hop ip 101.1.1.2 //探测报文经过的下一跳 probe count 5 //每次探测检测5次 probe timeout 1000 //检测超时时间1秒 reaction 1 checked-element probe-fail threshold-type consecutive 5 action-type trigger-only //连续探测失败5次，触发其他模块联动 source ip 101.1.1.1 //探测报文源地址 # 配置探测联通DNS的NQA nqa entry admin isp_unicom_test type icmp-echo destination ip 211.138.240.100 frequency 2000 history-record enable history-record number 5 next-hop ip 202.1.1.2 probe count 5 probe timeout 1000 reaction 1 checked-element probe-fail threshold-type consecutive 5 action-type trigger-only source ip 202.1.1.1 # 当前时间起永久启用NQA监测 nqa schedule admin isp_telecom_test start-time now lifetime forever nqa schedule admin isp_unicom_test start-time now lifetime forever track 关联 NQA # track 100 nqa entry admin isp_telecom_test reaction 1 # track 200 nqa entry admin isp_unicom_test reaction 1 策略路由配置，联动 # acl advanced 3002 rule 0 permit ip source 192.168.20.0 0.0.0.255 # 指定下一跳时与track 200联动，当NQA监测失败结果时，策略路由失效，流量根据路由表转发流量 policy-based-route to_isp_policy permit node 10 if-match acl 3002 apply next-hop 202.1.1.2 track 200 # # 默认路由与track 100联动，当NQA监测失败结果时，该条默认路由失效，优先级为80的默认路由加载路由表，流量根据路由表转发流量 ip route-static 0.0.0.0 0 101.1.1.2 track 100 ip route-static 0.0.0.0 0 202.1.1.2 preference 80 # 内网流量入接口下调用策略路由 interface GigabitEthernet0/0 ip policy-based-route to_isp_policy 测试说明： 外网网络正常情况，查看 nqa 监测结果，探测发出的数据包和收到的数据包数量一致\n通过 debug 查看 NAT 转换信息，vlan10 去往互联网 DNS 地址的流量走101.1.1.2下一跳地址，vlan20 去往互联网 DNS 地址的流量走 202.1.1.2 下一跳地址\n当电信网络不可用时 当电信网络不可用时，路由器日志提示 prob-fail，此时 NQA 探测收到的 icmp-reply 数据包为 0\n路由表中，默认路由的下一跳为 202.1.1.2\n查看 NAT 会话表，有 vlan10，vlan20 的流量会话\n通过 debug 查看 NAT 转换信息，所有流量走联通网络出口\n当联通网络不可用时 当联通网络不可用时，路由器日志提示 prob-fail，此时 NQA 探测收到的 icmp-reply 数据包为0\n查看 NAT 会话表，有 vlan10，vlan20 的流量会话\n通过 debug 查看 NAT 转换信息，所有流量走电信网络出口\n路由器配置： # sysname Router # track 100 nqa entry admin isp_telecom_test reaction 1 # track 200 nqa entry admin isp_unicom_test reaction 1 # system-working-mode standard xbar load-single password-recovery enable lpu-type f-series # vlan 1 # policy-based-route to_isp_policy permit node 10 if-match acl 3002 apply next-hop 202.1.1.2 track 200 # nqa entry admin isp_telecom_test type icmp-echo destination ip 202.103.224.68 frequency 2000 history-record enable history-record number 5 next-hop ip 101.1.1.2 probe count 5 probe timeout 1000 reaction 1 checked-element probe-fail threshold-type consecutive 5 action-type trigger-only source ip 101.1.1.1 # nqa entry admin isp_unicom_test type icmp-echo destination ip 211.138.240.100 frequency 2000 history-record enable history-record number 5 next-hop ip 202.1.1.2 probe count 5 probe timeout 1000 reaction 1 checked-element probe-fail threshold-type consecutive 5 action-type trigger-only source ip 202.1.1.1 # nqa schedule admin isp_telecom_test start-time now lifetime forever nqa schedule admin isp_unicom_test start-time now lifetime forever # interface Serial1/0 # interface Serial2/0 # interface Serial3/0 # interface Serial4/0 # interface NULL0 # interface GigabitEthernet0/0 port link-mode route combo enable copper ip address 1.1.1.1 255.255.255.252 ip policy-based-route to_isp_policy # interface GigabitEthernet0/1 port link-mode route combo enable copper ip address 101.1.1.1 255.255.255.252 nat outbound 3001 # interface GigabitEthernet0/2 port link-mode route combo enable copper ip address 202.1.1.1 255.255.255.252 nat outbound 3001 # interface GigabitEthernet5/0 port link-mode route combo enable copper # interface GigabitEthernet5/1 port link-mode route combo enable copper # interface GigabitEthernet6/0 port link-mode route combo enable copper # interface GigabitEthernet6/1 port link-mode route combo enable copper # scheduler logfile size 16 # line class aux user-role network-operator # line class console user-role network-admin # line class tty user-role network-operator # line class vty user-role network-operator # line aux 0 user-role network-operator # line con 0 user-role network-admin # line vty 0 63 user-role network-operator # ip route-static 0.0.0.0 0 101.1.1.2 track 100 ip route-static 0.0.0.0 0 202.1.1.2 preference 80 ip route-static 192.168.10.0 24 1.1.1.2 ip route-static 192.168.20.0 24 1.1.1.2 # acl advanced 3001 rule 0 permit ip # acl advanced 3002 rule 0 permit ip source 192.168.20.0 0.0.0.255 # domain name system # domain default enable system # role name level-0 description Predefined level-0 role # role name level-1 description Predefined level-1 role # role name level-2 description Predefined level-2 role # role name level-3 description Predefined level-3 role # role name level-4 description Predefined level-4 role # role name level-5 description Predefined level-5 role # role name level-6 description Predefined level-6 role # role name level-7 description Predefined level-7 role # role name level-8 description Predefined level-8 role # role name level-9 description Predefined level-9 role # role name level-10 description Predefined level-10 role # role name level-11 description Predefined level-11 role # role name level-12 description Predefined level-12 role # role name level-13 description Predefined level-13 role # role name level-14 description Predefined level-14 role # user-group system # return \u0026lt;Router\u0026gt; ","date":"2021-02-01T14:22:41Z","permalink":"https://kiraster.github.io/posts/4e82271c.html/","title":"HCL_路由器双出口策略配置实验"},{"content":"作者：重庆市江津中学校 王征老师\n字词、词性、成分之间的关系 一般规律：\n名词和代词一般更适合做主语和宾语 动词一般更适合做谓语 副词和形容词一般更适合做定语和状语 主谓宾是一般顺序 定语一般在主语和宾语前面 状语一般在谓语前面 顺序颠倒了就是倒装 词性 实词 vs 虚词\n实词：意义编辑具体的词，包括：名词、动词、形容词、数词、量词、代词 虚词：一般不能单独成句，意义比较抽象，有帮助造句作用的词，包括：副词、介词、连词、助词、叹词、拟声词 名词 表示人或事物名称 表示人：姑娘、青年、工人 表示具体事物：锤子、坚果、手机 表示抽象事物：理想、精神、感情 表示时间：春天、昨天、早上、下午\n方位名词 上下左右前后左右东西南北里头外边以上之下 大多数情况下，方位名词用在其他名词性词语的后边，表示事物所在的位置和范围\n动词 表示人或事物的动作行为、心里活动、发展变化 表示动作行为：走、跑、滚、唱、跳、打 表示心里活动：爱、恨、喜欢、讨厌、想念、忘记、佩服 表示事物发展变化：增加、减少、扩大、提高、降低、发生、出现\n表示可能、应该、意愿 能、不能、能够、会、可能、可以、可、要、应该、应当、肯、敢、愿、愿意 这类词常放在一般动词的前面\n表示动作趋向 下、去、来、进、出、到、过、过去、上来、回去、起来 这类动词往往放在表示动作行为的动词后边，用来表示动作行为的方向\n表示判断：是vs不是\n形容词 用来描摹人或事物 表示状态：快、慢、软、硬、忙碌、悠闲、激动 表示性质：好、坏、美、丑、存粹、清脆 表示颜色：赤橙黄绿青蓝紫、苍白、绿油由、红彤彤 表示形状：大、小、宽、长、窄、笔直、弯曲\n一词多性 结合语境判断\n数词和量词 数词：表示确数、序数和概数: 确数：一、八千、七万八千 概述：十来（个）、三十几（个）、八九（辆） 序数：第一、老二、初八\n量词：表示单位 表示事物的单位：个、台、辆、条 表示度量单位：米、吨、克 表示动作行为的单位：次、回、趟，轮\n数量：数词和量词一般结合起来使用表示数量 一个、八千次、十来吨、第一轮\n代词 代替名词、动词、形容词、数词、量词、副词 代替人或事物：你、你们、我、我们、他、它、她、咱们、自己 具有指示作用：那、这、这里、那里、这里、这样、那么、每、各 表示疑问：哪里、什么、谁、怎样、怎么样、哪、哪呢\n","date":"2021-01-22T17:26:57Z","permalink":"https://kiraster.github.io/posts/51f223b9.html/","title":"简明现代汉语语法_学习"},{"content":"实验说明：\n设备互联线路，IP 地址、路由协议、可靠性等配置自定义\n实验效果： PC_1 网段流量经R1出互联网 PC_2 网段流量经R2出互联网 当任意互联网线路故障后，全部流量走另一线路出互联网 解决思路： 设备互联，IP地址规划如图 Core_SW1、Core_SW2 做堆叠，F1/0/53 to F1/0/54堆叠口，Ten 1/0/50为 BFD 检测线 \u0026lt;Core_SW1\u0026gt;dis irf MemberID Role Priority CPU-Mac Description *+1 Master 15 72f0-e201-0504 --- 2 Standby 10 72f0-e6bc-0604 --- -------------------------------------------------- * indicates the device is the master. + indicates the device through which the user logs in. \u0026lt;Core_SW1\u0026gt;dis irf topology Topology Info ------------------------------------------------------------------------- IRF-Port1 IRF-Port2 MemberID Link neighbor Link neighbor Belong To 1 DIS --- UP 2 72f0-e201-0504 2 UP 1 DIS --- 72f0-e201-0504 核心交换机 Core_SW 与 R1, R2 之间启用三层聚合链路\n\u0026lt;Core_SW1\u0026gt;dis link-aggregation summary Aggregation Interface Type: BAGG -- Bridge-Aggregation, BLAGG -- Blade-Aggregation, RAGG -- Route-Aggregation, SCH-B -- Schannel-Bundle Aggregation Mode: S -- Static, D -- Dynamic Loadsharing Type: Shar -- Loadsharing, NonS -- Non-Loadsharing Actor System ID: 0x8000, 72f0-e201-0500 AGG AGG Partner ID Selected Unselected Individual Share Interface Mode Ports Ports Ports Type -------------------------------------------------------------------------------- BAGG3 S None 2 0 0 Shar RAGG1 S None 2 0 0 Shar RAGG2 S None 2 0 0 Shar \u0026lt;Core_SW1\u0026gt;dis ip int b *down: administratively down (s): spoofing (l): loopback Interface Physical Protocol IP Address Description GE1/0/1 up up -- -- GE1/0/2 up up -- -- GE2/0/1 up up -- -- GE2/0/2 up up -- -- MGE0/0/0 down down -- -- RAGG1 up up 10.1.1.1 -- RAGG2 up up 10.1.1.5 -- Vlan10 up up 192.168.10.254 -- Vlan20 up up 192.168.20.254 -- \u0026lt;R1\u0026gt;dis link-aggregation verbose Loadsharing Type: Shar -- Loadsharing, NonS -- Non-Loadsharing Port: A -- Auto Port Status: S -- Selected, U -- Unselected, I -- Individual Flags: A -- LACP_Activity, B -- LACP_Timeout, C -- Aggregation, D -- Synchronization, E -- Collecting, F -- Distributing, G -- Defaulted, H -- Expired Aggregate Interface: Route-Aggregation1 Aggregation Mode: Static Loadsharing Type: Shar Port Status Priority Oper-Key -------------------------------------------------------------------------------- GE0/1 S 32768 1 GE0/2 S 32768 1 \u0026lt;R1\u0026gt;dis ip int b *down: administratively down (s): spoofing (l): loopback Interface Physical Protocol IP Address Description GE0/0 up up 101.1.1.1 -- GE0/1 up up -- -- GE0/2 up up -- -- GE5/0 down down -- -- GE5/1 down down -- -- GE6/0 down down -- -- GE6/1 down down -- -- RAGG1 up up 10.1.1.2 -- Ser1/0 down down -- -- Ser2/0 down down -- -- Ser3/0 down down -- -- Ser4/0 down down -- -- \u0026lt;R2\u0026gt;dis link-aggregation verbose Loadsharing Type: Shar -- Loadsharing, NonS -- Non-Loadsharing Port: A -- Auto Port Status: S -- Selected, U -- Unselected, I -- Individual Flags: A -- LACP_Activity, B -- LACP_Timeout, C -- Aggregation, D -- Synchronization, E -- Collecting, F -- Distributing, G -- Defaulted, H -- Expired Aggregate Interface: Route-Aggregation1 Aggregation Mode: Static Loadsharing Type: Shar Port Status Priority Oper-Key -------------------------------------------------------------------------------- GE0/1 S 32768 1 GE0/2 S 32768 1 \u0026lt;R2\u0026gt;dis ip int b *down: administratively down (s): spoofing (l): loopback Interface Physical Protocol IP Address Description GE0/0 up up 201.1.1.1 -- GE0/1 up up -- -- GE0/2 up up -- -- GE5/0 down down -- -- GE5/1 down down -- -- GE6/0 down down -- -- GE6/1 down down -- -- RAGG1 up up 10.1.1.6 -- Ser1/0 down down -- -- Ser2/0 down down -- -- Ser3/0 down down -- -- Ser4/0 down down -- -- 核心交换机 Core_SW 与 SW3 之间启用二层聚合链路 \u0026lt;SW3\u0026gt;dis link-aggregation verbose Loadsharing Type: Shar -- Loadsharing, NonS -- Non-Loadsharing Port: A -- Auto Port Status: S -- Selected, U -- Unselected, I -- Individual Flags: A -- LACP_Activity, B -- LACP_Timeout, C -- Aggregation, D -- Synchronization, E -- Collecting, F -- Distributing, G -- Defaulted, H -- Expired Aggregate Interface: Bridge-Aggregation1 Aggregation Mode: Static Loadsharing Type: Shar Port Status Priority Oper-Key -------------------------------------------------------------------------------- GE1/0/1 S 32768 1 GE1/0/2 S 32768 1 核心交换机 Core_SW 配置静态路由；R1、R2 配置默认路由下一跳指向 ISP 设备地址、配置回程静态路由指向 Core_SW 三层聚合接口地址 \u0026lt;Core_SW1\u0026gt;dis cur | inc route policy-based-route vlan20nexthop permit node 1 ip policy-based-route vlan20nexthop port link-mode route port link-mode route port link-mode route port link-mode route ip route-static 0.0.0.0 0 10.1.1.2 track 2 ip route-static 0.0.0.0 0 10.1.1.6 preference 80 \u0026lt;R1\u0026gt;dis ip routing-table pro static Summary count : 3 Static Routing table status : \u0026lt;Active\u0026gt; Summary count : 3 Destination/Mask Proto Pre Cost NextHop Interface 0.0.0.0/0 Static 60 0 101.1.1.2 GE0/0 192.168.10.0/24 Static 60 0 10.1.1.1 RAGG1 192.168.20.0/24 Static 60 0 10.1.1.1 RAGG1 Static Routing table status : \u0026lt;Inactive\u0026gt; Summary count : 0 \u0026lt;R2\u0026gt;dis ip routing-table pro static Summary count : 3 Static Routing table status : \u0026lt;Active\u0026gt; Summary count : 3 Destination/Mask Proto Pre Cost NextHop Interface 0.0.0.0/0 Static 60 0 201.1.1.2 GE0/0 192.168.10.0/24 Static 60 0 10.1.1.5 RAGG1 192.168.20.0/24 Static 60 0 10.1.1.5 RAGG1 Static Routing table status : \u0026lt;Inactive\u0026gt; Summary count : 0 核心交换机 Core_SW 配置 NQA，检测 ISP_1, ISP_2 可达性，关联 Track 与静态路由、策略路由联动 # nqa entry admin isp_1_test type icmp-echo destination ip 101.1.1.2 frequency 2000 history-record enable history-record number 5 next-hop ip 10.1.1.2 probe count 5 probe timeout 1000 reaction 1 checked-element probe-fail threshold-type consecutive 3 action-type trigger-only source ip 10.1.1.1 # nqa entry admin isp_2_test type icmp-echo destination ip 201.1.1.2 frequency 2000 history-record enable history-record number 5 next-hop ip 10.1.1.6 probe count 5 probe timeout 1000 reaction 1 checked-element probe-fail threshold-type consecutive 3 action-type trigger-only source ip 10.1.1.5 # nqa schedule admin isp_1_test start-time now lifetime forever nqa schedule admin isp_2_test start-time now lifetime forever track 1 nqa entry admin isp_2_test reaction 1 # track 2 nqa entry admin isp_1_test reaction 1 # ip route-static 0.0.0.0 0 10.1.1.2 track 2 ip route-static 0.0.0.0 0 10.1.1.6 preference 80 # # policy-based-route vlan20nexthop permit node 1 if-match acl 3001 apply next-hop 10.1.1.6 track 1 # # acl advanced 3001 rule 5 deny ip source 192.168.20.0 0.0.0.255 destination 192.168.10.0 0.0.0.255 rule 10 permit ip source 192.168.20.0 0.0.0.255 # ISP 网络设备配置 OSPF \u0026lt;ISP_NETWORK\u0026gt;dis ip routing-table protocol ospf Summary count : 5 OSPF Routing table status : \u0026lt;Active\u0026gt; Summary count : 2 Destination/Mask Proto Pre Cost NextHop Interface 101.1.1.0/30 O_INTRA 10 2 101.1.1.5 GE0/1 201.1.1.0/30 O_INTRA 10 2 201.1.1.5 GE0/2 OSPF Routing table status : \u0026lt;Inactive\u0026gt; Summary count : 3 Destination/Mask Proto Pre Cost NextHop Interface 1.2.3.4/32 O_INTRA 10 0 0.0.0.0 Loop0 101.1.1.4/30 O_INTRA 10 1 0.0.0.0 GE0/1 201.1.1.4/30 O_INTRA 10 1 0.0.0.0 GE0/2 ","date":"2021-01-21T08:31:24Z","permalink":"https://kiraster.github.io/posts/c7ac5477.html/","title":"HCL_一个小实验的思路"},{"content":"在我的印象中，上个世纪九十年代对我来说是一个特别的年代，也包括我的出世\n那时候人事物，我稍微回忆一下\n老爸买的黑白电视机，带有车牌号的自行车……\n第一次骑自行车，下车的场景是等速度降到几乎为零，自行车向右方倒，岔开右腿撑着\n对了，那是亲戚的一辆山地自行车，当然那时候我还不知道分类\n那时候看电影，都是去镇上租碟，村里面稍微“富裕”的人家才买的起 VCD 机\n在我老爸没买电视机前，晚上想要看电视节目是去村里有电视的人家围观看，隐约记得晚上回来晚了，村里几乎没有灯亮着，借着月光摸黑回来，大门锁了，找到放大门钥匙的地方，蹑手蹑脚开门关门睡觉\n那时候通信是挺落后的，村里有固定电话的没多少人家，看到路边电信杠上挂着一块木制用红色油漆写着号码的才是有固定电话的，那时候普遍用的还是 BB 机，我老爸有一个\n那时候村里起房子，砖是从田里挖泥造的\n那时候贪玩，回到家会被殴打，那时候贪玩，眉弓往右眼部位被铁片扎了，万幸右眼没有失明，但是留下了疤痕，导致后来照镜子看显得有点“社会”\n小时候生病，会被老爸背去打针，当时我应该是哭了，每次打完针后，会有一碗饭馆的面吃，来抚慰幼小的我，对当时的家庭经济状况来说应该算是“大餐”\n那时的作业都是早上起来写的，晚上可能是去邻居家看电视，或者跑去看碟片电影了\n那时候班主任有一次中午去我家家访吃了个闭门羹，这是她的说法，我不记得了\n小学那时候，校园里有一个篮球场，两张乒乓球台，还有一个爬竿的地方，就这么多。小学一到三年级的教室是几间大瓦房，四到六年级是那栋走廊外面用红色油漆写着令人分裂的“团结、紧张、严肃、活泼”大字的楼，至少我后面是这么认为的，这几个词连在一起念简直了\n现在回想起来，老感觉有些记忆丢失了，可能是那时候脑子不记事，但是奇怪的是，那时候去走亲戚或者走去哪里的路走过一次，下次就记得怎么去怎么回\n……\n","date":"2021-01-12T23:02:08Z","permalink":"https://kiraster.github.io/posts/8847b633.html/","title":"九十年代"},{"content":"费曼学习法是美籍犹太人 Richard Feynman 提出的一种学习知识的方法，具体介绍可以访问 Wiki费曼学习法 ，或者你也可以自行搜索。\n我的理解① 在我们的学习、工作、或者生活中，或多或少的会接触了解使用一些知识。学习就不用多说，因为你学习的目标是为了使用这些知识或者应对测试。对于工作，往往自己要求或者被动的学习来提升自己的工作技能和业务水平。对于生活，学会生活。\n选定知识点或者概念 选定一个知识点或者概念后，试想着用正常人理解的词汇来理解它，比如你要向别人讲解一个东西的时候，不要用复杂的专业术语和你自己都不明白的词语来糊弄，用简单的词汇理解知识点，在你表达的时候听的人也更能明白。\n回顾知识点或者概念 在上面提到的方法后，自己回想这个知识点或者概念会有遗忘的内容或者不理解的点，这时候带着遗忘的内容和知识点重新学习，直到你能用简单的词汇和基本术语理解通透。\n简洁的语言组织 当自己理解后，把自己理解的知识点或者概念有逻辑有条理，尽可能用简洁的语言组织出来，这个很重要，如果不归纳总结，你自己是明白了，但你使用的时候或者对别人表达就会很混乱容易出错。\n检验 检验你的理解有没有问题，在实际工作生活中，尝试用“教”的方法向别人表达，或者面对别人能清晰的解释他的疑问。\n我的理解② 对于费曼学习法，是不是都适用各种学习场景呢，我觉得不是，对于有一个量化标准的为前提的检验，比如说背诵，默写…… 我觉得此法，需要花费比授课学习更多的时间，因为你不知道你要学习的这个知识点或概念的知识深度、宽度、边界，不知道理解到什么程度就可以终结 ","date":"2021-01-09T17:23:13Z","permalink":"https://kiraster.github.io/posts/237b6272.html/","title":"我理解的费曼学习方法"},{"content":"在进行 ENSP 模拟器防火墙实验的发现，首次启动防火墙设备后都需要更改初始密码才能进入设备配置，着实操蛋。后面想了个办法，在启动设备前导入配置文件，设备启动后就可以使用导入配置中配置的密码进行登陆，当然还可以配置其他你想加的配置，实现与你要桥接的网卡互通。\n思路和实验 通过设备加载初始配置跳过设备首次登陆需要更改密码 通过修改 admin 的密码，修改 vty 配置，修改管理接口配置测试验证导入配置的实用性 操作方法 假设你已经会配置Cloud，并且连接好设备\n在电脑本地新建 xxx.cfg (后缀名为 .cfg )文件，文件内容如下 aaa manager-user admin password cipher Cisco@123 service-type web terminal ssh level 15 web-manager enable web-manager security enable ssh user admin ssh user admin authentication-type password ssh user admin service-type stelnet firewall zone trust add interface GigabitEthernet0/0/0 interface GigabitEthernet0/0/0 ip address 192.168.10.2 255.255.255.0 service-manage http permit service-manage https permit service-manage ping permit service-manage ssh permit user-interface con 0 authentication-mode aaa user-interface vty 0 4 authentication-mode aaa 导入上面新建的初始配置文件，启动设备 命令行登陆，提示输入用户密码，输入初始配置文件配置的密码后，可直接登陆设备 在浏览器输入 192.168.10.2:8443 ，可跳转到防火墙登陆界面 使用 SecureCRT 软件，可登陆到防火墙设备 ​\n","date":"2021-01-08T01:08:52Z","permalink":"https://kiraster.github.io/posts/ab67d7a4.html/","title":"ENSP_防火墙初始密码问题"},{"content":"字面意思\n肚里墨水浅，蹦不出几个字\n晚上躺床，可能由于早已被破坏了的生物钟的影响\n时常辗转反侧，脑里思绪万千\n明明是身体驱使着我要睡了要睡了\n但是脑子并不协调躯体\n躺床的我使劲的翻看手机屏幕\n完全忘记了床的两大原始作用，你懂我意思吗\n最近一段时间，几乎每晚靠着罗哥调校自如的声音入睡\n喜马拉雅，定一个倒计时\n强行把自己深夜的思绪带入场景中\n也会听那个男人的语录，轻微的嘴角上扬和感悟中入睡\n眼睛一睁已是第二天的差不多日上三竿的时间\n洗洗醒醒坐坐，一天开始了\n","date":"2021-01-06T05:31:59Z","permalink":"https://kiraster.github.io/posts/49183d2a.html/","title":"关于开始扯谈"},{"content":"Test Page\nThis is a test page . ","date":"2020-10-26T12:45:43Z","permalink":"https://kiraster.github.io/posts/515317e3.html/","title":"archive_test"}]